// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NvShortVideoCore
import AVFoundation
import CommonCrypto
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import ImageIO
import MediaPlayer
import MobileCoreServices
import NvMSAutoTemplate
@_exported import NvShortVideoCore
import NvStreamingSdkCore
import Photos
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct NvTemplateRect {
  public var leftTop: CoreFoundation.CGPoint
  public var rightTop: CoreFoundation.CGPoint
  public var rightBottom: CoreFoundation.CGPoint
  public var leftBottom: CoreFoundation.CGPoint
  public init()
  public var center: CoreFoundation.CGPoint {
    get
  }
}
public enum NvTemplateUtils {
  public static var keyWindow: UIKit.UIWindow? {
    get
  }
}
extension NvShortVideoCore.NvTemplateUtils {
  public static func rgbColor(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  public static func hexColor(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor?
}
public protocol NvReusable : AnyObject {
  static var nvReuseIdentifier: Swift.String { get }
}
extension NvShortVideoCore.NvReusable {
  public static var nvReuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) final public func nvRegister<T>(cellType: T.Type) where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvReusable
  @_Concurrency.MainActor(unsafe) final public func nvDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvReusable
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) final public func nvRegister<T>(cellType: T.Type) where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvReusable
  @_Concurrency.MainActor(unsafe) final public func nvDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvReusable
}
@_inheritsConvenienceInitializers @objc open class NvSource : ObjectiveC.NSObject, NvShortVideoCore.NvDraftSource {
  @objc public var mediaType: NvShortVideoCore.MeicamMediaType
  @objc public var file: NvShortVideoCore.NvSourceFileInfo
  @objc public var reverseFile: NvShortVideoCore.NvSourceFileInfo?
  @objc public var relatedProjects: [Swift.String]
  @objc public var resourceId: Swift.String
  @objc public var deleteWhenUnuse: Swift.Bool
  @objc override required dynamic public init()
  required public init(localFilePath: Swift.String, resourceId: Swift.String)
  @objc public class func whc_TableName() -> Swift.String
  @objc public class func whc_SqlitePath() -> Swift.String
  @objc public class func whc_SqliteVersion() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NvRefreshTrailer : NvShortVideoCore.NvRefreshComponent {
  @objc @_Concurrency.MainActor(unsafe) open var ignoredScrollViewContentInsetRight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override open func configScrollViewBounce(_ newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func placeSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func endRefreshingWithNoMoreData()
  @objc @_Concurrency.MainActor(unsafe) open func resetNoMoreData()
  @_Concurrency.MainActor(unsafe) override open func updateRefreshState(for lastState: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override open func scrollViewContentOffsetDidChanged(change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override open func scrollViewContentSizeDidChanged(change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvEffectLinkage {
  public enum NvLinkageDataType : Swift.Int {
    case filter
    case sticker
    case caption
    case comCaption
    case effect
    case plugin
    case adjust
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ChangeAction : Swift.Int {
    case delete
    case change
    case changeAndMove
    case move
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func linkageAble(clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType) -> Swift.Bool
  public static func timelineRangChange(timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, originInPoint: Swift.Int64, originOutPoint: Swift.Int64, afterIntPoint: Swift.Int64, afterOutPoint: Swift.Int64) -> [[NvShortVideoCore.NvEffectLinkage.ChangeAction : [Swift.String : any NvShortVideoCore.NvUnionModel]]]?
  public static func timeRangeExchange(timeline: NvStreamingSdkCore.NvsTimeline, oprateArray: [any NvShortVideoCore.NvUnionModel], clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, originClipInPoint: Swift.Int64, originClipOutPoint: Swift.Int64, swappedClipInPoint: Swift.Int64, swappedClipOutPoint: Swift.Int64) -> [NvShortVideoCore.NvEffectLinkage.ChangeAction : [Swift.String : any NvShortVideoCore.NvUnionModel]]
  public static func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, itemSet: [[NvShortVideoCore.NvEffectLinkage.ChangeAction : [Swift.String : any NvShortVideoCore.NvUnionModel]]])
  @objc deinit
}
public enum NvEvent : Swift.String {
  case editModeEvent
  case seleteClipEvent
  case userClickActionEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NvEditModeChangedAction : Swift.Int {
  case defaultSet
  case filter
  case sticker
  case caption
  case comCaption
  case effect
  case watermark
  case audio
  case record
  case videoPip
  case videoBg
  case adjust
  case videoRate
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvUserClickActionEvent : Swift.Int {
  case none
  case addTransition
  case edit
  case focusClipChanged
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvSeleteClipEvent : Swift.Int {
  case selected
  case deselected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class NvPageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var style: NvShortVideoCore.PageStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subViews: [UIKit.UIView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleView: NvShortVideoCore.PageTitleView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentView: NvShortVideoCore.NvPageContentView {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.PageStyle, titles: [Swift.String], subViews: [UIKit.UIView], startIndex: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
final public class MeicamPoint : NvShortVideoCore.NvCodable {
  final public var x: Swift.Double
  final public var y: Swift.Double
  required public init()
  public init(cgPoint: CoreFoundation.CGPoint)
  public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public init(x: Swift.Double, y: Swift.Double)
  public init(position: NvStreamingSdkCore.NvsPosition2D)
  final public var cgPointValue: CoreFoundation.CGPoint {
    get
  }
  final public var positionValue: NvStreamingSdkCore.NvsPosition2D {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class MeicamColor : NvShortVideoCore.NvCodable, Foundation.NSCopying {
  required public init()
  public var red: Swift.Float
  public var green: Swift.Float
  public var blue: Swift.Float
  public var alpha: Swift.Float
  public init(red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  public init(color: NvStreamingSdkCore.NvsColor)
  public func colorValue() -> NvStreamingSdkCore.NvsColor
  @objc public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NvEffectModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var effect: NvStreamingSdkCore.NvsFx?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var packageId: Swift.String
  public var effectName: Swift.String
  public var effectNameEn: Swift.String
  public var outPoint: Swift.Int64
  public var inPoint: Swift.Int64
  public var isBuiltinFx: Swift.Bool
  public var videoTrackIndex: Swift.Int
  public var clipIndex: Swift.Int
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @discardableResult
  public func buildEffect(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func loadEffect(effect: NvStreamingSdkCore.NvsFx)
  public func changePackageId(bultinFx: Swift.Bool, effectName: Swift.String, effectNameEn: Swift.String, packageId: Swift.String, cTimeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvEffectModel {
  @discardableResult
  public func syncEntityTime(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
}
extension NvShortVideoCore.NvEffectModel : NvShortVideoCore.NvUnionModel {
  public func syncDataToEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func syncEntityData() -> Swift.Bool
  @discardableResult
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow _: NvStreamingSdkCore.NvsLiveWindow, timelineTime _: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvEffectModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class NvImageCaptionModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var imagePath: Swift.String
  @objc public var text: Swift.String
  @objc public var textAlignment: UIKit.NSTextAlignment
  @objc public var imageCaptionStyle: NvShortVideoCore.NvImageCaptionStyle
  @objc public var fontUuid: Swift.String?
  @objc public var fontFamily: Swift.String?
  @objc public var fontPath: Swift.String?
  @objc public var colorString: Swift.String
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func deepCopy() -> NvShortVideoCore.NvImageCaptionModel
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamMaskGenerator : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
public protocol PageContentViewDelegate : AnyObject {
  func contentView(_ contentView: NvShortVideoCore.PageContentView, didEndScrollAt index: Swift.Int)
  func contentView(_ contentView: NvShortVideoCore.PageContentView, scrollingWith sourceIndex: Swift.Int, targetIndex: Swift.Int, progress: CoreFoundation.CGFloat)
}
@objc @_Concurrency.MainActor(unsafe) open class PageContentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.PageContentViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc weak public var eventHandler: (any NvShortVideoCore.PageEventHandleable)?
  @_Concurrency.MainActor(unsafe) public var style: NvShortVideoCore.PageStyle
  @_Concurrency.MainActor(unsafe) public var childViewControllers: [UIKit.UIViewController] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.PageStyle, childViewControllers: [UIKit.UIViewController], currentIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func refreshView()
  @objc deinit
}
extension NvShortVideoCore.PageContentView {
  @_Concurrency.MainActor(unsafe) public func setupUI()
}
extension NvShortVideoCore.PageContentView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension NvShortVideoCore.PageContentView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension NvShortVideoCore.PageContentView : NvShortVideoCore.PageTitleViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func titleView(_ titleView: NvShortVideoCore.PageTitleView, didSelectAt index: Swift.Int)
}
public protocol NvCommandClipUpdateInfo : NvShortVideoCore.NvCommandUpdateInfo {
  var trackIndex: Swift.Int { get set }
  var updateItems: [NvShortVideoCore.NvFxUpdateItem] { get set }
  var backupItems: [NvShortVideoCore.NvFxUpdateItem] { get set }
}
@objc @_inheritsConvenienceInitializers open class NvClipFxUpdateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCommandClipUpdateInfo {
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var updateItems: [NvShortVideoCore.NvFxUpdateItem]
  public var backupItems: [NvShortVideoCore.NvFxUpdateItem]
  @objc override dynamic public init()
  @objc deinit
}
@objc open class NvFxUpdateItem : ObjectiveC.NSObject {
  public var addingMethod: NvShortVideoCore.MeicamFxAddingMethodType
  public init(fxType: NvShortVideoCore.NvVideoClipFxType, fxIndicate: Swift.String? = nil, params: [NvShortVideoCore.MeicamFxParam] = [], attachmentParams: [Swift.String : Swift.String] = [:], intensity: Swift.Float = -1, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .raw, fxInfo: (isBuiltin: Swift.Bool, fx: Swift.String) = (true, ""))
  public func copyWithoutParams() -> NvShortVideoCore.NvFxUpdateItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvFxCommandUpdateParam : ObjectiveC.NSObject, NvShortVideoCore.NvCommandUpdateInfo {
  public var actionType: NvShortVideoCore.NvCommand.ActionType
  public var itemIndicate: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvFxCommand {
  public class func settleBackupItems(clipModel: NvShortVideoCore.NvVideoClipModel, updateItems: [NvShortVideoCore.NvFxUpdateItem]) -> [NvShortVideoCore.NvFxUpdateItem]
  public static func oprateClipFxUpdateParamAction(ationType: NvShortVideoCore.NvCommand.ActionType, hasDeleteFx: Swift.Bool, clipModel: NvShortVideoCore.NvVideoClipModel, timeline: NvStreamingSdkCore.NvsTimeline, updateItem: NvShortVideoCore.NvFxUpdateItem, backupItems: [NvShortVideoCore.NvFxUpdateItem], undoAction: Swift.Bool) -> NvShortVideoCore.NvCommandError
  public class func oprateFxUpdateParamAction(ationType: NvShortVideoCore.NvCommand.ActionType, oprateFx: NvStreamingSdkCore.NvsFx, oprateFxModel: NvShortVideoCore.MeicamFx, updateItem: NvShortVideoCore.NvFxUpdateItem, backupItems _: [NvShortVideoCore.NvFxUpdateItem], undoAction: Swift.Bool) -> NvShortVideoCore.NvCommandError
  public class func clipFxUpdateParamCommand(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel, actionType: NvShortVideoCore.NvCommand.ActionType = .merge, updateItems: [NvShortVideoCore.NvFxUpdateItem] = [], needRefresh: Swift.Bool = false) -> NvShortVideoCore.NvCommand
  public static func clipFxUpdateParamRedoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?)
  public static func clipFxUpdateParamUndoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, backupInfo _: [Swift.String : Any]?, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  @objc deinit
}
extension NvShortVideoCore.NvEditManager {
  @objc dynamic public var effectNeedProEdit: Swift.Bool {
    @objc get
  }
  @objc dynamic public var recordTrackVolume: Swift.Float {
    @objc get
    @objc set
  }
  @objc dynamic public func filePathForAudio() -> Swift.String
  @objc dynamic public func startRecordPlay(end: Swift.Int64)
  @objc dynamic public func endRecordPlay()
}
public enum MeicamFxSourceType : Swift.Int, Swift.Codable {
  case timelineFx
  case trackFx
  case videoFx
  case audioFx
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MeicamFxType : Swift.Int, Swift.Codable {
  case builtin
  case package
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MeicamFxAddingMethodType : Swift.Int, Swift.Codable {
  case normal
  case raw
  case property
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class MeicamFx : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var fxSourceType: NvShortVideoCore.MeicamFxSourceType
  public var addingMethod: NvShortVideoCore.MeicamFxAddingMethodType
  public var videoFxType: NvShortVideoCore.MeicamFxType
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var absoluteTimeUsed: Swift.Bool
  public var builtinName: Swift.String
  public var packageId: Swift.String
  public var trackCompensateZValue: Swift.Int
  public var index: Swift.UInt32
  public var intensity: Swift.Float
  public var region: NvShortVideoCore.MeicamFxRegion?
  public var fxParams: [Swift.String : [NvShortVideoCore.MeicamFxParam]]
  public var supportedKeyframeParams: [Swift.String]
  public var attachmentsSet: [Swift.String : Swift.String]
  @objc override required dynamic public init()
  public init(addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .property)
  public func copy() -> NvShortVideoCore.MeicamFx
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NvShortVideoCore.MeicamFx {
  @discardableResult
  public func built(superNode: ObjectiveC.NSObject) -> NvStreamingSdkCore.NvsFx?
  public func builtFxParams(targetFx: NvStreamingSdkCore.NvsFx?)
}
extension NvShortVideoCore.MeicamFx {
  @discardableResult
  public class func load(fx: NvStreamingSdkCore.NvsFx, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .normal) -> NvShortVideoCore.MeicamFx
  public func load(fx: NvStreamingSdkCore.NvsFx, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType)
  public class func setFxAttachment(fx: NvStreamingSdkCore.NvsFx?, attachments: [Swift.String : Swift.String])
  public class func getFxAttachments(fx: NvStreamingSdkCore.NvsFx?, keys: [Swift.String]) -> [Swift.String : Swift.String]
}
extension ObjectiveC.NSObject {
  public func presentWithRootViewController(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func pushViewControllerWithRootViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
}
public protocol NvPageContentViewDelegate : AnyObject {
  func contentView(_ contentView: NvShortVideoCore.NvPageContentView, didEndScrollAt index: Swift.Int)
  func contentView(_ contentView: NvShortVideoCore.NvPageContentView, scrollingWith sourceIndex: Swift.Int, targetIndex: Swift.Int, progress: CoreFoundation.CGFloat)
}
@objc @_Concurrency.MainActor(unsafe) open class NvPageContentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvPageContentViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc weak public var eventHandler: (any NvShortVideoCore.PageEventHandleable)?
  @_Concurrency.MainActor(unsafe) public var style: NvShortVideoCore.PageStyle
  @_Concurrency.MainActor(unsafe) public var subViews: [UIKit.UIView]
  @_Concurrency.MainActor(unsafe) public var currentIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.PageStyle, subViews: [UIKit.UIView], currentIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension NvShortVideoCore.NvPageContentView {
  @_Concurrency.MainActor(unsafe) public func setupUI()
}
extension NvShortVideoCore.NvPageContentView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension NvShortVideoCore.NvPageContentView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension NvShortVideoCore.NvPageContentView : NvShortVideoCore.PageTitleViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func titleView(_ titleView: NvShortVideoCore.PageTitleView, didSelectAt index: Swift.Int)
}
@objc @_inheritsConvenienceInitializers open class NvAudioClipCommand : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class NvAudioClipUpdateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCommandUpdateInfo {
    public var itemIndicate: Swift.String
    public var trackIndex: Swift.Int
    public var updateItem: NvShortVideoCore.NvAudioClipUpdateParam!
    public var backupItem: NvShortVideoCore.NvAudioClipModel?
    @objc override dynamic public init()
    @objc deinit
  }
  public class func clipUpdateCommand(title: Swift.String, clipModel: NvShortVideoCore.NvAudioClipModel, updateItem: NvShortVideoCore.NvAudioClipUpdateParam, needRefresh: Swift.Bool = true) -> NvShortVideoCore.NvCommand
  open class func findaudioClipInuseModel(itemIndicate: Swift.String, trackIndex _: Swift.Int, timelineModel: NvShortVideoCore.NvTimelineModel) -> NvShortVideoCore.NvAudioClipModel?
  @objc override dynamic public init()
  @objc deinit
}
open class NvAudioClipTransitionCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool
  public init(title: Swift.String, clipModel: NvShortVideoCore.NvAudioClipModel)
  public func updateInputPraram(fadeInDuration: Swift.Int64, fadeOutDuration: Swift.Int64)
  @objc deinit
}
public typealias NvGetIcon = (UIKit.UIImage?, Swift.Int64) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NvIconGetter : ObjectiveC.NSObject {
  @discardableResult
  public class func getImageFromPath(_ path: Swift.String, time: Swift.Int64, flags: Swift.Int32 = 0, complate getIcon: NvShortVideoCore.NvGetIcon?) -> Swift.Int64
  @objc deinit
}
extension NvShortVideoCore.NvIconGetter : NvStreamingSdkCore.NvsIconGeneratorDelegate {
  @objc dynamic public func didIconReady(_ icon: UIKit.UIImage?, timestamp _: Swift.Int64, taskId: Swift.Int64)
}
public enum NvCoverType : Swift.Int, Swift.Codable {
  case videoFrame
  case photoImpor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvCoverInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  @objc override required dynamic public init()
  public var seletedResourceId: Swift.String
  public var type: NvShortVideoCore.NvCoverType
  public var seletedTime: Swift.Int64
  public var cropperModel: NvShortVideoCore.NvCropperModel?
  public var captionDataArray: [NvShortVideoCore.NvCaptionModel]
  public var comCaptionDataArray: [NvShortVideoCore.NvComCaptionModel]
  public func isInitial() -> Swift.Bool
  public func copyModel() -> NvShortVideoCore.NvCoverInfo
  @discardableResult
  public func syncEntityData() -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var nv_header: NvShortVideoCore.NvRefreshAutoHeader? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var nv_footer: NvShortVideoCore.NvRefreshAutoFooter? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var nv_trailer: NvShortVideoCore.NvRefreshAutoTrailer? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func nv_totalDataCount() -> Swift.Int
}
public protocol NvCodable : Swift.Decodable, Swift.Encodable {
}
extension NvShortVideoCore.NvCodable {
  public func deepCopy() -> Self?
  public static func deepCopy(_ object: Self) -> Self?
  public func toData() -> Foundation.Data?
  public func toJSON() -> [Swift.String : Any]?
  public func toJSONString() -> Swift.String?
  public static func deserialize(from data: Foundation.Data?) -> Self?
  public static func deserialize(from dict: [Swift.String : Any]?) -> Self?
  public static func deserialize(from json: Swift.String?) -> Self?
}
public enum NvCodableJSON {
  public static func modelToMap<T>(model: T) -> [Swift.String : Any]? where T : NvShortVideoCore.NvCodable
  public static func mapToModel<T>(map: [Swift.String : Any], modelType: T.Type) -> T? where T : NvShortVideoCore.NvCodable
  public static func modelToJson<T>(model: T) -> Swift.String? where T : NvShortVideoCore.NvCodable
  public static func jsonToModel<T>(jsonString: Swift.String, modelType: T.Type) -> T? where T : NvShortVideoCore.NvCodable
  public static func modelToData<T>(model: T) -> Foundation.Data? where T : NvShortVideoCore.NvCodable
  public static func dataToModel<T>(data: Foundation.Data?, modelType: T.Type) -> T? where T : NvShortVideoCore.NvCodable
  public static func dataToArrayModel<T>(data: Foundation.Data?, modelType: T.Type) -> [T] where T : NvShortVideoCore.NvCodable
  public static func jsonArrayToModel<T>(jsonString: Swift.String, modelType: T.Type) -> [T] where T : NvShortVideoCore.NvCodable
  public static func modelArrayToJson<T>(array: [T]) -> Swift.String where T : NvShortVideoCore.NvCodable
  public static func dictArrayToModel<T>(array: [[Swift.String : Any]], modelType: T.Type) -> [T] where T : NvShortVideoCore.NvCodable
}
extension NvShortVideoCore.MeicamFx {
  public func deleteKeyframe(param: NvShortVideoCore.MeicamFxParam) -> (before: NvShortVideoCore.MeicamFxParam?, after: NvShortVideoCore.MeicamFxParam?)
  public func update(param: NvShortVideoCore.MeicamFxParam) -> (before: NvShortVideoCore.MeicamFxParam?, after: NvShortVideoCore.MeicamFxParam?)
  public func backupKeyframeParam() -> NvShortVideoCore.MeicamFx?
  public func recoverKeyframeParam(fxModel: NvShortVideoCore.MeicamFx)
  public enum KeyframeActionType : Swift.Int {
    case none
    case trimLeft
    case trimRight
    case speed
    case reverse
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func operateKeyframeData(action: NvShortVideoCore.MeicamFx.KeyframeActionType, originDuration: Swift.Int64, currentDuration: Swift.Int64) -> NvShortVideoCore.MeicamFx?
  public func splitKeyframeData(videoClip: NvStreamingSdkCore.NvsVideoClip, splitPos: Swift.Int64)
  public func freezeKeyframeData(videoClip: NvStreamingSdkCore.NvsVideoClip, splitPos: Swift.Int64)
  public func resetKeyframeCurveControlPoint(key _: Swift.String, params: [NvShortVideoCore.MeicamFxParam])
  public class func nv_getFloatCurveControlPoint(preKeyframe: NvShortVideoCore.MeicamFxParam, nextKeyframe: NvShortVideoCore.MeicamFxParam, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint) -> (key: Swift.String, prePoint: NvStreamingSdkCore.NvsPointD, nextPoint: NvStreamingSdkCore.NvsPointD)
  public class func nv_getFloatCurveControlPoint(preKeyframeValue: Swift.Double, preKeyframePos: Swift.Int64, nextKeyframeValue: Swift.Double, nextKeyframePos: Swift.Int64, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint) -> (prePoint: NvStreamingSdkCore.NvsPointD, nextPoint: NvStreamingSdkCore.NvsPointD)
}
extension NvStreamingSdkCore.NvsFx {
  public func recoverKeyframeParam(fxModel: NvShortVideoCore.MeicamFx)
  public func recoverKeyframeParams(params: [NvShortVideoCore.MeicamFxParam])
  public func getParamValue(param: NvShortVideoCore.MeicamFxParam) -> NvShortVideoCore.MeicamFxParam?
  public func getParamValues(paramName: Swift.String, paramType: NvShortVideoCore.MeicamFxParamType) -> [NvShortVideoCore.MeicamFxParam]
  public func update(param: NvShortVideoCore.MeicamFxParam)
  public func findAdsorbPoint(key: Swift.String, pos: Swift.Int64, timeAdsorbScope: Swift.Int64) -> Swift.Int64
  public func findCurvePoints(key: Swift.String, type: NvShortVideoCore.MeicamFxParamType? = nil, pos: Swift.Int64) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  public func paramKeyType(key: Swift.String) -> NvShortVideoCore.MeicamFxParamType
  public func recoverEffcet(fxModel: NvShortVideoCore.MeicamFx)
  public func resetKeyframeCure(key: Swift.String, pos: Swift.Int64)
  public func resetKeyframeCureControlPoint(key: Swift.String, curveType: Swift.Int, preKeyframeValue: Swift.Double, preKeyframePos: Swift.Int64, nextKeyframeValue: Swift.Double, nextKeyframePos: Swift.Int64)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvVideoTrackPreviewContentView : NvShortVideoCore.NvEventView {
  @_Concurrency.MainActor(unsafe) public func updateFrame(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class NvVideoTrackPreview : NvShortVideoCore.NvEventView, UIKit.UIGestureRecognizerDelegate, NvShortVideoCore.NvStayStepperDelegate {
  @_Concurrency.MainActor(unsafe) public var longPress: UIKit.UILongPressGestureRecognizer!
  @_Concurrency.MainActor(unsafe) public var staySteper: NvShortVideoCore.NvStayStepper?
  @_Concurrency.MainActor(unsafe) public var commandManager: NvShortVideoCore.NvCommandManager!
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func enterNoticeState()
  @_Concurrency.MainActor(unsafe) public func leaveNoticeState()
  @_Concurrency.MainActor(unsafe) public func stayStepperWork(stepper: NvShortVideoCore.NvStayStepper, timeChange: Swift.Int64)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamLineEffect : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamEdge : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamGrid : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamChromaticAberration : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
public struct NvClipViewState {
  public static func + (param1: NvShortVideoCore.NvClipViewState, param2: NvShortVideoCore.NvClipViewState) -> NvShortVideoCore.NvClipViewState
  public static func - (param1: NvShortVideoCore.NvClipViewState, param2: NvShortVideoCore.NvClipViewState) -> NvShortVideoCore.NvClipViewState
  public static var none: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var hideThumbnailHandle: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var speedTag: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var muteTag: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var disableRollbackTag: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var disableKeyframe: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var disableKeyframeCurve: NvShortVideoCore.NvClipViewState {
    get
  }
  public static var disableSeleteRectView: NvShortVideoCore.NvClipViewState {
    get
  }
}
public enum NvUserActionBottomType : Swift.Int, Swift.Codable {
  case login
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvOverTimeResponseType : Swift.Int, Swift.Codable {
  case none
  case stop
  case rollBack
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NvSingleClipEditViewDisplayStateDelegate : ObjectiveC.NSObjectProtocol {
  func trackCellDisplayStateChanged()
  func refreshTrackCellViewEvent(editView: NvShortVideoCore.NvSingleClipEditView, event: NvShortVideoCore.NvClipEditViewUpdateEvent, parameter: [Swift.String : Any]?)
  func editViewDissEvent(editView: NvShortVideoCore.NvSingleClipEditView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvSingleClipEditView : NvShortVideoCore.NvEventView {
  @_Concurrency.MainActor(unsafe) weak open var displayStateDelegate: (any NvShortVideoCore.NvSingleClipEditViewDisplayStateDelegate)?
  @_Concurrency.MainActor(unsafe) open var commandManager: NvShortVideoCore.NvCommandManager?
  @_Concurrency.MainActor(unsafe) public var backButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open func backButtonClicked() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func loadData(target: (any NvShortVideoCore.NvUnionModel)?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func playClipOverTime() -> (responseType: NvShortVideoCore.NvOverTimeResponseType, time: Swift.Int64)
  @_Concurrency.MainActor(unsafe) open func updataTimelinePlayTime(time _: Swift.Int64) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func playStateDidChanged(_: NvStreamingSdkCore.NvsStreamingEngineState)
  @_Concurrency.MainActor(unsafe) open func trackCellDisplayState() -> (displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func enableOrderVideoClips() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func loadTimelineData(nTimelineData _: NvShortVideoCore.NvTimelineModel) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func applicableForUserAction(action _: NvShortVideoCore.NvUserActionBottomType) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func refreshTrackCellViewEvent(event: NvShortVideoCore.NvClipEditViewUpdateEvent, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol NvVideoEditPreviewControlProtocol : AnyObject {
  func updateTime(currentTime: Swift.Int64, Duration: Swift.Int64)
  func playStateChanged(playing: Swift.Bool)
  func actionListChanged(revertAble: Swift.Bool, forwardAble: Swift.Bool)
  func disableRollbackFuc(disable: Swift.Bool)
  func keyframeFucStatueChanged(isSupport: Swift.Bool, isExist: Swift.Bool, isEnableEdit: Swift.Bool, disableCurve: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvVideoEditorViewController : NvShortVideoCore.NvEventViewController, NvShortVideoCore.NvMenuOperatorProtocol, NvShortVideoCore.NvTimelineViewDelegate, NvShortVideoCore.NvCommandManagerDelegate {
  @_Concurrency.MainActor(unsafe) public var liveWindow: NvStreamingSdkCore.NvsLiveWindow!
  @_Concurrency.MainActor(unsafe) public var liveWindowBgView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) weak public var previewControlDelegate: (any NvShortVideoCore.NvVideoEditPreviewControlProtocol)?
  @_Concurrency.MainActor(unsafe) public var popViewManager: NvShortVideoCore.NvBottomPopViewManager!
  @_Concurrency.MainActor(unsafe) public var actionTarget: (any NvShortVideoCore.NvUnionModel)? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomMenuView: NvShortVideoCore.NvBottomMenuView!
  @_Concurrency.MainActor(unsafe) public var secondaryMenuOperator: NvShortVideoCore.NvMenuOperator?
  @_Concurrency.MainActor(unsafe) public var timelineView: NvShortVideoCore.NvTimelineView!
  @_Concurrency.MainActor(unsafe) public var rectViewManager: NvShortVideoCore.NvRectViewManager
  @_Concurrency.MainActor(unsafe) public var vcDisplayStateValue: NvShortVideoCore.NvClipViewState
  @_Concurrency.MainActor(unsafe) public var commandManager: NvShortVideoCore.NvCommandManager!
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func projectDataLoaded()
  @_Concurrency.MainActor(unsafe) public func receive(window: NvStreamingSdkCore.NvsLiveWindow)
  @_Concurrency.MainActor(unsafe) public func cleanBeforePop()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open func receiveEvent(event: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: ObjectiveC.NSObject?, sender: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func setEditMode(editMode: NvShortVideoCore.NvEditModeChangedAction)
  @_Concurrency.MainActor(unsafe) public func streamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @_Concurrency.MainActor(unsafe) public func playbackTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64, checkFrame: Swift.Bool, checkSeleted: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func refreshTrackTransitionView()
  @_Concurrency.MainActor(unsafe) open func handleMenuItem(item: NvShortVideoCore.NvFirstMenuItem) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func handleSelectedItem(item: NvShortVideoCore.NvSecondaryMenuItem) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func handleSelectedSingleClipItem(item: NvShortVideoCore.NvSecondaryMenuItem, seletedUnionModel: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func handleCustomClipEditMenuView(target _: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func editCaption(captionModel: NvShortVideoCore.NvCaptionModel)
  @_Concurrency.MainActor(unsafe) open func editComCaption(comCaptionModel: NvShortVideoCore.NvComCaptionModel, textIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func seletedVideoTrackTransitionIndex(selectTransitionIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func updateMainTrackVolumeState()
  @_Concurrency.MainActor(unsafe) public func keyframeOperator(isRemoved: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func curveKeyframeOperator()
  @_Concurrency.MainActor(unsafe) open func trackScrollViewWillSeek() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func viewForMainTrackHeader(timelineView _: NvShortVideoCore.NvTimelineView, mainTrackHeight _: CoreFoundation.CGFloat) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open func viewForMainTrackOperator(timelineView _: NvShortVideoCore.NvTimelineView, mainTrackHeight _: CoreFoundation.CGFloat) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open func configProjectCustomProtocol(editInterfaceCustomProtocol _: NvShortVideoCore.NvEditInterfaceCustomProtocol)
  @_Concurrency.MainActor(unsafe) public func addAlbumAssetClip(assets: [Photos.PHAsset])
  @_Concurrency.MainActor(unsafe) public func videoTrackClipsOrderChanged(videoTrackView _: NvShortVideoCore.NvVideoTrackPreview, fromIndex _: Swift.UInt32, toIndex _: Swift.UInt32)
  @_Concurrency.MainActor(unsafe) public func videoTrackClipsOrderEnableChanged() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func videoTrackSelectTransitionIndex(videoTrackView _: NvShortVideoCore.NvVideoTrackPreview, selectTransitionIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func timelineView(timelineView _: NvShortVideoCore.NvTimelineView, scrollPosition: Swift.Int64)
  @_Concurrency.MainActor(unsafe) public func responseForOverClipTime() -> (responseType: NvShortVideoCore.NvOverTimeResponseType, time: Swift.Int64)
  @_Concurrency.MainActor(unsafe) open func receivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NvShortVideoCore.NvVideoEditorViewController : NvShortVideoCore.NvBottomMenuViewDelegate {
  @_Concurrency.MainActor(unsafe) public func clipViewDisplayStateChanged(displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func clipEditViewExitSelectedStatus(menuView: NvShortVideoCore.NvBottomMenuView)
  @_Concurrency.MainActor(unsafe) public func customClipEditMenuView(target: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvVideoEditorViewController : NvShortVideoCore.NvRectViewManagerDelegate {
  @_Concurrency.MainActor(unsafe) public func rectViewManagerRefreshEvent(managar _: any NvShortVideoCore.NvRectViewManagerObject, event: NvShortVideoCore.NvRectViewUpdateEvent, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func rectViewManagerIsEditing(forFx event: NvShortVideoCore.NvRectViewUpdateEvent) -> Swift.Bool
}
extension NvShortVideoCore.NvVideoEditorViewController : NvStreamingSdkCore.NvsStreamingContextDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didStreamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didPlaybackTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didSeekingTimelinePosition(_: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didPlaybackEOF(_: NvStreamingSdkCore.NvsTimeline!)
}
extension NvShortVideoCore.NvVideoEditorViewController {
  @_Concurrency.MainActor(unsafe) public func willPerformCommand(command _: NvShortVideoCore.NvCommand, operateType _: NvShortVideoCore.NvCommandOperateType)
  @_Concurrency.MainActor(unsafe) public func hasFinishedCommand(command _: NvShortVideoCore.NvCommand, operateType _: NvShortVideoCore.NvCommandOperateType, revertAble: Swift.Bool, forwardAble: Swift.Bool, autoRefresh: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func updateClipEditViewDispalyState(all: Swift.Bool)
}
open class NvVideoClipCurveSpeedCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool
  public init(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel)
  public func updateInputPraram(curveSpeedModel: NvShortVideoCore.NvCurveSpeedModel)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NvTemplateNoDataView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public func loadTheme(theme: NvShortVideoCore.NvTemplateHomeDataErrorTheme)
  @objc deinit
}
public enum NvRequestError : Swift.Error {
  case noError
  case rspError
  case netError
  public static func == (a: NvShortVideoCore.NvRequestError, b: NvShortVideoCore.NvRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class NvFaceEffectHelper {
  public static func faceEffectUpdateItem(fx: NvStreamingSdkCore.NvsFx) -> NvShortVideoCore.NvFxUpdateItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class NvCropperRectView : UIKit.UIView {
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with _: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvCropperRectView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith _: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvCropperScrollView : UIKit.UIView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var crpperModel: NvShortVideoCore.NvCropperModel!
  @_Concurrency.MainActor(unsafe) @objc public func viewForZooming(in _: UIKit.UIScrollView) -> UIKit.UIView?
  @objc deinit
}
extension NvShortVideoCore.NvCropperScrollView {
  @_Concurrency.MainActor(unsafe) public func setupData(sourceInfo: NvShortVideoCore.NvSourceInfo, currentTime: Swift.Int64, crpperModel: NvShortVideoCore.NvCropperModel)
  @_Concurrency.MainActor(unsafe) public func resetRatio(aspectRatio: NvShortVideoCore.NvEditAspectRatioMode)
  @_Concurrency.MainActor(unsafe) public func resetRotateAngle(angle: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func currentTransformState() -> (cropperModel: NvShortVideoCore.NvCropperModel, playTime: Swift.Int64, rect: (rectLeftTop: CoreFoundation.CGPoint, rectLeftBottom: CoreFoundation.CGPoint, rectRightBottom: CoreFoundation.CGPoint, rectRightTop: CoreFoundation.CGPoint))
}
extension NvShortVideoCore.NvCropperScrollView : NvShortVideoCore.NvCropperBottomViewDelegate, NvStreamingSdkCore.NvsStreamingContextDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didPlaybackTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didPlaybackEOF(_: NvStreamingSdkCore.NvsTimeline!)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didStreamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @_Concurrency.MainActor(unsafe) public func cropperBottomView(cropperBottomView _: NvShortVideoCore.NvCropperBottomView, playButtonClicked _: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) public func cropperBottomView(cropperBottomView _: NvShortVideoCore.NvCropperBottomView, valueChanged: Swift.Float)
}
public enum NvTemplateEnvs {
  public static var templateCompileDir: Swift.String {
    get
  }
  public static var templateReverseDir: Swift.String {
    get
  }
}
extension NvShortVideoCore.NvProgressView {
  public struct Options {
    public var progressColor: UIKit.UIColor
    public var progressTrackColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var progressWidth: CoreFoundation.CGFloat
    public var textColor: UIKit.UIColor
    public var textFont: UIKit.UIFont
    public init()
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvProgressView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var showProgress: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var percent: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var config: NvShortVideoCore.NvProgressView.Options!
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, opt: NvShortVideoCore.NvProgressView.Options)
  @_Concurrency.MainActor(unsafe) public init(for opt: NvShortVideoCore.NvProgressView.Options)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public enum NvRectViewUpdateEvent : Swift.String {
  case editCaption
  case editComcaption
  case keyframeEvent
  case displayState
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NvRectViewTypeKey : Swift.String {
  case undefine
  case theme
  case video
  case videoRate
  case captionSticker
  case mask
  case effect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NvRectViewManagerObject : AnyObject {
  var view: UIKit.UIView? { get }
  func updateCenterTime(time: Swift.Int64, isPlaying: Swift.Bool)
  func didSeekingTimelinePosition(position: Swift.Int64)
  func streamingEngineStateChanged(state: NvStreamingSdkCore.NvsStreamingEngineState)
  func seletedAction(sender: ObjectiveC.NSObject?, action: NvShortVideoCore.NvSeleteClipEvent, object: Swift.AnyObject?)
  var refreshDelegate: (any NvShortVideoCore.NvRectViewManagerDelegate)? { get set }
  func rectManagerReceivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
}
public protocol NvRectViewManagerDelegate : AnyObject {
  func rectViewManagerRefreshEvent(managar: any NvShortVideoCore.NvRectViewManagerObject, event: NvShortVideoCore.NvRectViewUpdateEvent, parameter: [Swift.String : Any]?)
  func rectViewManagerIsEditing(forFx event: NvShortVideoCore.NvRectViewUpdateEvent) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class NvRectViewManager : ObjectiveC.NSObject {
  weak public var refreshDelegate: (any NvShortVideoCore.NvRectViewManagerDelegate)?
  public var commandManager: NvShortVideoCore.NvCommandManager!
  public func appendRectViewManager(key: NvShortVideoCore.NvRectViewTypeKey, manager: any NvShortVideoCore.NvRectViewManagerObject, clean: Swift.Bool)
  public func update(displayState: NvShortVideoCore.NvClipViewState)
  public func removeRectViewManager(key: NvShortVideoCore.NvRectViewTypeKey)
  public func rectViewFor(key: NvShortVideoCore.NvRectViewTypeKey) -> (any NvShortVideoCore.NvRectViewManagerObject)?
  public func rectManagerReceivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvRectViewManager : NvShortVideoCore.NvRectViewManagerObject, NvShortVideoCore.NvRectViewManagerDelegate {
  public func updateCenterTime(time: Swift.Int64, isPlaying: Swift.Bool)
  public func didSeekingTimelinePosition(position: Swift.Int64)
  public var view: UIKit.UIView? {
    get
  }
  public func streamingEngineStateChanged(state: NvStreamingSdkCore.NvsStreamingEngineState)
  public func seletedAction(sender: ObjectiveC.NSObject?, action: NvShortVideoCore.NvSeleteClipEvent, object: Swift.AnyObject?)
  public func rectViewManagerRefreshEvent(managar: any NvShortVideoCore.NvRectViewManagerObject, event: NvShortVideoCore.NvRectViewUpdateEvent, parameter: [Swift.String : Any]?)
  public func rectViewManagerIsEditing(forFx event: NvShortVideoCore.NvRectViewUpdateEvent) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvCloseRotationRectView : NvShortVideoCore.NvRotationScaleRectView {
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, customDelegate: (any NvShortVideoCore.NvRectViewCustomProtocol)?, lineConfig: NvShortVideoCore.NvRcetViewLingConfig)
  @_Concurrency.MainActor(unsafe) override final public func setPoints(rect: NvShortVideoCore.NvRect?, subRectsPoint: [[CoreFoundation.CGPoint]] = [[CGPoint]]())
  @objc deinit
}
extension NvShortVideoCore.NvKeyframeCommand {
  public enum TimelineFxType : Swift.Int {
    case sticker
    case caption
    case comCaption
    case timelinefx
    case `undef`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvTemplateButton : UIKit.UIButton {
  public enum ImageStyle {
    case left, right, top, bottom, back
    public static func == (a: NvShortVideoCore.NvTemplateButton.ImageStyle, b: NvShortVideoCore.NvTemplateButton.ImageStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum IndicatorStyle {
    case fixed, dynamic, overall
    public static func == (a: NvShortVideoCore.NvTemplateButton.IndicatorStyle, b: NvShortVideoCore.NvTemplateButton.IndicatorStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var space: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var indicatorColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indicatorHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func nv_resetLayout(style: NvShortVideoCore.NvTemplateButton.ImageStyle, space: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.NvTemplateButton.ImageStyle, space: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, indicator: NvShortVideoCore.NvTemplateButton.IndicatorStyle, fixed: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitle(_ title: Swift.String?, for state: UIKit.UIControl.State)
  @objc deinit
}
public typealias NvBuiltinInfo = (type: NvShortVideoCore.NvBuiltinType, displayName: Swift.String, displayNameEn: Swift.String)
public enum NvBuiltinType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case unspecified
  case blur
  case stylized
  case distorted
  case pixelated
  case spliter
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NvShortVideoCore.NvBuiltinType]
  public typealias RawValue = Swift.Int
  public static var allCases: [NvShortVideoCore.NvBuiltinType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvBlurBuiltinType : Swift.String, Swift.CaseIterable {
  case fastBlur
  case gaussianBlur
  case dirBlur
  case zoomBlur
  case spiralBlur
  case particleBlur
  case boxBlur
  public var builtinInfo: NvShortVideoCore.NvBuiltinInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvBlurBuiltinType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvBlurBuiltinType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvStylizedBuiltinType : Swift.String, Swift.CaseIterable {
  case lineEffect
  case edge
  case grid
  case chromaticAberration
  public var builtinInfo: NvShortVideoCore.NvBuiltinInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvStylizedBuiltinType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvStylizedBuiltinType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvSpliterBuiltinType : Swift.String, Swift.CaseIterable {
  case multiShots
  public var builtinInfo: NvShortVideoCore.NvBuiltinInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvSpliterBuiltinType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvSpliterBuiltinType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvPixelatedBuiltinType : Swift.String, Swift.CaseIterable {
  case emptiness
  case mosaic
  case noise
  case flyingDot
  public var builtinInfo: NvShortVideoCore.NvBuiltinInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvPixelatedBuiltinType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvPixelatedBuiltinType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvDistortedBuiltinType : Swift.String, Swift.CaseIterable {
  case waterRipple
  case distortion
  case noiseWave
  case signalGenerator
  case cameraDistortion
  case liqueFaction
  case vortex
  case opticalCompensation
  case pageCurl
  public var builtinInfo: NvShortVideoCore.NvBuiltinInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvDistortedBuiltinType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvDistortedBuiltinType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NvBuiltinFxModel : NvShortVideoCore.MeicamFx {
  public static func getBuiltinInfo(builtinName: Swift.String) -> NvShortVideoCore.NvBuiltinInfo
  public static func parserIdentify(_ keyframeIdentify: Swift.String) -> (fxId: Swift.String, fxName: Swift.String, itemId: Swift.String, fxKey: Swift.String)?
  public func queryFxParam(forKey key: Swift.String) -> NvShortVideoCore.MeicamFxParam?
  @objc required dynamic public init()
  override public init(addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public let extendTrackIndex: Swift.Int
public let mainTrackIndex: Swift.Int
@objc @_inheritsConvenienceInitializers public class NvTemplateClipModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var sourceType: Swift.Int
  public var sourceMuted: Swift.Bool
  public var sourceGroup: Swift.Int
  public var sourceReplace: Swift.Bool
  public var sourceTrimIn: Swift.Int64
  public var sourceBestTrimIn: Swift.Int64
  public func copyModel() -> NvShortVideoCore.NvTemplateClipModel
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NvVideoClipModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var videoClip: NvStreamingSdkCore.NvsVideoClip?
  public var mediaFilePath: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var trimIn: Swift.Int64
  public var trimOut: Swift.Int64
  public var stillImageHint: Swift.Bool
  public var rawSourceMode: Swift.Bool
  public var resourceId: Swift.String
  public var itemIndicate: Swift.String
  public var hasReversed: Swift.Bool
  public var curveSpeedModel: NvShortVideoCore.NvCurveSpeedModel
  public var trackIndex: Swift.Int
  public var clipIndex: Swift.Int
  public var bultinVideoTypeFxName: Swift.String?
  public var leftVolumeGain: Swift.Float
  public var rightVolumeGain: Swift.Float
  public var fadeInDuration: Swift.Int64
  public var fadeOutDuration: Swift.Int64
  public var blendMode: Swift.Int
  public var videoPropertyFxModel: NvShortVideoCore.MeicamFx
  public var videoRawFxArray: [NvShortVideoCore.MeicamFx]
  public var videoFxArray: [NvShortVideoCore.MeicamFx]
  public var netInfo: NvShortVideoCore.NvSourceM3u8Info?
  public var templateDraft: NvShortVideoCore.NvTemplateClipModel
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func getSpeed() -> CoreFoundation.CGFloat
  public func getCurrentDuration() -> Swift.Int64
  public func getOriginalDuration() -> Swift.Int64
  public func loadVideoClip(videoClip: NvStreamingSdkCore.NvsVideoClip)
  public func buildVideoClipEffect(videoClip: NvStreamingSdkCore.NvsVideoClip, cTimeline: NvStreamingSdkCore.NvsTimeline, source: any NvShortVideoCore.NvDraftSource)
  public func fetchSequenceDesc() -> NvShortVideoCore.NCSequenceDesc
  public func fxModel(type: NvShortVideoCore.NvVideoClipFxType, itemIndicate: Swift.String? = nil) -> NvShortVideoCore.MeicamFx?
  public func removeFxModel(model: NvShortVideoCore.MeicamFx)
  public func removeTypeFxModel(type: NvShortVideoCore.NvVideoClipFxType, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .raw)
  public func insertNewFxModel(model: NvShortVideoCore.MeicamFx)
  public func getPosByTimelinePos(_ time: Swift.Int64) -> Swift.Int64
  @objc deinit
}
extension NvShortVideoCore.NvVideoClipModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline _: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline: NvStreamingSdkCore.NvsTimeline?, liveWindow: NvStreamingSdkCore.NvsLiveWindow, timelineTime: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  @discardableResult
  public func isSupportKeyframe(_ keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  public func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  public func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func getTransformModel(timelineTime: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  public func setTransformModel(model _: NvShortVideoCore.NvTransformModel, anchor _: CoreFoundation.CGPoint, timelineTime _: Swift.Int64, timeAdsorbScope _: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline _: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline _: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index _: Swift.Int)
  public func copyModel() -> any NvShortVideoCore.NvUnionModel
  public func copyVideoModel() -> NvShortVideoCore.NvVideoClipModel
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func isValidity() -> Swift.Bool
}
extension NvShortVideoCore.NvVideoClipModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers @objcMembers open class NvRecognitionTextEditItem : ObjectiveC.NSObject {
  @objc public var itemIndicate: Swift.String
  @objc public var text: Swift.String
  @objc public var editText: Swift.String?
  @objc public var inPoint: Swift.Int64
  @objc public var outPoint: Swift.Int64
  @objc public var speechSpeed: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvEditManager {
  @objc public static func prepareProEditEnv()
  @objc dynamic public class func exitProEdit()
  @objc dynamic public class func openProject(projectId: Swift.String)
  @objc dynamic public class func newProject(files: [NvShortVideoCore.NvEditFileItem], music: NvShortVideoCore.NvEditMusicFileItem?, projectId: Swift.String) -> Swift.Bool
  @objc public static var editMode: NvShortVideoCore.NvEditMode {
    @objc get
  }
  public class func editModeExchange(mode: NvShortVideoCore.NvEditMode) -> NvShortVideoCore.NvEditAspectRatioMode
  public class func editAspectRatioExchange(mode: NvShortVideoCore.NvEditAspectRatioMode) -> NvShortVideoCore.NvEditMode
}
public enum NvConvertorError : Swift.Int {
  case noError
  case processing
  case inputError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class NvConvertorItem {
  final public var resourceId: Swift.String
  final public var extractAudio: Swift.Bool
  final public var mediaFile: Swift.String!
  final public var outPutFile: Swift.String!
  final public var duration: Swift.Int64
  final public var fileSize: Swift.Float
  final public var isReverseConvert: Swift.Bool
  final public var fromPosition: Swift.Int64
  final public var toPosition: Swift.Int64
  final public var options: Foundation.NSMutableDictionary
  final public var index: Swift.Int
  required public init()
  public init(mediaFile: Swift.String, outPutFile: Swift.String, duration: Swift.Int64, fileSize: Swift.Float, isReverseConvert: Swift.Bool, resourceId: Swift.String, extractAudio: Swift.Bool, options: Foundation.NSMutableDictionary)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class NvFileConvertor : ObjectiveC.NSObject {
  @discardableResult
  public static func convertMeidaFile(items: [NvShortVideoCore.NvConvertorItem], progress: @escaping ((_ progress: Swift.Float) -> Swift.Void), completion: @escaping ((_ convertedList: [NvShortVideoCore.NvConvertorItem], _ failureList: [NvShortVideoCore.NvConvertorItem]) -> Swift.Void)) -> NvShortVideoCore.NvConvertorError
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvFileConvertor : NvStreamingSdkCore.NvsMediaFileConvertorDelegate {
  @objc final public func didConvertorProgress(_ taskId: Swift.Int64, progress: Swift.Float)
  @objc final public func didConvertorFinish(_ taskId: Swift.Int64, sourceFile _: Swift.String!, outputFile dst: Swift.String!, errorCode error: NvStreamingSdkCore.NvsMediaConvertorErrorType)
  @objc final public func didAudioMuteRage(_: Swift.Int64, muteStart _: Swift.Int64, muteEnd _: Swift.Int64)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvSlider : UIKit.UISlider {
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) final public var margin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public init(displayValue isDisplay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override final public func trackRect(forBounds _: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override final public func thumbRect(forBounds bounds: CoreFoundation.CGRect, trackRect rect: CoreFoundation.CGRect, value: Swift.Float) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override final public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvCommand {
  public enum BuiltinAction : Swift.Int {
    case adjust
    case custom
    case watermark
    case `undef`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum AdjustAction : Swift.Int {
    case append
    case update
    case overspread
    case delete
    case recover
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum CustomAction : Swift.Int {
    case append
    case copy
    case overspread
    case update
    case delete
    case recover
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum WatermarkAction : Swift.Int {
    case append
    case update
    case delete
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension NvShortVideoCore.NvTimelineCommand {
  @discardableResult
  public static func addWatermarkFx(timeline: NvStreamingSdkCore.NvsTimeline, type: NvShortVideoCore.NvTimelineFxType, model: NvShortVideoCore.NvTimelineFxModel) -> NvStreamingSdkCore.NvsTimelineVideoFx?
  public static func removeWatermarkFx(timeline: NvStreamingSdkCore.NvsTimeline, type: NvShortVideoCore.NvTimelineFxType, model: NvShortVideoCore.NvTimelineFxModel)
}
extension NvShortVideoCore.NvTimelineCommand {
  public static func addAdjustFx(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, adjustModel: inout NvShortVideoCore.NvAdjustModel) -> Swift.Int
  public static func deleteAdjustFx(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, adjustModel: NvShortVideoCore.NvAdjustModel)
  public static func loadAdjustFx(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, adjustModel: inout NvShortVideoCore.NvAdjustModel) -> Swift.Bool
  public static func updateAdjustFx(_ adjust: [Swift.String : NvStreamingSdkCore.NvsTimelineVideoFx], model: NvShortVideoCore.NvAdjustModel)
  public static func updateAdjustTrack(model: NvShortVideoCore.NvAdjustModel, backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
}
extension NvShortVideoCore.NvTimelineCommand {
  public static func addPluginFx(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, pluginModel: inout NvShortVideoCore.NvPluginModel) -> Swift.Int
  public static func loadPluginFx(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, pluginModel: inout NvShortVideoCore.NvPluginModel)
  public static func updatePluginFx(_ fx: NvStreamingSdkCore.NvsTimelineVideoFx, model: NvShortVideoCore.NvPluginModel)
  public static func updatePluginTrack(model: NvShortVideoCore.NvPluginModel, keyframes: [Swift.String : Any], backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
}
public protocol NvCommandUpdateInfo {
  var itemIndicate: Swift.String { get set }
}
extension NvShortVideoCore.NvCommand {
  public enum ActionType : Swift.Int {
    case delete
    case merge
    case deleteKeyFrame
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
open class NvCommand {
  public var title: Swift.String
  public var backupDataDic: [Swift.String : Any]?
  public var inputParam: any NvShortVideoCore.NvCommandUpdateInfo
  public init(title: Swift.String, inputParam: any NvShortVideoCore.NvCommandUpdateInfo, redoAction: ((any NvShortVideoCore.NvCommandUpdateInfo, NvStreamingSdkCore.NvsTimeline, NvShortVideoCore.NvTimelineModel, Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?))? = nil, undoAction: ((any NvShortVideoCore.NvCommandUpdateInfo, [Swift.String : Any]?, NvStreamingSdkCore.NvsTimeline, NvShortVideoCore.NvTimelineModel, Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?))? = nil)
  @discardableResult
  open func performRedo(timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  @discardableResult
  open func performUndo(timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  open func commit() -> Swift.Bool
  open class func findInuseModel(actionTargetIndicate: Swift.String, targetClass: Swift.AnyClass, timelineModel: NvShortVideoCore.NvTimelineModel) -> (any NvShortVideoCore.NvUnionModel)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvEventCollectionViewCell : UIKit.UICollectionViewCell, NvShortVideoCore.NvReusable {
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func registerEvents(events: [NvShortVideoCore.NvEvent])
  @_Concurrency.MainActor(unsafe) open func remoteEvents()
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?)
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) open func receiveEvent(event _: NvShortVideoCore.NvEvent, action _: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender _: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvRefreshAutoHeader : NvShortVideoCore.NvRefreshHeader {
  @objc @_Concurrency.MainActor(unsafe) weak public var lastUpdatedTimeLabel: UIKit.UILabel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var stateLabel: UIKit.UILabel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var arrowView: UIKit.UIImageView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var loadingView: UIKit.UIActivityIndicatorView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelLeftInset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override public var lastUpdatedTimeKey: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open class func header(forTarget target: Swift.AnyObject, action: ObjectiveC.Selector) -> NvShortVideoCore.NvRefreshAutoHeader
  @_Concurrency.MainActor(unsafe) @objc override open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override open func placeSubviews()
  @_Concurrency.MainActor(unsafe) override open func updateRefreshState(for lastState: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol PageTitleViewDelegate {
  @objc optional var eventHandler: (any NvShortVideoCore.PageEventHandleable)? { get }
  @objc func titleView(_ titleView: NvShortVideoCore.PageTitleView, didSelectAt index: Swift.Int)
}
@objc public protocol PageEventHandleable {
  @objc optional func titleViewDidSelectSameTitle()
  @objc optional func contentViewDidDisappear()
  @objc optional func contentViewDidEndScroll()
}
@objc @_Concurrency.MainActor(unsafe) open class PageTitleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.PageTitleViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var clickHandler: NvShortVideoCore.TitleClickHandler?
  @_Concurrency.MainActor(unsafe) public var currentIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var titleLabels: [UIKit.UILabel] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var style: NvShortVideoCore.PageStyle
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var coverView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.PageStyle, titles: [Swift.String], currentIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func selectedTitle(at index: Swift.Int)
  @objc deinit
}
extension NvShortVideoCore.PageTitleView : NvShortVideoCore.NvThemeElement {
  @_Concurrency.MainActor(unsafe) public func setupUI()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func themeElements() -> [Swift.AnyHashable : Any]
  @_Concurrency.MainActor(unsafe) @objc dynamic public func update(_ cellTheme: NvShortVideoCore.NvCellTheme, selectedCellTheme: NvShortVideoCore.NvCellTheme, viewIndicate: Swift.String)
}
extension NvShortVideoCore.PageTitleView : NvShortVideoCore.PageContentViewDelegate {
  @_Concurrency.MainActor(unsafe) public func contentView(_ contentView: NvShortVideoCore.PageContentView, didEndScrollAt index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func contentView(_ contentView: NvShortVideoCore.PageContentView, scrollingWith sourceIndex: Swift.Int, targetIndex: Swift.Int, progress: CoreFoundation.CGFloat)
}
extension NvShortVideoCore.PageTitleView : NvShortVideoCore.NvPageContentViewDelegate {
  @_Concurrency.MainActor(unsafe) public func contentView(_ contentView: NvShortVideoCore.NvPageContentView, didEndScrollAt index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func contentView(_ contentView: NvShortVideoCore.NvPageContentView, scrollingWith sourceIndex: Swift.Int, targetIndex: Swift.Int, progress: CoreFoundation.CGFloat)
}
public protocol NvRectViewDelegate : AnyObject {
  func panGestureShouldBegin(point: CoreFoundation.CGPoint) -> Swift.Bool
  func containObjectForPoint(point: CoreFoundation.CGPoint) -> Swift.Bool
  func containSameObjectForPoint(point: CoreFoundation.CGPoint, otherPoint: CoreFoundation.CGPoint) -> Swift.Bool
  func gestureRectViewPinchScale(scale: CoreFoundation.CGFloat)
  func gestureRectViewRotation(rotation: CoreFoundation.CGFloat)
  func rectView(rectView: NvShortVideoCore.NvRectView, currentPoint: CoreFoundation.CGPoint, previousPoint: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView, began: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView, touchUpInside: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView, touchNone point: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView, ended: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView?, gesEnded: CoreFoundation.CGPoint)
  func rectView(rectView: NvShortVideoCore.NvRectView, isHidden: Swift.Bool)
}
extension NvShortVideoCore.NvRectViewDelegate {
  public func gestureRectViewPinchScale(scale _: CoreFoundation.CGFloat)
  public func gestureRectViewRotation(rotation _: CoreFoundation.CGFloat)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, currentPoint _: CoreFoundation.CGPoint, previousPoint _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, began _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, touchUpInside _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, touchNone _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, ended _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView?, gesEnded _: CoreFoundation.CGPoint)
  public func rectView(rectView _: NvShortVideoCore.NvRectView, isHidden _: Swift.Bool)
}
@objc @_Concurrency.MainActor(unsafe) open class NvRectView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvRectViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var strokeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, customDelegate: (any NvShortVideoCore.NvRectViewCustomProtocol)?, lineConfig: NvShortVideoCore.NvRcetViewLingConfig)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func removeGesture()
  @_Concurrency.MainActor(unsafe) public func setSeleted(model: (any NvShortVideoCore.NvUnionModel)?, viewType: NvShortVideoCore.NvRectViewTypeKey)
  @_Concurrency.MainActor(unsafe) public func setPoints(rect: NvShortVideoCore.NvRect?, subRectsPoint: [[CoreFoundation.CGPoint]] = [[CGPoint]]())
  @_Concurrency.MainActor(unsafe) public func getCenter() -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) public func isInRect(p: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func pointInRect(rect: NvShortVideoCore.NvRect, p: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setHiddenRectLine(hiddenRectLine: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_: CoreFoundation.CGRect)
  @objc deinit
}
extension NvShortVideoCore.NvRectView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith _: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NvEffectTrackView : NvShortVideoCore.NvSingleTrackView {
  @objc @_Concurrency.MainActor(unsafe) public var fxDataSource: NvShortVideoCore.NvTimeVideoFxDataSource!
  @objc @_Concurrency.MainActor(unsafe) public var edgeTime: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, editManager: NvShortVideoCore.NvEditManager)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) public class NvRecordTrackView : NvShortVideoCore.NvSingleTrackView {
  @objc @_Concurrency.MainActor(unsafe) public var fxDataSource: NvShortVideoCore.NvRecordDataSource!
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, editManager: NvShortVideoCore.NvEditManager)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum NvClipMaskType : Swift.Int, Swift.Codable {
  case none
  case line
  case mirror
  case circle
  case rect
  case heart
  case star
  case text
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvMaskRegionInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var type: Swift.Int
  public var points: [NvShortVideoCore.MeicamPoint]
  public var normalizedPoints: [NvShortVideoCore.MeicamPoint]
  public var normalizedCenter: NvShortVideoCore.MeicamPoint
  public var a: Swift.Float
  public var b: Swift.Float
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NvMaskModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var maskType: NvShortVideoCore.NvClipMaskType
  public var transform: NvShortVideoCore.NvTransformModel
  public var inverseRegion: Swift.Bool
  public var feather: Swift.Double
  public var horizontalScale: Swift.Float
  public var verticalScale: Swift.Float
  public var cornerRadiusRate: Swift.Float
  public var text: Swift.String
  final public let heightRateOfWidth: Swift.Float
  final public let maxNumberWords: Swift.Float
  final public let rectRate: Swift.Float
  final public let circleRate: Swift.Float
  public var regionInfo: NvShortVideoCore.NvMaskRegionInfo?
  @objc override required dynamic public init()
  public func move(translation: CoreFoundation.CGPoint, assetSize: CoreFoundation.CGSize, assetResolution: CoreFoundation.CGSize, transformModel: NvShortVideoCore.NvTransformModel?)
  public func copy() -> NvShortVideoCore.NvMaskModel
  public func getTemplateAttachment() -> (key: Swift.String, value: Swift.String)
  public static func getMaskType(by templateAttachment: Swift.String) -> NvShortVideoCore.NvClipMaskType
  public func nvMaskInfo(assetResolution: CoreFoundation.CGSize) -> NvStreamingSdkCore.NvsMaskRegionInfo?
  public func captionXmlString(sceneWidth: Swift.Int64, sceneHeight: Swift.Int64, heightRate: CoreFoundation.CGFloat, text: Swift.String, clipDuration: Swift.Int64, scale: CoreFoundation.CGFloat, rotation: CoreFoundation.CGFloat, transX: CoreFoundation.CGFloat, transY: CoreFoundation.CGFloat) -> Swift.String
  public static func fillMaskModel(fx: NvStreamingSdkCore.NvsVideoFx, maskRegionInfo: NvStreamingSdkCore.NvsMaskRegionInfo?, clipSize: CoreFoundation.CGSize, maskModel: NvShortVideoCore.NvMaskModel)
  public static func mapNormalizedToTimeline(point: NvShortVideoCore.MeicamPoint, size: CoreFoundation.CGSize) -> NvShortVideoCore.MeicamPoint
  public class func mapViewtoNormalized(point: CoreFoundation.CGPoint, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  public static func mapTimelineToNormalized(point: CoreFoundation.CGPoint, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class NvMaskHelper {
  public class func adjustMaskGeneratorData(maskFx: NvStreamingSdkCore.NvsVideoFx, fxName: Swift.String, shouldAdjustX: Swift.Bool, rateX: CoreFoundation.CGFloat, rateY: CoreFoundation.CGFloat)
  @objc deinit
}
public protocol NvTemplatePreviewViewControllerDelegate : AnyObject {
  func templateStartDownload(_ controller: NvShortVideoCore.NvTemplatePreviewViewController)
  func templateCompileWillStart()
  func templateCompileDidStart(templateId: Swift.String)
  func templateCompileDidCompleted(filePath: Swift.String, errorType: Swift.Int32, errorString: Swift.String)
}
extension NvShortVideoCore.NvTemplatePreviewViewControllerDelegate {
  public func templateCompileWillStart()
  public func templateCompileDidStart()
  public func templateCompileDidCompleted(filePath _: Swift.String, errorType _: Swift.Int32, errorString _: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvTemplatePreviewViewController : NvShortVideoCore.NvBaseTemplateViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvTemplatePreviewViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public var templateInfo: NvShortVideoCore.NvTemplateInfo {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var templateType: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var player: NvShortVideoCore.NvTemplatePlayer? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var templatePath: Swift.String
  @_Concurrency.MainActor(unsafe) final public var templateLicPath: Swift.String
  @_Concurrency.MainActor(unsafe) final public var isDownloaded: Swift.Bool {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) public init(for info: NvShortVideoCore.NvTemplateInfo, type: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override final public func popEvent()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
}
extension NvShortVideoCore.NvTemplatePreviewViewController : NvShortVideoCore.NvThemeElement {
  @_Concurrency.MainActor(unsafe) @objc final public func themeElements() -> [Swift.AnyHashable : Any]
}
extension NvShortVideoCore.NvTemplatePreviewViewController : NvShortVideoCore.NvTemplatePlayerDelegate {
  @_Concurrency.MainActor(unsafe) final public func previewTemplate()
  @_Concurrency.MainActor(unsafe) final public func player(player _: NvShortVideoCore.NvTemplatePlayer, currentTimeValue _: Swift.Double)
  @_Concurrency.MainActor(unsafe) final public func playerEOF(player: NvShortVideoCore.NvTemplatePlayer)
}
extension NvShortVideoCore.NvTemplatePreviewViewController : NvShortVideoCore.NvAlbumViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func nvAlbumViewController(controller _: NvShortVideoCore.NvAlbumViewController, selectTemplates templates: [NvShortVideoCore.NvAlbumTemplateItem], supportedRatio: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NvTemplateTimelineIcon : ObjectiveC.NSObject, NvStreamingSdkCore.NvsImageGrabberDelegate {
  public static func grab(_ context: NvStreamingSdkCore.NvsStreamingContext, timeline: NvStreamingSdkCore.NvsTimeline, timestamp: Swift.Int64, fillBlack: Swift.Bool, needScale: Swift.Bool = true) -> UIKit.UIImage?
  @discardableResult
  public static func asyncGrab(_ context: NvStreamingSdkCore.NvsStreamingContext, timeline: NvStreamingSdkCore.NvsTimeline, timestamp: Swift.Int64, fillBlack: Swift.Bool, needScale: Swift.Bool = true, completeHandle: @escaping (_ image: UIKit.UIImage?) -> Swift.Void) -> Swift.Bool
  @objc public func onImageGrabbedArrived(_ image: UIKit.UIImage?, timestamp _: Swift.Int64)
  @objc deinit
}
extension NvShortVideoCore.NvTextView {
  public enum Position : Swift.Int {
    case bottom
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol NvTextViewDelegate : AnyObject {
  func nvTextViewDidChange(_ textView: UIKit.UITextView)
  func nvTextView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
}
@objc @_Concurrency.MainActor(unsafe) open class NvTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) open var isEnableChangeLine: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var placeholderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minNumberOfWords: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxNumberOfWords: Swift.Int32 {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showTextCountView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textLayer: QuartzCore.CATextLayer!
  @_Concurrency.MainActor(unsafe) public var countdownTextLayer: QuartzCore.CATextLayer!
  @_Concurrency.MainActor(unsafe) weak public var nvdelegate: (any NvShortVideoCore.NvTextViewDelegate)?
  @_Concurrency.MainActor(unsafe) public init(for position: NvShortVideoCore.NvTextView.Position)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
extension NvShortVideoCore.NvTextView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
}
extension NvShortVideoCore.NvLogger {
  public enum Level : Swift.Int {
    case trace
    case debug
    case info
    case warn
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class NvLogger {
  public static func with(_ identifier: Swift.String) -> NvShortVideoCore.NvLogger
  public func setLogEnabled(_ enable: Swift.Bool = false)
  public func setLogLevelString(_ level: NvShortVideoCore.NvLogger.Level, desc: Swift.String)
  public static func dispose(_ identifier: Swift.String)
  @objc deinit
}
extension NvShortVideoCore.NvLogger {
  public func trace(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func trace(format: Swift.String, arguments: any Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func debug(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func debug(format: Swift.String, arguments: any Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func info(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func info(format: Swift.String, arguments: any Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func warn(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func warn(format: Swift.String, arguments: any Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func error(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func error(format: Swift.String, arguments: any Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
}
public protocol NvSingleClipDisplayProtocol : ObjectiveC.NSObjectProtocol {
  func synchronousStreamingEngineState(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  func synchronousPlaybackTimelinePosition(position: Swift.Int64)
  func bottomViewResponseForOverClipTime() -> (responseType: NvShortVideoCore.NvOverTimeResponseType, time: Swift.Int64)
  func willUnseletedObject(sender: ObjectiveC.NSObject) -> Swift.Bool
  func reloadSingleClipMenu(target: (any NvShortVideoCore.NvUnionModel)?, targetTypeChanged: Swift.Bool, sender: ObjectiveC.NSObject?)
  func appendOverlayEditView(view: NvShortVideoCore.NvSingleClipEditView)
  func removeNotApplicableSingleClipView(action: NvShortVideoCore.NvUserActionBottomType)
  func lastViewIsKindOf(checkClass: Swift.AnyClass) -> NvShortVideoCore.NvSingleClipEditView?
}
public protocol NvMenuProtocol : ObjectiveC.NSObjectProtocol {
  func synchronousStreamingEngineState(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  func synchronousPlaybackTimelinePosition(position: Swift.Int64)
  func reloadSingleClipMenu(target: (any NvShortVideoCore.NvUnionModel)?, targetTypeChanged: Swift.Bool, sender: ObjectiveC.NSObject?)
  var singleClipMenuView: NvShortVideoCore.NvSingleClipMenuView? { get }
}
@objc final public class NvBottomPopViewManager : NvShortVideoCore.NvEventObject {
  final public var commandManager: NvShortVideoCore.NvCommandManager!
  public init(displayView: UIKit.UIView, menuView: any NvShortVideoCore.NvMenuProtocol, commandManager: NvShortVideoCore.NvCommandManager)
  final public var currentClipViewDisplayState: (displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?) {
    get
  }
  final public func popManagerReceivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @objc deinit
}
extension NvShortVideoCore.NvBottomPopViewManager : NvShortVideoCore.NvSingleClipDisplayProtocol, NvShortVideoCore.NvSingleClipEditViewDisplayStateDelegate {
  final public func synchronousStreamingEngineState(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  final public func synchronousPlaybackTimelinePosition(position: Swift.Int64)
  final public func bottomViewResponseForOverClipTime() -> (responseType: NvShortVideoCore.NvOverTimeResponseType, time: Swift.Int64)
  final public func willUnseletedObject(sender: ObjectiveC.NSObject) -> Swift.Bool
  final public func appendOverlayEditView(view: NvShortVideoCore.NvSingleClipEditView)
  final public func reloadSingleClipMenu(target: (any NvShortVideoCore.NvUnionModel)?, targetTypeChanged: Swift.Bool, sender: ObjectiveC.NSObject?)
  final public func removeNotApplicableSingleClipView(action: NvShortVideoCore.NvUserActionBottomType)
  final public func lastViewIsKindOf(checkClass: Swift.AnyClass) -> NvShortVideoCore.NvSingleClipEditView?
  final public func removeLastView()
  final public func trackCellDisplayStateChanged()
  final public func refreshTrackCellViewEvent(editView: NvShortVideoCore.NvSingleClipEditView, event: NvShortVideoCore.NvClipEditViewUpdateEvent, parameter: [Swift.String : Any]?)
  final public func editViewDissEvent(editView: NvShortVideoCore.NvSingleClipEditView)
}
public typealias NvApplySuccess = ((_ success: Swift.Bool, _ responseObject: [Swift.String : Any]) -> Swift.Void)?
@objc @_inheritsConvenienceInitializers public class NvStickerModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var sticker: NvStreamingSdkCore.NvsTimelineAnimatedSticker?
  public var imageCaption: NvShortVideoCore.NvImageCaptionModel?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var isPanoramic: Swift.Bool
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var animatedStickerPackageId: Swift.String
  public var resourceId: Swift.String
  public var stickerHorizontalFlip: Swift.Bool
  public var leftVolume: Swift.Float
  public var rightVolume: Swift.Float
  public var coverImagePath: Swift.String
  public var hasAudio: Swift.Bool
  public var inAnimationUuid: Swift.String
  public var outAnimationUuid: Swift.String
  public var periodAnimationUuid: Swift.String
  public var inAnimationDuration: Swift.Int32
  public var outAnimationDuration: Swift.Int32
  public var periodAnimationDuration: Swift.Int32
  public var keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]]
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadAnimatedSticker(sticker: NvStreamingSdkCore.NvsTimelineAnimatedSticker)
  public func loadTrackAnimatedSticker(sticker: NvStreamingSdkCore.NvsTrackAnimatedSticker)
  public func loadSticker(sticker: NvStreamingSdkCore.NvsAnimatedSticker)
  public func buildSticker(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvStickerModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow: NvStreamingSdkCore.NvsLiveWindow, timelineTime: Swift.Int64, isTimelineVal: Swift.Bool) -> NvShortVideoCore.NvRect?
  @discardableResult
  public func isSupportKeyframe(_: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  public func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  public func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func getTransformModel(timelineTime: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  public func setTransformModel(model: NvShortVideoCore.NvTransformModel, anchor: CoreFoundation.CGPoint, timelineTime: Swift.Int64, timeAdsorbScope: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify _: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvStickerModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
public protocol NvCropperBottomViewDelegate : AnyObject {
  func cropperBottomView(cropperBottomView: NvShortVideoCore.NvCropperBottomView, playButtonClicked: UIKit.UIButton)
  func cropperBottomView(cropperBottomView: NvShortVideoCore.NvCropperBottomView, valueChanged: Swift.Float)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvCropperBottomView : UIKit.UIView {
  @objc deinit
}
extension NvShortVideoCore.NvAudioClipCommand {
  public class func clipAddCommand(title: Swift.String, clipTitle: Swift.String, audioType: NvShortVideoCore.NvAudioType, trackIndex: Swift.Int, timelineTime: Swift.Int64, trimIn: Swift.Int64, trimOut: Swift.Int64, fileIds: [Swift.String]) -> NvShortVideoCore.NvCommand
  public class func clipAddRecordCommand(title: Swift.String, clipTitle: Swift.String, audioType: NvShortVideoCore.NvAudioType, trackIndex: Swift.Int, timelineTime: Swift.Int64, trimIn: Swift.Int64, trimOut: Swift.Int64, fileId: Swift.String, itemIndicate: Swift.String) -> NvShortVideoCore.NvCommand
}
public enum NvLayout {
  public enum NvEnvs {
    case width
    case height
    case scale
    case statusBarHeight
    case naviBarHeight
    case naviHeight
    case bottomSafeAreaHeight
    public static func == (a: NvShortVideoCore.NvLayout.NvEnvs, b: NvShortVideoCore.NvLayout.NvEnvs) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var width: CoreFoundation.CGFloat {
    get
  }
  public static var height: CoreFoundation.CGFloat {
    get
  }
  public static var scale: CoreFoundation.CGFloat {
    get
  }
  public static var statusBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var naviBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var naviHeight: CoreFoundation.CGFloat {
    get
  }
  public static var bottomSafeAreaHeight: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var nv_x: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_y: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_width: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_height: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_left: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_top: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_right: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_bottom: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_centerX: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_centerY: CoreFoundation.CGFloat! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_center: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_size: CoreFoundation.CGSize! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nv_origin: CoreFoundation.CGPoint! {
    get
    set
  }
}
public enum NvUtils {
  public static var isZh: Swift.Bool {
    get
  }
  public static var baseTime: Swift.Int64 {
    get
  }
  public static var fbaseTime: CoreFoundation.CGFloat {
    get
  }
  public static var extendTrackTag: Swift.String {
    get
  }
  public static var templateTag: Swift.String {
    get
  }
  public static var customStickerTag: Swift.String {
    get
  }
  public static var keyWindow: UIKit.UIWindow? {
    get
  }
}
extension NvShortVideoCore.NvUtils {
  public static func fontWithSize(name: Swift.String = "PingFangSC-Regular", size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func randomColor() -> UIKit.UIColor
  public static func rgbColor(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  public static func hexColor(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor?
  public static func hexNvColor(hex: Swift.String, alpha: Swift.Float = 1.0) -> NvStreamingSdkCore.NvsColor
}
extension NvShortVideoCore.NvUtils {
  public static func imageWithColor(_ color: UIKit.UIColor) -> UIKit.UIImage
  public static func imageWithColor(_ color: UIKit.UIColor, size: CoreFoundation.CGSize) -> UIKit.UIImage?
  public static func imageByResizeToSize(image: UIKit.UIImage, size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
}
extension NvShortVideoCore.NvUtils {
  public static func convertToUrl(urlPath: Swift.String) -> Foundation.URL?
  public static func generateTemplateUID() -> Swift.String
  public static func StringToCGFloat(_ str: Swift.String) -> CoreFoundation.CGFloat
  public static func CGFloatToString(_ number: CoreFoundation.CGFloat, afterPoint: Swift.Int) -> Swift.String
  public static func FloatToString(_ number: Swift.Float, afterPoint: Swift.Int) -> Swift.String
  public static func timeToString(_ time: Swift.Int64, afterPoint: Swift.Int) -> Swift.String
  public static func numberToString(_ num: Swift.Int, den: Swift.Int, afterPoint: Swift.Int) -> Swift.String
  public static func timestampString() -> Swift.String
  public static func convertTimecode(time: Swift.Int64) -> Swift.String
  public static func dateConvertString(interval: Foundation.TimeInterval, dateFormat: Swift.String) -> Swift.String
  public static func getAspectRatioRawValue(for ratio: Swift.String) -> Swift.Int32
}
extension NvShortVideoCore.NvUtils {
  public enum NvCapturePermissions {
    case camera
    case microphone
    public static func == (a: NvShortVideoCore.NvUtils.NvCapturePermissions, b: NvShortVideoCore.NvUtils.NvCapturePermissions) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func impactFeedback()
  public static func checkDeviceAuth(device: NvShortVideoCore.NvUtils.NvCapturePermissions, handle: @escaping (Swift.Bool) -> Swift.Void)
  public static func getSnapshotImage(forFilePath filePath: Swift.String, completeHandle: @escaping (_ image: UIKit.UIImage?) -> Swift.Void)
  @discardableResult
  public static func cacheSnapshotImage(_ image: UIKit.UIImage, dst: Foundation.URL) -> Swift.Bool
  public static func nv_requestSettings()
  public static func imageFromPHAsset(localIdentifier: Swift.String, completion: @escaping (UIKit.UIImage?) -> Swift.Void)
}
public protocol NvTemplatePlayerDelegate : AnyObject {
  func player(player: NvShortVideoCore.NvTemplatePlayer, currentTimeValue value: Swift.Double)
  func playerEOF(player: NvShortVideoCore.NvTemplatePlayer)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvTemplatePlayer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvTemplatePlayerDelegate)?
  @_Concurrency.MainActor(unsafe) public var urlPath: Foundation.URL? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func play()
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func seek(time: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NvPlayer : ObjectiveC.NSObject {
  @objc deinit
}
extension NvShortVideoCore.NvPlayer {
  public func play()
  public func pause()
  public func seek(time: Swift.Double)
}
public protocol NvKeyframeOperator : ObjectiveC.NSObjectProtocol {
  @discardableResult
  func isSupportKeyframe(_ keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  func getTransformModel(timelineTime: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  func setTransformModel(model: NvShortVideoCore.NvTransformModel, anchor: CoreFoundation.CGPoint, timelineTime: Swift.Int64, timeAdsorbScope: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  func setKeyframeBezierCurve(keyframeIdentify: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
}
public protocol NvUnionModel : Foundation.NSCopying, NvShortVideoCore.NvKeyframeOperator {
  var itemIndicate: Swift.String { get }
  var trackCompensateZValue: Swift.Int { get }
  @discardableResult
  func syncEntityData() -> Swift.Bool
  @discardableResult
  func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @discardableResult
  func entity() -> Swift.AnyObject?
  @discardableResult
  func getIndicate() -> Swift.String
  @discardableResult
  func getEntityInPoint() -> Swift.Int64
  @discardableResult
  func getEntityOutPoint() -> Swift.Int64
  @discardableResult
  func getEditInPoint() -> Swift.Int64
  func setEditInPoint(time: Swift.Int64)
  @discardableResult
  func getEditOutPoint() -> Swift.Int64
  func setEditOutPoint(time: Swift.Int64)
  @discardableResult
  func getEntityTrackIndex() -> Swift.Int
  @discardableResult
  func boundingRectangleVertices(timeline: NvStreamingSdkCore.NvsTimeline?, liveWindow: NvStreamingSdkCore.NvsLiveWindow, timelineTime: Swift.Int64, isTimelineVal: Swift.Bool) -> NvShortVideoCore.NvRect?
  func displayableTimeInterval(timeline: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  func tailorInPoint(timeline: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  func tailorOutPoint(timeline: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  @discardableResult
  func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  func resetTrackIndex(index: Swift.Int)
  func isValidity() -> Swift.Bool
  func copyLinkage(changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  @discardableResult
  func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  func isTmpModel() -> Swift.Bool
  func syncDataToEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class NvPointTool : ObjectiveC.NSObject {
  public class func pointArrayForValues(array: [Foundation.NSValue], liveWindow: NvStreamingSdkCore.NvsLiveWindow, isCanonical: Swift.Bool = true) -> NvShortVideoCore.NvRect
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvUnionModel {
  @discardableResult
  public func isSupportKeyframe(_: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_: Swift.Int64, keyframeIdentify _: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public func appendKeyframe(_: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func removeKeyframe(_: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func getTransformModel(timelineTime _: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  public func setTransformModel(model _: NvShortVideoCore.NvTransformModel, anchor _: CoreFoundation.CGPoint, timelineTime _: Swift.Int64, timeAdsorbScope _: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_: Swift.Int64, keyframeIdentify _: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_: Swift.Int64, keyframeIdentify _: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify _: Swift.String, keyframePos _: Swift.Int64, updateCurveInfo _: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo _: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public var trackCompensateZValue: Swift.Int {
    get
  }
  public func isValidity() -> Swift.Bool
  public func syncDataToEntity(timeline _: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func syncLinkageChangeToEntity(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction, model _: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  public func isTmpModel() -> Swift.Bool
}
public enum MeicamFxStringParamType : Swift.Int {
  case invalid
  case singleLine
  case multiLine
  case filePath
  case directoryPath
  case label
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MeicamFxParamType : Swift.String, Swift.Codable {
  case string
  case boolean
  case integer
  case float
  case exprVar
  case menu
  case arbData
  case color
  case position2D
  public static func paramType(string: Swift.String) -> NvShortVideoCore.MeicamFxParamType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MeicamFxCurveParam : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var curveType: Swift.Int
  public var curvePointPair: NvShortVideoCore.MeicamControlPointPair
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MeicamFxParam : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var key: Swift.String
  public var type: NvShortVideoCore.MeicamFxParamType
  public var value: Any?
  public var pos: Swift.Int64
  public var curveParam: NvShortVideoCore.MeicamFxCurveParam?
  @objc override required dynamic public init()
  public init(key: Swift.String, type: NvShortVideoCore.MeicamFxParamType, value: Any? = nil, pos: Swift.Int64 = -1)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadControlPoint(_ controlPoint: NvStreamingSdkCore.NvsControlPointPair)
  public func updateCurvePair(_ controlPoint: NvStreamingSdkCore.NvsControlPointPair)
  public func copyParam() -> NvShortVideoCore.MeicamFxParam
  public var curveType: Swift.Int {
    get
    set
  }
  public var curvePointPair: NvShortVideoCore.MeicamControlPointPair {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MeicamControlPointParamPair : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  @objc override required dynamic public init()
  public var leftParamControlPoint: NvShortVideoCore.MeicamPoint
  public var rightParamControlPoint: NvShortVideoCore.MeicamPoint
  public func copyModel() -> NvShortVideoCore.MeicamControlPointParamPair
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MeicamControlPointPair : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  @objc override required dynamic public init()
  public var backwardControlPoint: NvShortVideoCore.MeicamPoint
  public var forwardControlPoint: NvShortVideoCore.MeicamPoint
  public var controlPointParam: NvShortVideoCore.MeicamControlPointParamPair
  public func fromPair(_ pointPair: NvStreamingSdkCore.NvsControlPointPair?)
  public func toPair() -> NvStreamingSdkCore.NvsControlPointPair
  public func copyPair() -> NvShortVideoCore.MeicamControlPointPair
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum MeicamFxParamAttachmentType : Swift.String, Swift.Codable {
  case attachmentString
  case templateAttachmentString
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class MeicamFxAttachmentParam : NvShortVideoCore.NvCodable {
  public var key: Swift.String
  public var type: NvShortVideoCore.MeicamFxParamAttachmentType
  public var value: Swift.String
  required public init()
  public init(key: Swift.String, type: NvShortVideoCore.MeicamFxParamAttachmentType, value: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MeicamFxRegion : NvShortVideoCore.NvCodable {
  public var isRegional: Swift.Bool
  public var isIgnoreBackground: Swift.Bool
  public var isInverseRegion: Swift.Bool
  public var regionCoordinateSystemType: Swift.Int
  public var regionArray: [Swift.Float]
  required public init()
  public class func load(fx: NvStreamingSdkCore.NvsFx) -> NvShortVideoCore.MeicamFxRegion
  public func load(fx: NvStreamingSdkCore.NvsFx)
  public func built(fx: NvStreamingSdkCore.NvsFx?)
  public func copy() -> NvShortVideoCore.MeicamFxRegion
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension CoreFoundation.CGRect {
  public func leftTop() -> CoreFoundation.CGPoint
  public func leftBottom() -> CoreFoundation.CGPoint
  public func rightTop() -> CoreFoundation.CGPoint
  public func rightBottom() -> CoreFoundation.CGPoint
}
public struct NvRect {
  public var leftTop: CoreFoundation.CGPoint
  public var rightTop: CoreFoundation.CGPoint
  public var rightBottom: CoreFoundation.CGPoint
  public var leftBottom: CoreFoundation.CGPoint
  public init()
  public var center: CoreFoundation.CGPoint {
    get
  }
}
public enum NvEditAspectRatioMode : Swift.Int, Swift.Codable {
  case NvEditAspectRatioOriginal
  case NvEditAspectRatio9v18
  case NvEditAspectRatio9v16
  case NvEditAspectRatio8v9
  case NvEditAspectRatio3v4
  case NvEditAspectRatio1v1
  case NvEditAspectRatio4v3
  case NvEditAspectRatio9v8
  case NvEditAspectRatio16v9
  case NvEditAspectRatio18v9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class NvTemplateInterface : ObjectiveC.NSObject {
  @objc(useTemplate:) public class func useTemplate(projectId: Swift.String) -> UIKit.UIViewController
  @objc public class func setupLog()
  @objc override dynamic public init()
  @objc deinit
}
public struct NvEditMusicItem {
  public init(musicName: Swift.String, musicPath: Swift.String, inPoint: Swift.Int64, trimIn: Swift.Int64, trimOut: Swift.Int64, fileSourceType: NvShortVideoCore.NvFileSourceType, deleteWhenUnuse: Swift.Bool)
}
extension NvShortVideoCore.NvTimelineDataManager {
  @discardableResult
  final public func newProject(localFilePaths: [Swift.String], audios: [NvShortVideoCore.NvEditMusicItem] = [], configration: NvShortVideoCore.NvProEditConfig) -> Swift.Bool
  @discardableResult
  final public func newProject(phArray: [Photos.PHAsset], configration: NvShortVideoCore.NvProEditConfig) -> Swift.Bool
  final public func newProject(phArray: [Photos.PHAsset], configration: NvShortVideoCore.NvProEditConfig, callBack: @escaping ((Swift.Bool) -> Swift.Void))
  final public func openProject(projectId: Swift.String, configration: NvShortVideoCore.NvProEditConfig)
  final public func openProject(timelineModel: NvShortVideoCore.NvTimelineModel, configration: NvShortVideoCore.NvProEditConfig, installDefaultPackage: ((NvShortVideoCore.NvTimelineModel) -> Swift.Void)? = nil)
  final public func openProject(timelineModel: NvShortVideoCore.NvTimelineModel, cTimeline: NvStreamingSdkCore.NvsTimeline, configration: NvShortVideoCore.NvProEditConfig, inEditTemplate: Swift.Bool = false, installDefaultPackage: ((NvShortVideoCore.NvTimelineModel) -> Swift.Void)? = nil)
}
extension NvShortVideoCore.NvTimelineDataManager {
  final public func registerAsset(assets: [Photos.PHAsset], inMainTrack: Swift.Bool, callBack: @escaping (([(source: (any NvShortVideoCore.NvDraftSource)?, localIdentifier: Swift.String, errorCode: NvShortVideoCore.NvRequestFileError)]) -> Swift.Void))
  final public func prepareModelFromAsserts(assets: [Photos.PHAsset], inMainTrack: Swift.Bool, projectId: Swift.String, clipDurationLimit: Swift.Int64 = 0, context: NvStreamingSdkCore.NvsStreamingContext, callBack: @escaping (([NvShortVideoCore.NvVideoClipModel]) -> Swift.Void))
}
public enum NvBezierOperator {
  public static func stringToCurvePoints(curveStr: Swift.String?) -> [[CoreFoundation.CGFloat]]
  public static func curvePointsToString(_ points: [[CoreFoundation.CGFloat]]) -> Swift.String
  public static func StringToCGFloat(_ str: Swift.String) -> CoreFoundation.CGFloat
  public static func CGFloatToString(_ number: CoreFoundation.CGFloat, afterPoint: Swift.Int) -> Swift.String
  public static func rounding(_ number: CoreFoundation.CGFloat, afterPoint: Swift.Int) -> Swift.String
  public static func fetchDefaultCurvePoints(for curveId: Swift.String, duration: Swift.Int64) -> [CoreFoundation.CGPoint]
  public static func convertToCurvePoints(_ pointArray: [CoreFoundation.CGPoint]) -> [CoreFoundation.CGPoint]
  public static func bezierPointsConvertToString(_ points: [CoreFoundation.CGPoint]) -> Swift.String
  public static func floatToInt(val: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public static func calcBezierPointY(chartX: CoreFoundation.CGFloat, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, control: (p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint)) -> CoreFoundation.CGFloat
}
open class NvCommandImpact {
  public enum TrackFxType : Swift.String {
    case transition
    case mute
    case rate
    case `undef`
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ImpactType : Swift.Int {
    case multiple
    case single
    case `undef`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var impactType: NvShortVideoCore.NvCommandImpact.ImpactType {
    get
  }
  public var dataMode: NvShortVideoCore.NvEditModeChangedAction {
    get
  }
  public var durationChanged: Swift.Bool {
    get
  }
  public var actionTarget: (any NvShortVideoCore.NvUnionModel)? {
    get
  }
  public var needRefreshTrack: Swift.Bool {
    get
  }
  public var originTrackIndex: Swift.Int
  public var trackFxType: NvShortVideoCore.NvCommandImpact.TrackFxType
  public init()
  public init(dataMode: NvShortVideoCore.NvEditModeChangedAction, impactType: NvShortVideoCore.NvCommandImpact.ImpactType = .single, actionTarget: (any NvShortVideoCore.NvUnionModel)?, durationChanged: Swift.Bool = false, needRefreshTrack: Swift.Bool = true)
  @objc deinit
}
open class NvTransitionCommand : NvShortVideoCore.NvCommand {
  public var clipInPoint: Swift.Int64
  public var transition: NvStreamingSdkCore.NvsVideoTransition?
  public init(editTransitionIndex: Swift.UInt32, track: NvStreamingSdkCore.NvsVideoTrack)
  public func applyAll()
  public func update(transitionType: NvShortVideoCore.NvVideoTransitionType = .builtin, desc: Swift.String)
  override public func commit() -> Swift.Bool
  @objc deinit
}
open class NvMuteCommand : NvShortVideoCore.NvCommand {
  public init()
  @objc deinit
}
public protocol NvSingleTrackViewDelegate : ObjectiveC.NSObjectProtocol {
  func trackViewDidTapItem(_ item: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  func trackViewRangeSelectViewDragEditBegin(_ item: any NvShortVideoCore.NvUnionModel)
  func trackViewRangeSelectViewDragEditChanged(time: Swift.Int64, isLeft: Swift.Bool, item: any NvShortVideoCore.NvUnionModel)
  func trackViewRangeSelectViewDragEditEnd(_ item: any NvShortVideoCore.NvUnionModel)
  func trackViewRangeSelectViewTimeDragChanged(time: Swift.Int64)
  func trackViewRangeSelectViewTimeDragEnd(time: Swift.Int64)
}
public protocol NvSingleTrackViewDataSource : ObjectiveC.NSObjectProtocol {
  func trackClips() -> [any NvShortVideoCore.NvUnionModel]
  func bgColorForItem(_ item: any NvShortVideoCore.NvUnionModel) -> UIKit.UIColor
  func selectedItemIdentifier() -> Swift.String?
  func isDragEnabled() -> Swift.Bool
  func isTapEnabled() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NvSingleTrackView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var dataSource: (any NvShortVideoCore.NvSingleTrackViewDataSource)?
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvSingleTrackViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let timeTagView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var clipBorderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var clipBorderWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var handleMinimumDistance: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let leftHandleView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let rightHandleView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let squenceView: NvStreamingSdkCore.NvsMultiThumbnailSequenceView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func updateCenterTime(_ centerTime: Swift.Int64, animation: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func configViewData(timelineDuration: Swift.Int64, thumbnailAspectRatio: CoreFoundation.CGFloat, descs: [NvStreamingSdkCore.NvsThumbnailSequenceDesc])
  @objc @_Concurrency.MainActor(unsafe) public func startEditItem()
  @objc @_Concurrency.MainActor(unsafe) public func deselect()
  @objc @_Concurrency.MainActor(unsafe) public func reload()
  @objc deinit
}
public protocol NvTrackViewModelProtocol : UIKit.UICollectionViewDataSource {
  func loadTimelineData()
  func moveEndClipAvailable(clipView: NvShortVideoCore.NvTrackClipEditView, trackIndex: Swift.Int)
  func updateCenterTime(time: Swift.Int64)
  func updateBlankTracks(tracks: Swift.Int)
  var unionModelArray: [any NvShortVideoCore.NvUnionModel] { get }
  var displayState: (displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?) { get set }
  func seletedItemChanged(actionSender: ObjectiveC.NSObject, seleteEvent: NvShortVideoCore.NvSeleteClipEvent, actionTarget: (any NvShortVideoCore.NvUnionModel)?, targetTypeChanged: Swift.Bool, displayState: (displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?))
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvTrackListView : NvShortVideoCore.NvVideoTrackPreviewContentView, NvShortVideoCore.NvStayStepperDelegate {
  @_Concurrency.MainActor(unsafe) final public var commandManager: NvShortVideoCore.NvCommandManager!
  @_Concurrency.MainActor(unsafe) override final public func updateFrame(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) override final public func receiveEvent(event: NvShortVideoCore.NvEvent, action _: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) final public func stayStepperWork(stepper _: NvShortVideoCore.NvStayStepper, timeChange: Swift.Int64)
  @_Concurrency.MainActor(unsafe) final public func updateCellAppendVisiableBound(centerTime: Swift.Int64, length: CoreFoundation.CGFloat)
  @objc deinit
}
extension NvShortVideoCore.NvTrackListView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension NvShortVideoCore.NvTrackListView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension NvShortVideoCore.NvTrackListView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt _: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension NvShortVideoCore.NvTrackListView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func clipSizeWithCrop() -> CoreFoundation.CGSize
  public func currentCropperModel() -> NvShortVideoCore.NvCropperModel?
  public func setCropper(model: NvShortVideoCore.NvCropperModel, checkInit: Swift.Bool = true, timeline: NvStreamingSdkCore.NvsTimeline)
  public func setScaleTransform(scale: CoreFoundation.CGFloat)
  public func setCropperTransform(model: NvShortVideoCore.NvCropperModel)
  public func setTransform(model: NvShortVideoCore.NvTransformModel, assetSize: CoreFoundation.CGSize, refSize: NvStreamingSdkCore.NvsSize)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NvCropperModel : NvShortVideoCore.NvTransformModel {
  final public var cropperRatio: NvShortVideoCore.NvEditAspectRatioMode
  final public var cropperAssetAspectRatio: Swift.Float
  final public var regionPointArray: [NvShortVideoCore.MeicamPoint]
  @objc required dynamic public init()
  public init(assetAspectRatio: Swift.Float)
  override final public func copy() -> NvShortVideoCore.NvCropperModel
  final public func isInitial() -> Swift.Bool
  public static func fileCropperModel(videoSize: CoreFoundation.CGSize, cropperFx: NvStreamingSdkCore.NvsFx, transFx: NvStreamingSdkCore.NvsFx, model: NvShortVideoCore.NvCropperModel)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NvTemplateEditClipTailorView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public func loadTheme(theme: NvShortVideoCore.NvTemplateEditClipSectionTheme)
  @objc deinit
}
extension NvShortVideoCore.NvsKeyframe {
  public enum Sticker : Swift.String, Swift.CaseIterable {
    case scaleXY
    case rotateZ
    case transX
    case transY
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.Sticker]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.Sticker] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Caption : Swift.String, Swift.CaseIterable {
    case scaleX
    case scaleY
    case rotateZ
    case transX
    case transY
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.Caption]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.Caption] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ComCaption : Swift.String, Swift.CaseIterable {
    case scaleX
    case scaleY
    case rotateZ
    case transX
    case transY
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.ComCaption]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.ComCaption] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension NvShortVideoCore.NvsKeyframe {
  @discardableResult
  public static func queryTimelineFxTransform(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, timelinePos: Swift.Int64, inPoint: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (isExisted: Swift.Bool, pos: Swift.Int64, transform: NvShortVideoCore.NvTransformModel)
  @discardableResult
  public static func queryTimelineFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicates: [NvShortVideoCore.MeicamFxParam] = []) -> [Swift.String : [NvShortVideoCore.MeicamFxParam]]
}
extension NvShortVideoCore.NvsKeyframe {
  public static func appendTimelineFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam], anchor: CoreFoundation.CGPoint, isAuto: Swift.Bool)
  public static func updateTimelineFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam], anchor: CoreFoundation.CGPoint)
  public static func recoverTimelineFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]])
  public static func removeTimelineFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam])
  public static func removeTimelineFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicates: [Swift.String] = [])
  public static func updateTimelineFxTrackKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]], isTrimLeft: Swift.Bool, inPoint: Swift.Int64, outPoint: Swift.Int64, timeDelta: Swift.Int64)
}
extension NvShortVideoCore.NvsKeyframe {
  public static func updateTimelineFxKeyframeCurve(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, curveType: Swift.Int, keyframePos: Swift.Int64, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint, predicate: NvShortVideoCore.MeicamFxParam? = nil)
}
public typealias InstallStatus = (Swift.String, NvStreamingSdkCore.NvsAssetPackageManagerError) -> Swift.Void
public enum NvAssetPackageType : Swift.UInt32 {
  case videoFx
  case videoTransition
  case captionStyle
  case animatedSticker
  case theme
  case captureScene
  case arscene
  case compoundCaption
  case captionContext
  case captionRenderer
  case captionAnimation
  case captionInAnimation
  case captionOutAnimation
  case template
  case avatarModel
  case avatarMaterial
  case animatedStickerAnimation
  case animatedStickerInAnimation
  case animatedStickerOutAnimation
  case makeup
  case faceMesh
  case warp
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class NvAssetInstall : ObjectiveC.NSObject, NvStreamingSdkCore.NvsAssetPackageManagerDelegate {
  public static func syncInstallPackage(packagePath: Swift.String, license: Swift.String, assetType: NvShortVideoCore.NvAssetPackageType, installComplete: @escaping (Swift.String, Swift.Bool) -> Swift.Void)
  public static func asyncInstallPackage(packagePath: Swift.String, license: Swift.String, assetType: NvShortVideoCore.NvAssetPackageType, installComplete: @escaping (Swift.String, NvStreamingSdkCore.NvsAssetPackageManagerError) -> Swift.Void)
  @objc final public func didFinishAssetPackageInstallation(_ assetPackageId: Swift.String!, filePath _: Swift.String!, type _: NvStreamingSdkCore.NvsAssetPackageType, error: NvStreamingSdkCore.NvsAssetPackageManagerError)
  public static func packageType(pathExtension: Swift.String) -> NvStreamingSdkCore.NvsAssetPackageType
  @objc override dynamic public init()
  @objc deinit
}
extension NvStreamingSdkCore.NvsThumbnailSequenceDesc {
  public class func descIsEqual(original: NvStreamingSdkCore.NvsThumbnailSequenceDesc, target: NvStreamingSdkCore.NvsThumbnailSequenceDesc) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvRefreshHeader : NvShortVideoCore.NvRefreshComponent {
  @objc @_Concurrency.MainActor(unsafe) open var spacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeKey: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedTime: Foundation.Date {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var ignoredScrollViewContentInsetTop: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override open func configScrollViewBounce(_ newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func placeSubviews()
  @_Concurrency.MainActor(unsafe) override open func updateRefreshState(for lastState: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override open func scrollViewContentOffsetDidChanged(change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvEditButton : UIKit.UIButton {
  public enum ImageStyle {
    case left, right, top, bottom, back
    public static func == (a: NvShortVideoCore.NvEditButton.ImageStyle, b: NvShortVideoCore.NvEditButton.ImageStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum IndicatorStyle {
    case fixed, dynamic, overall
    public static func == (a: NvShortVideoCore.NvEditButton.IndicatorStyle, b: NvShortVideoCore.NvEditButton.IndicatorStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var space: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var indicatorColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indicatorHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func nv_resetLayout(style: NvShortVideoCore.NvEditButton.ImageStyle, space: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.NvEditButton.ImageStyle, space: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, indicator: NvShortVideoCore.NvEditButton.IndicatorStyle, fixed: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitle(_ title: Swift.String?, for state: UIKit.UIControl.State)
  @objc deinit
}
public enum NvAudioType : Swift.Int, Swift.Codable {
  case audio
  case record
  case extraction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvAudioClipModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var audioClip: NvStreamingSdkCore.NvsAudioClip?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var clipIndex: Swift.Int
  public var fileName: Swift.String
  public var musicId: Swift.String
  public var resourceId: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var trimIn: Swift.Int64
  public var trimOut: Swift.Int64
  public var duration: Swift.Int64
  public var audioType: NvShortVideoCore.NvAudioType
  public var bultinAudioFxName: Swift.String
  public var speed: Swift.Double
  public var keepAudioPitch: Swift.Bool
  public var leftVolumeGain: Swift.Float
  public var rightVolumeGain: Swift.Float
  public var fadeInDuration: Swift.Int64
  public var fadeOutDuration: Swift.Int64
  public var sampleData: Foundation.NSMutableData?
  public var mBitsPerChannel: Swift.UInt32
  public var maxSampleValue: Foundation.NSNumber
  public var netInfo: NvShortVideoCore.NvSourceM3u8Info?
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadAudioClip(audioClip: NvStreamingSdkCore.NvsAudioClip)
  public func buildAudioClipEffect(audioClip: NvStreamingSdkCore.NvsAudioClip)
  @objc deinit
}
extension NvShortVideoCore.NvAudioClipModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline _: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow _: NvStreamingSdkCore.NvsLiveWindow, timelineTime _: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline _: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline _: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index _: Swift.Int)
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func isValidity() -> Swift.Bool
}
extension NvShortVideoCore.NvAudioClipModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvMaskRectView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var commandManager: NvShortVideoCore.NvCommandManager!
  @_Concurrency.MainActor(unsafe) final public var propertyTransModel: NvShortVideoCore.NvTransformModel?
  @_Concurrency.MainActor(unsafe) final public func loadMaskModel(videoClipModel: NvShortVideoCore.NvVideoClipModel, videoClip: NvStreamingSdkCore.NvsVideoClip, timelineResolution: NvStreamingSdkCore.NvsVideoResolution, assetResolution: CoreFoundation.CGSize, transformModel: NvShortVideoCore.NvTransformModel?)
  @_Concurrency.MainActor(unsafe) final public func refreshMaskLinePreview(time _: Swift.Int64)
  @objc deinit
}
extension NvShortVideoCore.NvMaskRectView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class MeicamMultiShots : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
public class MeicamMaskRegionInfo : NvShortVideoCore.NvCodable {
  public var regionInfoArray: [NvShortVideoCore.MeicamMaskSubRegionInfo]
  required public init()
  public init(regionInfo: NvStreamingSdkCore.NvsMaskRegionInfo)
  public func regionInfo() -> NvStreamingSdkCore.NvsMaskRegionInfo
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MeicamMaskSubRegionInfo : NvShortVideoCore.NvCodable {
  required public init()
  public var type: Swift.Int
  public var points: [NvShortVideoCore.MeicamPoint]
  public var ellipse2d: NvShortVideoCore.MeicamMaskEllipse2D
  public var mirror: NvShortVideoCore.MeicamMaskMirror
  public var transform2d: NvShortVideoCore.MeicamMaskTransform2D
  public init(subRegionInfo: NvStreamingSdkCore.NvsMaskSubRegionInfo)
  public func subRegionInfo() -> NvStreamingSdkCore.NvsMaskSubRegionInfo
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct MeicamMaskEllipse2D : NvShortVideoCore.NvCodable {
  public init()
  public var center: NvShortVideoCore.MeicamPoint
  public var a: Swift.Float
  public var b: Swift.Float
  public var theta: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MeicamMaskMirror : NvShortVideoCore.NvCodable {
  public init()
  public var center: NvShortVideoCore.MeicamPoint
  public var distance: Swift.Float
  public var theta: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MeicamMaskTransform2D : NvShortVideoCore.NvCodable {
  public init()
  public var anchor: NvShortVideoCore.MeicamPoint
  public var scale: NvShortVideoCore.MeicamPoint
  public var translation: NvShortVideoCore.MeicamPoint
  public var rotation: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public let VideoClipAnimationTypeTag: Swift.String
public enum NvClipAnimationType : Swift.Int, Swift.Codable {
  case none
  case enter
  case out
  case combination
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func animationModel() -> NvShortVideoCore.NvAnimationModel
  public func updateAnimation(model: NvShortVideoCore.NvAnimationModel)
  public func clipDurationChangeUpdataAnimation(duration: Swift.Int64, isTrimIn: Swift.Bool, isChangeSpeed: Swift.Bool = false, originDuration: Swift.Int64 = 0)
}
@objc @_inheritsConvenienceInitializers final public class NvAnimationModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  final public var animationType: NvShortVideoCore.NvClipAnimationType
  final public var inAnimationPackageId: Swift.String
  final public var inAnimationDuration: Swift.Int64
  final public var isInPostPackage: Swift.Bool
  final public var outAnimationPackageId: Swift.String
  final public var outAnimationDuration: Swift.Int64
  final public var isOutPostPackage: Swift.Bool
  final public var comAnimationPackageId: Swift.String
  final public var comAnimationDuration: Swift.Int64
  final public var isComPostPackage: Swift.Bool
  @objc override required dynamic public init()
  @objc override final public func copy() -> Any
  final public class func prepareVideoClipAnimationModel(videoClip: NvStreamingSdkCore.NvsVideoClip) -> NvShortVideoCore.NvAnimationModel?
  final public func updateCombinationState()
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvEventView : UIKit.UIView {
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func registerEvents(events: [NvShortVideoCore.NvEvent])
  @_Concurrency.MainActor(unsafe) open func remoteEvents()
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?)
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) open func receiveEvent(event _: NvShortVideoCore.NvEvent, action _: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender _: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum NvFaceBeautyType : Swift.String, Swift.CaseIterable {
  case strength
  case whitening
  case reddening
  public static var fxName: Swift.String {
    get
  }
  public var parameter: Swift.String {
    get
  }
  public static func intensityRange() -> (minVal: Swift.Float, maxVal: Swift.Float)
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvFaceBeautyType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvFaceBeautyType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvFaceShapeType : Swift.String, Swift.CaseIterable {
  case faceDegree
  case eyeDegree
  case chinDegree
  case foreheadDegree
  case noseDegree
  case mouthDegree
  public static var fxName: (warp: Swift.String, facemesh: Swift.String) {
    get
  }
  public var parameter: Swift.String {
    get
  }
  public var fxInfo: (shapeId: Swift.String, packageId: Swift.String) {
    get
  }
  public static func intensityRange() -> (minVal: Swift.Float, maxVal: Swift.Float)
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvFaceShapeType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvFaceShapeType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func getFaceProsp() -> Swift.String
}
public enum NvRequestFileError : Swift.Int {
  case noError
  case requestAVAssetFail
  case copyVideoFail
  case createExportSessionFail
  case exportFail
  case unsupportedVideo
  case requestImageDataFail
  case copyImageFail
  case fetchAssetsFail
  case addSourceFail
  case getInfoFail
  case convertFail
  case registConvertFail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NvSourceManager {
  final public let sourceDir: Swift.String
  final public var resourceConfig: NvShortVideoCore.NvResourceConfig?
  final public class func shared() -> NvShortVideoCore.NvSourceManager
  final public class func destoryInstance()
  final public func set(configration: NvShortVideoCore.NvProEditConfig?)
  final public func register<M>(modelClass target: M.Type, operation sqlite: any NvShortVideoCore.NvSqliteOpertation) where M : NvShortVideoCore.NvDraftSource
  @objc deinit
}
extension NvShortVideoCore.NvSourceManager {
  final public func registerSources(phAssets: [Photos.PHAsset], projectId: Swift.String, resourceConfig: NvShortVideoCore.NvResourceConfig? = nil, context: NvStreamingSdkCore.NvsStreamingContext, extractAudio: Swift.Bool = false, completion: @escaping (([(source: (any NvShortVideoCore.NvDraftSource)?, localIdentifier: Swift.String, errorCode: NvShortVideoCore.NvRequestFileError)]) -> Swift.Void))
  @discardableResult
  final public func registerSource(phAsset: Photos.PHAsset, projectId: Swift.String, context: NvStreamingSdkCore.NvsStreamingContext) -> (any NvShortVideoCore.NvDraftSource)?
  @discardableResult
  final public func registerSource(localPath: Swift.String, uploadInfo: NvShortVideoCore.NvSourceUploadInfo? = nil, projectId: Swift.String, fileSourceType: NvShortVideoCore.NvFileSourceType, context: NvStreamingSdkCore.NvsStreamingContext, deleteWhenUnuse: Swift.Bool = true) -> (any NvShortVideoCore.NvDraftSource)?
  @discardableResult
  final public func registerSource(persistentID: Swift.UInt64, projectId: Swift.String) -> (any NvShortVideoCore.NvDraftSource)?
  final public func copyReference(originProjectId: Swift.String, nProjectId: Swift.String)
  final public func updateSourceFileInfo(source: any NvShortVideoCore.NvDraftSource, context: NvStreamingSdkCore.NvsStreamingContext)
  final public func downloadedFileSet() -> [Swift.String : (source: any NvShortVideoCore.NvDraftSource, fileInfo: NvShortVideoCore.NvSourceFileInfo, type: NvShortVideoCore.NvSourceRelatedFileType)]
  final public func appendProjectReferences(sources: [any NvShortVideoCore.NvDraftSource], projectId: Swift.String)
  final public func downloadDir() -> Swift.String
}
extension NvShortVideoCore.NvSourceManager {
  @discardableResult
  final public func addSourceFile(resourceId: Swift.String, path: Swift.String, mediaType: NvShortVideoCore.MeicamMediaType, projectId: Swift.String, deleteWhenUnuse: Swift.Bool) -> (any NvShortVideoCore.NvDraftSource)?
  @discardableResult
  final public func addSourceFile(resourceId: Swift.String, path: Swift.String, fileSourceType: NvShortVideoCore.NvFileSourceType, mediaType: NvShortVideoCore.MeicamMediaType = .video, projectId: Swift.String, deleteWhenUnuse: Swift.Bool) -> (any NvShortVideoCore.NvDraftSource)?
  @discardableResult
  final public func querySource(projectId: Swift.String) -> [Swift.String : any NvShortVideoCore.NvDraftSource]
  @discardableResult
  final public func querySource(resourceId: Swift.String) -> (any NvShortVideoCore.NvDraftSource)?
  final public func refreshRelatedSources(projectResourceIds: [Swift.String], projectId: Swift.String) -> Swift.Float
  @discardableResult
  final public func addSourceRelatedFile(type: NvShortVideoCore.NvSourceRelatedFileType, path: Swift.String, resourceId: Swift.String, context: NvStreamingSdkCore.NvsStreamingContext) -> Swift.Bool
  @discardableResult
  final public func addSourceRelatedFile(type: NvShortVideoCore.NvSourceRelatedFileType, fileInfo: NvShortVideoCore.NvSourceFileInfo, resourceId: Swift.String) -> Swift.Bool
  @discardableResult
  final public func addSourceRemoteFile(resourceId: Swift.String, relatedFileInfos: [NvShortVideoCore.NvSourceRelatedFileType : NvShortVideoCore.NvSourceUploadInfo]) -> Swift.Bool
  final public func removeSources(projectId: Swift.String)
  final public func removeSources(resourceId: Swift.String, projectId: Swift.String)
  final public func removeUnuseSources()
  final public func cleanProjectFiles(projects: [Swift.String])
}
public enum NvAspectRatio : Swift.Int {
  case NvAspectRatio_Origin
  case NvAspectRatio_16v9
  case NvAspectRatio_1v1
  case NvAspectRatio_9v16
  case NvAspectRatio_4v3
  case NvAspectRatio_3v4
  case NvAspectRatio_18v9
  case NvAspectRatio_9v18
  case NvAspectRatio_All
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvAsset {
  public enum Fileter : Swift.Int {
    case Background
    case Color
    case Effect
    case Animation
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Caption : Swift.Int {
    case Normal
    case Modular
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Sticker : Swift.Int {
    case All
    case Normal
    case Voice
    case Animation
    case Custom
    case Special
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ARScene : Swift.Int {
    case Two
    case Three
    case Segmentation
    case Prospects
    case Particle
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Transition : Swift.Int {
    case Two
    case Three
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Template : Swift.Int {
    case All
    case Standard
    case Theme
    case AE
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class MeicamFastBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamGaussianBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamDirBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamZoomBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamSpiralBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamParticleBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamBoxBlur : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
extension NvShortVideoCore.NvAnimationModel {
  final public func updateFxParam(clipDuration: Swift.Int64) -> NvShortVideoCore.NvFxUpdateItem
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvBaseTemplateViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var enableSwipeBack: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var backImageName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func popEvent()
  @_Concurrency.MainActor(unsafe) public var leftItem: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NvShortVideoCore.NvBaseTemplateViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public class PageStyle {
  public var titleViewHeight: CoreFoundation.CGFloat
  public var titleColor: UIKit.UIColor
  public var titleSelectedColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleSelectedFont: UIKit.UIFont
  public var titleViewBackgroundColor: UIKit.UIColor
  public var titleMargin: CoreFoundation.CGFloat
  public var titleViewColor: UIKit.UIColor
  public var titleViewSelectedColor: UIKit.UIColor
  public var isTitleViewScrollEnabled: Swift.Bool
  public var isShowBottomLine: Swift.Bool
  public var bottomLineColor: UIKit.UIColor
  public var bottomLineHeight: CoreFoundation.CGFloat
  public var bottomLineWidth: CoreFoundation.CGFloat
  public var bottomLineRadius: CoreFoundation.CGFloat
  public var isTitleScaleEnabled: Swift.Bool
  public var titleMaximumScaleFactor: CoreFoundation.CGFloat
  public var isShowCoverView: Swift.Bool
  public var coverViewBackgroundColor: UIKit.UIColor
  public var coverViewAlpha: CoreFoundation.CGFloat
  public var coverMargin: CoreFoundation.CGFloat
  public var coverViewHeight: CoreFoundation.CGFloat
  public var coverViewRadius: CoreFoundation.CGFloat
  public var isShowTitleBackgroundView: Swift.Bool
  public var titleBackgroundViewRadius: CoreFoundation.CGFloat
  public var isContentScrollEnabled: Swift.Bool
  public var contentViewBackgroundColor: UIKit.UIColor
  public init()
  @objc deinit
}
public protocol NvVideoFxRectViewDelegate : AnyObject {
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, begin: CoreFoundation.CGPoint)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, closeButtonClick: UIKit.UIButton)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, scale: CoreFoundation.CGFloat)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, currentPoint: CoreFoundation.CGPoint, previousPoint: CoreFoundation.CGPoint)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, end: CoreFoundation.CGPoint)
  func videoFxRectView(videoFxRectView: NvShortVideoCore.NvVideoFxRectView, updata item: NvShortVideoCore.NvWaterMarkModel?)
}
public enum NvVideoFxStatus {
  case waterMark
  case videoFx
  public static func == (a: NvShortVideoCore.NvVideoFxStatus, b: NvShortVideoCore.NvVideoFxStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NvVideoFxRectView : NvShortVideoCore.NvEventView {
  @_Concurrency.MainActor(unsafe) final public var videoFxRectView: NvShortVideoCore.NvCloseRotationRectView!
  @_Concurrency.MainActor(unsafe) final public var imageView: UIKit.UIImageView!
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvVideoFxRectViewDelegate)?
  @_Concurrency.MainActor(unsafe) final public var rectViewStatus: NvShortVideoCore.NvVideoFxStatus
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func setPoints(rect: NvShortVideoCore.NvRect?)
  @_Concurrency.MainActor(unsafe) final public func getCenter() -> CoreFoundation.CGPoint
  @objc deinit
}
extension NvShortVideoCore.NvVideoFxRectView : NvShortVideoCore.NvRectViewDelegate {
  @_Concurrency.MainActor(unsafe) final public func panGestureShouldBegin(point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func containObjectForPoint(point _: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func containSameObjectForPoint(point _: CoreFoundation.CGPoint, otherPoint _: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func gestureRectViewPinchScale(scale _: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) final public func gestureRectViewRotation(rotation _: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, currentPoint: CoreFoundation.CGPoint, previousPoint: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, began: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, touchUpInside _: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, touchNone _: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, ended: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, isHidden _: Swift.Bool)
}
extension NvShortVideoCore.NvVideoFxRectView {
  @_Concurrency.MainActor(unsafe) @objc final public func rectViewRotationBtTouchEnd(rectView _: NvShortVideoCore.NvRectView)
  @_Concurrency.MainActor(unsafe) @objc final public func rectView(rectView _: NvShortVideoCore.NvRectView, rotate _: CoreFoundation.CGFloat, scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc final public func rectView(rectView _: NvShortVideoCore.NvRectView, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
}
extension NvShortVideoCore.NvVideoFxRectView {
  @_Concurrency.MainActor(unsafe) final public func rectView(rectView _: NvShortVideoCore.NvRectView, closeButton: UIKit.UIButton)
}
extension NvShortVideoCore.NvEditAspectRatioMode {
  public func toString() -> Swift.String
  public func toIndex() -> Swift.Int32
}
public enum NvEditorEnvs {
}
extension NvShortVideoCore.NvEditorEnvs {
  public static func moduleBundle() -> Foundation.Bundle?
  public static func moduleBundlePath() -> Swift.String?
  public static func faceshpeAssetPath() -> Swift.String
  public static func preInstallFaceShape()
  public static func createTimeline(editMode: NvShortVideoCore.NvEditAspectRatioMode, originAspectRatio: CoreFoundation.CGFloat, context: NvStreamingSdkCore.NvsStreamingContext, previewConfig: NvShortVideoCore.NvPreviewConfig, previewResolution: Swift.Int32? = nil, bitDepth: NvStreamingSdkCore.NvsVideoResolutionBitDepth = NvsVideoResolutionBitDepth_8Bit) -> NvStreamingSdkCore.NvsTimeline
  public static func copyTimelineWithSize(originTimeline: NvStreamingSdkCore.NvsTimeline, context: NvStreamingSdkCore.NvsStreamingContext) -> NvStreamingSdkCore.NvsTimeline
  public static func pointArrayForValues(array: [Foundation.NSValue], liveWindow: NvStreamingSdkCore.NvsLiveWindow, isCanonical: Swift.Bool = true) -> NvShortVideoCore.NvRect
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NvAlbumNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class NvAlbumTool : ObjectiveC.NSObject {
  public static func seleteAsset(type: NvShortVideoCore.NvSelectAssetType, mutableSelect: Swift.Bool, isSupport4K: Swift.Bool = true, isSupportHDR: Swift.Bool = false, minDuration: Swift.Int64 = 0, callBack: @escaping ((_ seleteAsset: [NvShortVideoCore.NvAlbumAsset]) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvAlbumTool : NvShortVideoCore.NvAlbumViewControllerDelegate {
  @objc final public func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, selectAlbum assets: [NvShortVideoCore.NvAlbumAsset])
  @objc final public func nvAlbumViewControllerCancelClick(controller _: NvShortVideoCore.NvAlbumViewController)
}
extension NvShortVideoCore.NvKeyframeCommand {
  public enum VideoFxType : Swift.Int {
    case transform
    case mask
    case opacity
    case custom
    case `undef`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension NvStreamingSdkCore.NvsVideoClip {
  public var curveSpeedModel: NvShortVideoCore.NvCurveSpeedModel {
    get
  }
  public func update(curveSpeedModel: NvShortVideoCore.NvCurveSpeedModel)
  public func removeCurveSpeeds(keepAudioPitch: Swift.Bool)
  public func updateCurveSpeeds(for model: NvShortVideoCore.NvCurveSpeedModel)
}
@objc @_inheritsConvenienceInitializers final public class NvCurveSpeedModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  final public var curveSpeeds: [Swift.String : [[Swift.Float]]]
  final public var curveSpeedsId: Swift.String
  final public var keepAudioPitch: Swift.Bool
  final public var speed: Swift.Double
  @objc override required dynamic public init()
  final public func getCurveSpeedName() -> Swift.String
  final public func getTemplateAttachment() -> (key: Swift.String, value: Swift.String?)
  final public func getCurveSpeedsId(by templateAttachment: Swift.String) -> Swift.String
  final public func copyModel() -> NvShortVideoCore.NvCurveSpeedModel
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum HandleTranslateState : Swift.Int {
  case success
  case minX
  case maxX
  case adsorb
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NvFileDownloadTask : ObjectiveC.NSObject {
  @discardableResult
  public class func downloadFile(url: Swift.String, targetFilePath: Swift.String, progressHandler: @escaping (_ progress: Swift.Float) -> Swift.Void, completeHandler: @escaping (_ isScussess: Swift.Bool) -> Swift.Void) -> NvShortVideoCore.NvFileDownloadTask
  @objc deinit
}
extension NvShortVideoCore.NvFileDownloadTask : Foundation.URLSessionDownloadDelegate {
  @objc dynamic public func urlSession(_: Foundation.URLSession, downloadTask _: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic public func urlSession(_: Foundation.URLSession, downloadTask _: Foundation.URLSessionDownloadTask, didWriteData _: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic public func urlSession(_: Foundation.URLSession, downloadTask _: Foundation.URLSessionDownloadTask, didResumeAtOffset _: Swift.Int64, expectedTotalBytes _: Swift.Int64)
}
@_inheritsConvenienceInitializers open class NvClipCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool
  public var editClipModel: NvShortVideoCore.NvVideoClipModel?
  @objc @_inheritsConvenienceInitializers public class NvClipUpdateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCommandUpdateInfo {
    public var itemIndicate: Swift.String
    public var trackIndex: Swift.Int
    public var updateItem: NvShortVideoCore.NvClipUpdateParam!
    public var backupItem: NvShortVideoCore.NvVideoClipModel?
    @objc override dynamic public init()
    @objc deinit
  }
  override open func commit() -> Swift.Bool
  public class func clipUpdateCommand(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel, updateItem: NvShortVideoCore.NvClipUpdateParam, needRefresh: Swift.Bool = true) -> NvShortVideoCore.NvClipCommand
  open class func findVideoClipInuseModel(itemIndicate: Swift.String, trackIndex: Swift.Int?, timelineModel: NvShortVideoCore.NvTimelineModel) -> NvShortVideoCore.NvVideoClipModel?
  override public init(title: Swift.String, inputParam: any NvShortVideoCore.NvCommandUpdateInfo, redoAction: ((any NvShortVideoCore.NvCommandUpdateInfo, NvStreamingSdkCore.NvsTimeline, NvShortVideoCore.NvTimelineModel, Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?))? = nil, undoAction: ((any NvShortVideoCore.NvCommandUpdateInfo, [Swift.String : Any]?, NvStreamingSdkCore.NvsTimeline, NvShortVideoCore.NvTimelineModel, Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?))? = nil)
  @objc deinit
}
extension NvStreamingSdkCore.NvsFxDescription {
  public func filteredParamsInfo() -> [[Swift.String : Any]]
  public func filteredParams() -> [NvShortVideoCore.MeicamParserParamItem]
  public func fileParamKey() -> [Swift.String]
}
public enum NvCropperOperator {
  public typealias NvRawCropperRegion = (regionSize: CoreFoundation.CGSize, leftTop: CoreFoundation.CGPoint, leftBottom: CoreFoundation.CGPoint, rightBottom: CoreFoundation.CGPoint, rightTop: CoreFoundation.CGPoint)
  public static func rawCropperRegion(assetSize: CoreFoundation.CGSize, cropperRatio: CoreFoundation.CGFloat) -> NvShortVideoCore.NvCropperOperator.NvRawCropperRegion
  public static func assetSizeInBox(boxSize: CoreFoundation.CGSize, assetAspectRatio: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension NvShortVideoCore.NvSourceManager {
  final public func copySourceFile(filePath: Swift.String?, localFileName: Swift.String = "") -> Swift.String?
  final public func copyImageData(imageData: Foundation.Data, localIdentifier: Swift.String, fileExtension: Swift.String) -> Swift.String?
  final public func requestAsset(phAsset: Photos.PHAsset, completion: @escaping ((_ filePath: Swift.String?, _ errorCode: NvShortVideoCore.NvRequestFileError) -> Swift.Void))
  final public func setupSourceInfo(file: NvShortVideoCore.NvSourceFileInfo, context: NvStreamingSdkCore.NvsStreamingContext) -> NvShortVideoCore.MeicamMediaType
  final public func saveAudioSampleData(resourceId: Swift.String, sampleData: Foundation.NSMutableData, mBitsPerChannel: Swift.UInt32, maxSampleValue: Foundation.NSNumber)
  final public func getCacheSampleData(resourceId: Swift.String) -> (sampleData: Foundation.NSMutableData?, mBitsPerChannel: Swift.UInt32, maxSampleValue: Foundation.NSNumber)
  final public func deleteCacheSampleData(resourceId: Swift.String)
}
extension NvStreamingSdkCore.NvsVideoClip {
  @discardableResult
  public func appendFilterFx(for newFx: NvStreamingSdkCore.NvsVideoClip.NvVideoClipFxInfo) -> NvStreamingSdkCore.NvsVideoFx?
  public func removeFilterFx()
  public func resetFilterIntensity(for value: Swift.Float)
  public func getFilterInfo() -> (pid: Swift.String, intensity: Swift.Float, isBuiltin: Swift.Bool)
  public func adjustFxData() -> NvShortVideoCore.NvAdjustColorModel
  public func applyAdjustFx(_ dataModel: NvShortVideoCore.NvAdjustColorModel)
  public func setAdjustFx(_ itemType: NvShortVideoCore.NvAdjustItemType, value: Swift.Double)
  public func getAdjustFxValue(_ itemType: NvShortVideoCore.NvAdjustItemType) -> Swift.Double
}
public enum NvAdjustItemType : Swift.String, Swift.CaseIterable {
  case Brightness
  case Contrast
  case Saturation
  case Highlight
  case Shadow
  case Temperature
  case Tint
  case Blackpoint
  case Degree
  case Amount
  public var fxName: Swift.String {
    get
  }
  public static func getAdjustFxParams(forFxName fxName: Swift.String) -> [NvShortVideoCore.NvAdjustItemType]
  public static var adjustFxNameAndTypeScope: [(fxName: Swift.String, itemArray: [NvShortVideoCore.NvAdjustItemType])] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvAdjustItemType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvAdjustItemType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NvAdjustColorModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var Amount: Swift.Double
  public var Blackpoint: Swift.Double
  public var Brightness: Swift.Double
  public var Contrast: Swift.Double
  public var Degree: Swift.Double
  public var Highlight: Swift.Double
  public var Saturation: Swift.Double
  public var Shadow: Swift.Double
  public var Temperature: Swift.Double
  public var Tint: Swift.Double
  @objc override required dynamic public init()
  public func getAdjustValue(forKey key: Swift.String) -> Any?
  public func setAdjustValue(_ value: Any?, forKey key: Swift.String)
  open func loadFx(adjust: [Swift.String : NvStreamingSdkCore.NvsFx])
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class NvClipAddParam : ObjectiveC.NSObject, NvShortVideoCore.NvCommandUpdateInfo {
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var insertTime: Swift.Int64
  public var clipTitle: Swift.String
  public var audioType: NvShortVideoCore.NvAudioType
  public var trimIn: Swift.Int64
  public var trimOut: Swift.Int64
  public var fileIdsDic: [Swift.String : Swift.String]
  public var updateItems: [NvShortVideoCore.NvFxUpdateItem]
  public init(fileIds: [Swift.String], trackIndex: Swift.Int, insertTime: Swift.Int64, updateItems: [NvShortVideoCore.NvFxUpdateItem])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvClipCopyParam : ObjectiveC.NSObject {
  final public let itemIndicate: Swift.String
  public var trackIndex: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvClipMoveParam : ObjectiveC.NSObject {
  public var trackIndex: Swift.Int
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvClipSplitParam : ObjectiveC.NSObject {
  final public let itemIndicate: Swift.String
  public var insertTime: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvClipVolumeParam : ObjectiveC.NSObject {
  public var volumeGain: Swift.Float
  public var fadeInDuration: Swift.Int64
  public var fadeOutDuration: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvClipReplaceParam : ObjectiveC.NSObject {
  public var resourceId: Swift.String
  public var trimIn: Swift.Int64
  public var ationType: NvShortVideoCore.NvCommand.ActionType
  public var fxUpdateItems: [NvShortVideoCore.NvFxUpdateItem]
  @objc override dynamic public init()
  @objc deinit
}
@objc open class NvClipUpdateParam : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class NvClipFreezeParam : ObjectiveC.NSObject {
    final public let itemIndicate: Swift.String
    final public let splitItemIndicate: Swift.String
    public var insertTime: Swift.Int64
    public var imageFileId: Swift.String
    public var clipDuration: Swift.Int64
    @objc override dynamic public init()
    @objc deinit
  }
  public var actionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType
  public var value: Any?
  public init(actionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, value: Any?)
  public enum VideoClipActionType : Swift.Int {
    case blend
    case reverse
    case keepAudioPitch
    case audiofx
    case volume
    case move
    case curveSpeed
    case add
    case delete
    case trimLeft
    case trimRight
    case moveTo
    case copy
    case split
    case freeze
    case changeRole
    case replace
    public func toKeyframeActionType() -> NvShortVideoCore.MeicamFx.KeyframeActionType
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvTimelineModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var projectId: Swift.String
  public var aspectRatioMode: NvShortVideoCore.NvEditAspectRatioMode
  public var originAspectRatio: Swift.Float
  public var isMute: Swift.Bool
  public var trackCompensateZValue: Swift.Int
  public var editMusicLoop: Swift.Bool
  public var coverInfo: NvShortVideoCore.NvCoverInfo?
  public var watermarkFx: NvShortVideoCore.NvTimelineFxModel?
  public var clipDataArray: [NvShortVideoCore.NvVideoClipModel]
  public var pipClipDataArray: [NvShortVideoCore.NvVideoClipModel]
  public var audioDataArray: [NvShortVideoCore.NvAudioClipModel]
  public var stickerDataArray: [NvShortVideoCore.NvStickerModel]
  public var captionDataArray: [NvShortVideoCore.NvCaptionModel]
  public var comCaptionDataArray: [NvShortVideoCore.NvComCaptionModel]
  public var transitionDataDic: [Swift.String : NvShortVideoCore.NvTransitionDataModel]
  public var effectDataArray: [NvShortVideoCore.NvEffectModel]
  public var filterDataArray: [NvShortVideoCore.NvFilterModel]
  public var adjustDataArray: [NvShortVideoCore.NvAdjustModel]
  public var pluginDataArray: [NvShortVideoCore.NvPluginModel]
  public var timelineFxArray: [NvShortVideoCore.MeicamFx]
  public var previewResolution: Swift.Int32
  public var timelineDuration: Swift.Int64
  public var imageWidth: Swift.UInt32
  public var imageHeight: Swift.UInt32
  public var sdkVersion: Swift.String
  public var videoFpsDen: Swift.Int32
  public var videoFpsNum: Swift.Int32
  public var isCloudProject: Swift.Bool
  @objc override required dynamic public init()
  public func loadTimeline(cTimeline: NvStreamingSdkCore.NvsTimeline)
  public func reloadTransitionData(cTimeline: NvStreamingSdkCore.NvsTimeline, minClipDuration: Swift.Int64)
  public func resetTransitionData(cTimeline: NvStreamingSdkCore.NvsTimeline)
  public func maxModelTime() -> Swift.Int64
  public func getProjectSize() -> Swift.Float
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NvShortVideoCore.NvTimelineModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers public class NvMaskOperator : ObjectiveC.NSObject {
  public class func textPath(center: CoreFoundation.CGPoint, maskSize: CoreFoundation.CGSize) -> UIKit.UIBezierPath
  public class func rectPath(center: CoreFoundation.CGPoint, maskSize: CoreFoundation.CGSize, cornerRadiusRate: CoreFoundation.CGFloat) -> UIKit.UIBezierPath
  public class func centerPointPath(point: CoreFoundation.CGPoint) -> UIKit.UIBezierPath
  public class func rectRegionInfo(center: CoreFoundation.CGPoint, maskSize: CoreFoundation.CGSize, cornerRadiusRate: CoreFoundation.CGFloat) -> NvShortVideoCore.NvMaskRegionInfo
  public class func circlePath(center: CoreFoundation.CGPoint, maskSize: CoreFoundation.CGSize, rotation: CoreFoundation.CGFloat) -> UIKit.UIBezierPath
  public class func circleRegionInfo(center _: CoreFoundation.CGPoint, maskSize: CoreFoundation.CGSize, assetSize: CoreFoundation.CGSize) -> NvShortVideoCore.NvMaskRegionInfo
  public class func heartRegionInfo(center: CoreFoundation.CGPoint, width: CoreFoundation.CGFloat) -> NvShortVideoCore.NvMaskRegionInfo
  public class func heartPath(center: CoreFoundation.CGPoint, width: CoreFoundation.CGFloat, rotation _: CoreFoundation.CGFloat) -> UIKit.UIBezierPath
  public class func starRegionInfo(center: CoreFoundation.CGPoint, width: CoreFoundation.CGFloat) -> NvShortVideoCore.NvMaskRegionInfo
  public class func startPath(center: CoreFoundation.CGPoint, width: CoreFoundation.CGFloat, rotation: CoreFoundation.CGFloat) -> UIKit.UIBezierPath
  public class func mirrorRegionInfo(center: CoreFoundation.CGPoint, aSize: CoreFoundation.CGSize) -> NvShortVideoCore.NvMaskRegionInfo
  public class func mirrorPath(center: CoreFoundation.CGPoint, aSize: CoreFoundation.CGSize, liveWindowSize _: CoreFoundation.CGSize, rotation: CoreFoundation.CGFloat, scale: CoreFoundation.CGFloat) -> UIKit.UIBezierPath
  public class func boxMaskSize(maskModel: NvShortVideoCore.NvMaskModel, liveWindowSize: CoreFoundation.CGSize, assetResolution: CoreFoundation.CGSize, assetSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public class func boxMaskSizeForInfo(maskModel: NvShortVideoCore.NvMaskModel, assetResolution: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public class func prepareDeleteMaskUpdateItem() -> NvShortVideoCore.NvFxUpdateItem
  public class func prepareMaskUpdateItem(maskModel: NvShortVideoCore.NvMaskModel, videoClip: NvStreamingSdkCore.NvsVideoClip, time: Swift.Int64, reset: Swift.Bool = false) -> NvShortVideoCore.NvFxUpdateItem?
  public class func prepareMaskRegionPoints(maskModel: NvShortVideoCore.NvMaskModel, assetResolution: CoreFoundation.CGSize)
  public class func videoBoundingVertices(transform: NvShortVideoCore.NvTransformModel, liveWindowFrame: CoreFoundation.CGRect, assetAspectRatio: CoreFoundation.CGFloat, timelineVideoRes: NvStreamingSdkCore.NvsVideoResolution, scanMode: Swift.Bool = false) -> NvShortVideoCore.NvRect
  public class func frameForTimeline(aspectRatioMode: NvShortVideoCore.NvEditAspectRatioMode, originAspectRatio: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
  public class func frameForLiveWindow() -> CoreFoundation.CGRect
  public class func defaultCaptionTransY(aspectRatioMode: NvShortVideoCore.NvEditAspectRatioMode, originAspectRatio: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public class func adjustAspectRatioModeChange(originTimelineSize: CoreFoundation.CGSize, afterTimelineSize: CoreFoundation.CGSize) -> (transXRate: CoreFoundation.CGFloat, transYRate: CoreFoundation.CGFloat, scaleRate: CoreFoundation.CGFloat)
  public class func adjustAspectRatioModeChange(originTimelineSize: CoreFoundation.CGSize, afterTimelineSize: CoreFoundation.CGSize, liveWindowSize: CoreFoundation.CGSize) -> (transXRate: CoreFoundation.CGFloat, transYRate: CoreFoundation.CGFloat, scaleRate: CoreFoundation.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class NvProjectManager : ObjectiveC.NSObject {
  @objc public static let projectInfoJson: Swift.String
  @objc public static let projectDataJson: Swift.String
  @objc final public class func projectPath() -> Swift.String
  @objc final public class func projectLocalPath(projectId: Swift.String) -> Swift.String
  @objc final public class func storeTimelineData(model: NvShortVideoCore.NvTimelineModel, sync: Swift.Bool = false, waitUntilFinished: Swift.Bool = false, callBack: @escaping ((Swift.Bool) -> Swift.Void))
  @objc final public class func storeCurrentProject(projectId: Swift.String, projectDescription: Swift.String) -> Swift.Bool
  @objc final public class func updateProjectInfoFile(projectId: Swift.String, duration: Swift.Int64, projectDescription: Swift.String? = nil, lastModifiedTime: Swift.String? = nil) -> NvShortVideoCore.NvProjectInfo
  @objc final public class func resetProjectInfoFile(infoModel: NvShortVideoCore.NvProjectInfo)
  @objc final public class func fetchTimelineModel(projectId: Swift.String, dir: Swift.String? = nil) -> NvShortVideoCore.NvTimelineModel?
  @objc final public class func readTimelineModel(jsonPath: Swift.String, projectId: Swift.String) -> NvShortVideoCore.NvTimelineModel?
  @objc final public class func fetchProjectInfo(projectId: Swift.String, dir: Swift.String? = nil) -> NvShortVideoCore.NvProjectInfo?
  @objc final public class func projectList() -> [NvShortVideoCore.NvProjectInfo]
  @objc final public class func cleanProjectFiles(projects: [Swift.String])
  @objc @discardableResult
  final public class func deleteProject(model: NvShortVideoCore.NvProjectInfo) -> Swift.Bool
  @objc final public class func delete(projectId: Swift.String) -> Swift.Bool
  @objc @discardableResult
  final public class func copyProject(projectId: Swift.String, targetDir: Swift.String? = nil) -> Swift.String?
  @objc @discardableResult
  final public class func updateCover(image: UIKit.UIImage, projectId: Swift.String) -> Swift.String?
  @objc final public class func projectCoverImagePath(projectId: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvAdjustColorModel {
  public func updateFxParam(fxGroup: Swift.String, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .raw) -> [NvShortVideoCore.NvFxUpdateItem]
}
public enum NvAppEnvs {
}
extension NvShortVideoCore.NvAppEnvs {
  public static func rgbColor(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  public static func hexColor(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor?
}
public let videoClipFxTypeTag: Swift.String
public let videoClipFxIndicateTag: Swift.String
public enum NvVideoClipPropertyFxType : Swift.String, Swift.CaseIterable {
  case transform
  case opacity
  public var builtinName: Swift.String {
    get
  }
  public var keyframeParams: [Swift.String] {
    get
  }
  public var identify: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvVideoClipPropertyFxType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvVideoClipPropertyFxType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NvVideoClipFxType : Swift.String, Swift.CaseIterable {
  case none
  case faceEffect
  case matting
  case segmentation
  case segmentationBackground
  case colorMatting
  case filter
  case adjust
  case plugin
  case actionEffect
  case mask
  case cropperMask
  case cropperTrans
  case cropperTransScale
  case property
  public var builtinName: Swift.String {
    get
  }
  public var keyframeParams: [Swift.String] {
    get
  }
  public var identify: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvVideoClipFxType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvVideoClipFxType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NvStreamingSdkCore.NvsFx {
  public var videoClipFxType: NvShortVideoCore.NvVideoClipFxType {
    get
  }
}
extension NvShortVideoCore.MeicamFx {
  public var videoClipFxType: NvShortVideoCore.NvVideoClipFxType {
    get
  }
}
extension NvStreamingSdkCore.NvsVideoClip {
  public typealias NvVideoClipFxInfo = (isBuiltin: Swift.Bool, fx: Swift.String)
  public typealias NvVideoClipFxTrimInfo = (inPoint: Swift.Int64, outPoint: Swift.Int64)
  @discardableResult
  public func isRawFx(type: NvShortVideoCore.NvVideoClipFxType) -> Swift.Bool
  @discardableResult
  public func appendFx(type: NvShortVideoCore.NvVideoClipFxType, fxInfo: NvStreamingSdkCore.NvsVideoClip.NvVideoClipFxInfo = (true, ""), itemIndicate: Swift.String? = nil, trim: NvStreamingSdkCore.NvsVideoClip.NvVideoClipFxTrimInfo? = nil) -> NvStreamingSdkCore.NvsVideoFx?
  @discardableResult
  public func removeFx(type: NvShortVideoCore.NvVideoClipFxType, itemIndicate: Swift.String? = nil) -> Swift.Bool
  @discardableResult
  public func queryFxInfo(for type: NvShortVideoCore.NvVideoClipFxType, itemIndicate: Swift.String? = nil) -> (fx: NvStreamingSdkCore.NvsVideoFx?, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType)
  @discardableResult
  public func queryFx(for type: NvShortVideoCore.NvVideoClipFxType, itemIndicate: Swift.String? = nil) -> NvStreamingSdkCore.NvsVideoFx?
  @discardableResult
  public func findFxIndex(type: NvShortVideoCore.NvVideoClipFxType, isRawFx: Swift.Bool) -> Swift.UInt32
  @discardableResult
  public class func queryFxType(builtinName: Swift.String) -> NvShortVideoCore.NvVideoClipFxType
}
public enum NvTemplateAspectRatioMode : Swift.Int {
  case original
  case ratio9v16
  case ratio3v4
  case ratio1v1
  case ratio4v3
  case ratio16v9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvTemplateSdkUtils {
  public static var streamingContext: NvStreamingSdkCore.NvsStreamingContext {
    get
  }
  public static func playback(timeine: NvStreamingSdkCore.NvsTimeline, startTime: Swift.Int64, endTime: Swift.Int64)
  @discardableResult
  public static func seek(timeine: NvStreamingSdkCore.NvsTimeline, positon: Swift.Int64) -> Swift.Bool
  @discardableResult
  public static func calculateTimelineSize(editMode: NvShortVideoCore.NvTemplateAspectRatioMode, originAspectRatio: Swift.Float, previewResolution: Swift.Int32) -> CoreFoundation.CGSize
  public static func findNearbyAspectRatio(aspectRatio: Swift.Float) -> NvShortVideoCore.NvTemplateAspectRatioMode
  public static func createdTimelineSize(aspectRatio: Swift.UInt32, preset: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func crossBoxSize(size: CoreFoundation.CGSize, crossRate: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func liteBoxSize(boxSize: CoreFoundation.CGSize, assetAspectRatio: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func getAspectRatioRawValue(for ratio: Swift.String) -> Swift.Int32
  public static func getTemplateAspectRatioMode(for ratio: Swift.Int) -> NvShortVideoCore.NvTemplateAspectRatioMode
}
public enum NvSdkUtils {
  public static var streamingContext: NvStreamingSdkCore.NvsStreamingContext {
    get
  }
  @discardableResult
  public static func configSdkModule(meisheSDKLicFilePath: Swift.String, fakefacePath: Swift.String?, senseARModelPath: Swift.String?, segModelFilePath: Swift.String?, avatarModelFilePath: Swift.String? = nil, handModelFilePath: Swift.String? = nil) -> Swift.Bool
  public static func sdkVersion() -> Swift.String
  public static func hasARModule() -> Swift.Bool
  public static func playback(timeine: NvStreamingSdkCore.NvsTimeline, startTime: Swift.Int64, endTime: Swift.Int64)
  @discardableResult
  public static func seek(timeine: NvStreamingSdkCore.NvsTimeline, positon: Swift.Int64) -> Swift.Bool
  @discardableResult
  public static func checkIsSupportHDR() -> Swift.Bool
  @discardableResult
  public static func getAssetAspectRatio(by filePath: Swift.String) -> Swift.Float
  @discardableResult
  public static func getFileInfo(by filePath: Swift.String) -> NvStreamingSdkCore.NvsAVFileInfo?
  @discardableResult
  public static func calculateTimelineSize(editMode: NvShortVideoCore.NvEditAspectRatioMode, originAspectRatio: Swift.Float, previewResolution: Swift.Int32) -> CoreFoundation.CGSize
  public static func findNearbyAspectRatio(aspectRatio: Swift.Float) -> NvShortVideoCore.NvEditAspectRatioMode
  public static func findAspectRatio(aspectRatioString: Swift.String) -> NvShortVideoCore.NvEditAspectRatioMode
  public static func findTemplateNearbyAspectRatio(aspectRatio: Swift.Float, enableOriginal: Swift.Bool = true) -> NvShortVideoCore.NvEditAspectRatioMode
  public static func calculateSize(_ videoEditRes: NvStreamingSdkCore.NvsVideoResolution, resolution: Swift.Int) -> NvStreamingSdkCore.NvsSize
  public static func crossBoxSize(size: CoreFoundation.CGSize, crossRate: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func liteBoxSize(boxSize: CoreFoundation.CGSize, assetAspectRatio: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
@_hasMissingDesignatedInitializers open class NvFxEditCommand : NvShortVideoCore.NvCommand {
  public var updateParam: NvShortVideoCore.NvFxCommandUpdateParam
  public var isValidity: Swift.Bool
  public class func clipFxUpdateParamCommand(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel, actionType: NvShortVideoCore.NvCommand.ActionType = .merge, updateItems: [NvShortVideoCore.NvFxUpdateItem] = [], needRefresh: Swift.Bool = false) -> NvShortVideoCore.NvFxEditCommand
  public func update(item: NvShortVideoCore.NvFxUpdateItem)
  public static func update(clip: NvStreamingSdkCore.NvsVideoClip, item: NvShortVideoCore.NvFxUpdateItem, actionType: NvShortVideoCore.NvCommand.ActionType = .merge) -> Swift.Bool
  public static func checkFxAddingMethodAndType(clip: NvStreamingSdkCore.NvsVideoClip, videoFx: NvStreamingSdkCore.NvsVideoFx, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType, item: NvShortVideoCore.NvFxUpdateItem) -> NvStreamingSdkCore.NvsVideoFx?
  override public func commit() -> Swift.Bool
  public static func refreshUpdateItem(clip: NvStreamingSdkCore.NvsVideoClip, updateParam: NvShortVideoCore.NvFxCommandUpdateParam)
  @objc deinit
}
open class NvFxSetEditCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool
  public init(title: Swift.String, itemIndicate: Swift.String, trackIndex: Swift.Int)
  public func update(clipModel: NvShortVideoCore.NvVideoClipModel, items: [NvShortVideoCore.NvFxUpdateItem], actionType: NvShortVideoCore.NvCommand.ActionType = .merge)
  override public func commit() -> Swift.Bool
  public static func clipFxSetUpdateParamRedoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?)
  public static func clipFxSetUpdateParamUndoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, backupInfo: [Swift.String : Any]?, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class NvSingleClipMenuView : UIKit.UIView {
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
extension NvShortVideoCore.NvSingleClipMenuView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt _: Foundation.IndexPath) -> CoreFoundation.CGSize
}
public enum NvCropperAspectRatio : Swift.Int, Swift.CaseIterable {
  case NvCropperAspectRatio_Free
  case NvCropperAspectRatio_9v16
  case NvCropperAspectRatio_3v4
  case NvCropperAspectRatio_1v1
  case NvCropperAspectRatio_4v3
  case NvCropperAspectRatio_16v9
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NvShortVideoCore.NvCropperAspectRatio]
  public typealias RawValue = Swift.Int
  public static var allCases: [NvShortVideoCore.NvCropperAspectRatio] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvSourceInfo : ObjectiveC.NSObject {
  public var mediaFilePath: Swift.String
  public var stillImageHint: Swift.Bool
  public var duration: Swift.Int64
  public var pixelWidth: Swift.Int
  public var pixelHeight: Swift.Int
  public var trimIn: Swift.Int64
  public var trimOut: Swift.Int64
  public var fileSourceType: NvShortVideoCore.NvFileSourceType
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvEventObject : ObjectiveC.NSObject {
  @objc deinit
  open func registerEvents(events: [NvShortVideoCore.NvEvent])
  open func remoteEvents()
  open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?)
  open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?, sender: ObjectiveC.NSObject, parameter: [Swift.String : Any]?)
  open func receiveEvent(event _: NvShortVideoCore.NvEvent, action _: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender _: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @objc override dynamic public init()
}
public enum NvStepperDirection : Swift.Int {
  case forward
  case back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvStepperMode : Swift.Int {
  case play
  case seek
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NvStepperDelegate : AnyObject {
  func stepperWork(timeChange: Swift.Int64)
}
@_hasMissingDesignatedInitializers final public class NvStepper {
  weak final public var delegate: (any NvShortVideoCore.NvStepperDelegate)?
  final public var centerTime: Swift.Int64
  final public var direction: NvShortVideoCore.NvStepperDirection
  final public var forwardTimes: Swift.Double
  final public var isWorking: Swift.Bool {
    get
  }
  final public func correctionCenterTime(centerTime: Swift.Int64)
  final public func startStepper(direction: NvShortVideoCore.NvStepperDirection, mode: NvShortVideoCore.NvStepperMode, centerTime: Swift.Int64)
  final public func startStepper(direction: NvShortVideoCore.NvStepperDirection, mode: NvShortVideoCore.NvStepperMode, advance: Swift.Int64)
  final public func startStepper(direction: NvShortVideoCore.NvStepperDirection, duration: Swift.Int64, advance: Swift.Int64)
  final public func stop()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PageCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvPluginUpdateInfo : NvShortVideoCore.NvCommandUpdateInfo {
  public var itemClass: Swift.AnyClass
  public var itemIndicate: Swift.String
  public var updateFxModel: NvShortVideoCore.MeicamFx
  public var backupFxModel: NvShortVideoCore.MeicamFx
  @objc deinit
}
open class NvPluginCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool {
    get
  }
  public var operateFx: NvStreamingSdkCore.NvsFx
  public var timeAdsorbScope: Swift.Int64
  public init(title: Swift.String, item: any NvShortVideoCore.NvUnionModel, fx: NvStreamingSdkCore.NvsFx, addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = .raw, timeAdsorbScope: Swift.Int64)
  public static func fxUpdateParamRedoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?)
  public static func fxUpdateParamUndoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, backupInfo _: [Swift.String : Any]?, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  public static func updateParamAction(itemClass: Swift.AnyClass, itemIndicate: Swift.String, updateFxModel: NvShortVideoCore.MeicamFx, timeline _: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, undo _: Swift.Bool) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  @discardableResult
  public func updateFx(param: NvShortVideoCore.MeicamFxParam) -> Swift.Bool
  override open func commit() -> Swift.Bool
  public func updateFx(intensity: Swift.Float)
  public func operateKeyframe(add: Swift.Bool, key: Swift.String, pos: Swift.Int64)
  public func setKeyframeBezierCurve(before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam, type: Swift.Int, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint)
  @objc deinit
}
public enum NvVideoClipEditAction : Swift.Int, Swift.Codable {
  case split
  case delete
  case replace
  case changeRole
  case mask
  case filter
  case adjust
  case alpha
  case rotation
  case crop
  case mirror
  case copy
  case beauty
  case animation
  case enterAnimation
  case outAnimation
  case combinationAnimation
  case volume
  case noiseReduction
  case speed
  case commonSpeed
  case curveSpeed
  case voiceFx
  case revert
  case freeze
  case blend
  case smartMatting
  case colorMatting
  case arscene
  case plugin
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvAudioClipEditAction : Swift.Int, Swift.Codable {
  case split
  case delete
  case copy
  case volume
  case speed
  case voiceFx
  case transition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvStickerClipEditAction : Swift.Int, Swift.Codable {
  case copy
  case overspread
  case animation
  case delete
  case mirror
  case voiceFx
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvCaptionClipEditAction : Swift.Int, Swift.Codable {
  case style
  case copy
  case overspread
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvComcaptionClipEditAction : Swift.Int, Swift.Codable {
  case copy
  case overspread
  case delete
  case replace
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvEffectClipEditAction : Swift.Int, Swift.Codable {
  case copy
  case overspread
  case delete
  case replace
  case action
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NvAudioMenuAction : Swift.Int, Swift.Codable {
  case music
  case record
  case extract
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class NvFirstMenuItem {
  final public var title: Swift.String
  final public var image: Swift.String
  final public var action: Swift.Int
  final public var event: NvShortVideoCore.NvEvent
  public init(_ title: Swift.String, _ image: Swift.String, _ action: Swift.Int, _ event: NvShortVideoCore.NvEvent)
  @objc deinit
}
final public class NvSecondaryMenuItem {
  final public var title: Swift.String
  final public var imageName: Swift.String
  final public var actionTag: Swift.Int
  final public var response: Swift.Bool
  final public var enable: Swift.Bool
  final public var subItems: [NvShortVideoCore.NvSecondaryMenuItem]
  public init(title: Swift.String, imageName: Swift.String, actionTag: Swift.Int, response: Swift.Bool = true)
  @objc deinit
}
public protocol NvBottomMenuViewDataSource : AnyObject {
  func dataArrayForDefault() -> [NvShortVideoCore.NvFirstMenuItem]
  func dataArrayForEditMode(editMode: NvShortVideoCore.NvEditModeChangedAction) -> [NvShortVideoCore.NvSecondaryMenuItem]
  func dataArrayForTarget(actionTarget: Swift.AnyObject?) -> [NvShortVideoCore.NvSecondaryMenuItem]
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvTrackClipEditView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var editViewSelected: Swift.Bool
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func updateClipEditView(event: NvShortVideoCore.NvClipEditViewUpdateEvent, model: any NvShortVideoCore.NvUnionModel, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
public protocol NvTemplateTailorViewControllerDelegate : AnyObject {
  func templateTailorDidEnded(vc: NvShortVideoCore.NvTemplateTailorViewController, offset: Swift.Int64, isChnaged: Swift.Bool, cropperModel: NvShortVideoCore.NvCropperModel)
}
public enum NvTailorMode : Swift.Int, Swift.Codable {
  case templateTailor
  case editReplace
  case editCover
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class NvTemplateTailorViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvTemplateTailorViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var tailorMode: NvShortVideoCore.NvTailorMode
  @_Concurrency.MainActor(unsafe) public init(for assetId: Swift.String, trimIn: Swift.Int64, trimOut: Swift.Int64, cropperModel: NvShortVideoCore.NvCropperModel, offset: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var sourceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc deinit
}
extension NvShortVideoCore.NvTemplateTailorViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate _: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
@_hasMissingDesignatedInitializers public class MeicamEmptiness : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamMosaic : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamNoise : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamFlyingDot : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
public protocol NvMenuOperatorProtocol : AnyObject {
  func handleMenuItem(item: NvShortVideoCore.NvFirstMenuItem) -> Swift.Bool
  func handleSelectedItem(item: NvShortVideoCore.NvSecondaryMenuItem) -> Swift.Bool
  func handleSelectedSingleClipItem(item: NvShortVideoCore.NvSecondaryMenuItem, seletedUnionModel: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
public protocol NvBottomMenuViewDelegate : ObjectiveC.NSObjectProtocol {
  func customClipEditMenuView(target: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  func clipEditViewExitSelectedStatus(menuView: NvShortVideoCore.NvBottomMenuView)
  func clipViewDisplayStateChanged(displayState: NvShortVideoCore.NvClipViewState, keyframeIndentify: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvBottomMenuView : NvShortVideoCore.NvEventView {
  @_Concurrency.MainActor(unsafe) final public var singleClipMenuView: NvShortVideoCore.NvSingleClipMenuView?
  @_Concurrency.MainActor(unsafe) final public func reset(dataSource: any NvShortVideoCore.NvBottomMenuViewDataSource)
  @_Concurrency.MainActor(unsafe) override final public func receiveEvent(event: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender _: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) final public func menuViewReceivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @objc deinit
}
extension NvShortVideoCore.NvBottomMenuView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension NvShortVideoCore.NvBottomMenuView {
  @_Concurrency.MainActor(unsafe) final public func clipEditViewExitSelectedStatus()
  @_Concurrency.MainActor(unsafe) final public func clipEditViewBackEditMode(_: NvShortVideoCore.NvEditModeChangedAction?)
  @_Concurrency.MainActor(unsafe) final public func clipEditView(_: NvShortVideoCore.NvEditModeChangedAction?, didSelectItemAt Item: NvShortVideoCore.NvSecondaryMenuItem)
}
extension NvShortVideoCore.NvBottomMenuView : NvShortVideoCore.NvMenuProtocol {
  @_Concurrency.MainActor(unsafe) final public func synchronousStreamingEngineState(_: NvStreamingSdkCore.NvsStreamingEngineState)
  @_Concurrency.MainActor(unsafe) final public func synchronousPlaybackTimelinePosition(position _: Swift.Int64)
  @_Concurrency.MainActor(unsafe) final public func reloadSingleClipMenu(target: (any NvShortVideoCore.NvUnionModel)?, targetTypeChanged _: Swift.Bool, sender _: ObjectiveC.NSObject?)
}
@objc public enum NvSelectAssetType : Swift.Int {
  case all = 0
  case video
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol NvAlbumViewControllerDelegate {
  @objc optional func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, selectAlbum assets: [NvShortVideoCore.NvAlbumAsset])
  @objc optional func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, didSelectAlbum assets: [NvShortVideoCore.NvAlbumAsset])
  @objc optional func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, selectAlbumAssetsOverMaxCountLimit assets: [NvShortVideoCore.NvAlbumAsset])
  @objc optional func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, selectAlbumAssetsUnderMinCountLimit assets: [NvShortVideoCore.NvAlbumAsset])
  @objc optional func nvAlbumViewControllerCancelClick(controller: NvShortVideoCore.NvAlbumViewController)
  @objc optional func nvAlbumViewControllerCustomBottomButton() -> UIKit.UIView
  @objc optional func nvAlbumViewController(controller: NvShortVideoCore.NvAlbumViewController, selectTemplates templates: [NvShortVideoCore.NvAlbumTemplateItem], supportedRatio: Swift.Int)
  @objc optional func nvAlbumViewControllerAutoCut(controller: NvShortVideoCore.NvAlbumViewController, selectAlbum assets: [NvShortVideoCore.NvAlbumAsset])
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class NvAlbumViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvAlbumViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public var selectAssetSource: [NvShortVideoCore.NvAlbumAsset] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var selectAssetType: NvShortVideoCore.NvSelectAssetType
  @objc @_Concurrency.MainActor(unsafe) final public var viewTag: Swift.String
  @objc @_Concurrency.MainActor(unsafe) final public var mutableSelect: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var isSupport4K: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var isSupportHDR: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var isDisableHighFrameRate: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var enableReplaceSeteted: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var maxSelectCount: Swift.Int
  @_Concurrency.MainActor(unsafe) final public var minSelectCount: Swift.Int
  @_Concurrency.MainActor(unsafe) final public var minDuration: Swift.Int64
  @objc @_Concurrency.MainActor(unsafe) final public var hiddenSelectAll: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var isEnablePreview: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var isEnableDurationLimit: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var templateClips: [NvShortVideoCore.NvAlbumTemplateItem]
  @objc @_Concurrency.MainActor(unsafe) final public var templateSupportRations: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) final public var templateDefaultRation: Swift.String
  @_Concurrency.MainActor(unsafe) final public var templateGrouped: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func customSelectAssetButtonText(text: Swift.String)
  @_Concurrency.MainActor(unsafe) final public var alwaysShowCustomBottom: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var isPhotoAlbumMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var rightItemStr: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) final public var bottomLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public var categoryType: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) final public var hiddenAutoCut: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public var projectId: Swift.String?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(limitDuration: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
}
extension NvShortVideoCore.NvAlbumViewController : NvShortVideoCore.NvThemeElement {
  @_Concurrency.MainActor(unsafe) @objc final public func themeElements() -> [Swift.AnyHashable : Any]
}
extension NvShortVideoCore.NvAlbumViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewWillEndDragging(_: UIKit.UIScrollView, withVelocity _: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvRefreshAutoFooter : NvShortVideoCore.NvRefreshFooter {
  @objc @_Concurrency.MainActor(unsafe) public var labelLeftInset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) weak public var stateLabel: UIKit.UILabel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var arrowView: UIKit.UIImageView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var loadingView: UIKit.UIActivityIndicatorView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open class func footer(forTarget target: Swift.AnyObject, action: ObjectiveC.Selector) -> NvShortVideoCore.NvRefreshAutoFooter
  @_Concurrency.MainActor(unsafe) @objc override open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override open func placeSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func configScrollViewBounce(_ newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func scrollViewContentOffsetDidChanged(change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override open func scrollViewContentSizeDidChanged(change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) override open func updateRefreshState(for lastState: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum NvTemplateLayout {
  public enum NvTemplateEnvs {
    case width
    case height
    case scale
    case statusBarHeight
    case naviBarHeight
    case naviHeight
    case bottomSafeAreaHeight
    public static func == (a: NvShortVideoCore.NvTemplateLayout.NvTemplateEnvs, b: NvShortVideoCore.NvTemplateLayout.NvTemplateEnvs) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var width: CoreFoundation.CGFloat {
    get
  }
  public static var height: CoreFoundation.CGFloat {
    get
  }
  public static var scale: CoreFoundation.CGFloat {
    get
  }
  public static var statusBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var naviBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var naviHeight: CoreFoundation.CGFloat {
    get
  }
  public static var bottomSafeAreaHeight: CoreFoundation.CGFloat {
    get
  }
}
public enum NvTimelineRangeOperator {
  public static func findUnionVerticalTrack(dataArray: [any NvShortVideoCore.NvUnionModel], inPoint: Swift.Int64, duration: Swift.Int64) -> Swift.Int
  public static func findUnionVerticalBlankTrack(dataArray: [any NvShortVideoCore.NvUnionModel], aboveTrack: Swift.Int) -> Swift.Int
}
public protocol NvStayStepperDelegate : ObjectiveC.NSObjectProtocol {
  func stayStepperWork(stepper: NvShortVideoCore.NvStayStepper, timeChange: Swift.Int64)
}
@objc @_inheritsConvenienceInitializers final public class NvStayStepper : ObjectiveC.NSObject, NvShortVideoCore.NvStepperDelegate {
  weak final public var delegate: (any NvShortVideoCore.NvStayStepperDelegate)?
  final public var steper: NvShortVideoCore.NvStepper?
  final public func startEdgeTimer(direction: NvShortVideoCore.NvStepperDirection)
  final public func stopEdgeTimer()
  final public func stepperWork(timeChange: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NvPluginModel : NvShortVideoCore.NvBuiltinFxModel {
  public var pluginfx: NvStreamingSdkCore.NvsTimelineVideoFx?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var isEnable: Swift.Bool
  @objc required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @discardableResult
  public func buildPluginFx(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func loadPluginFx(fx: NvStreamingSdkCore.NvsTimelineVideoFx, copyKeys: [Swift.String] = [])
  public func copyModel() -> NvShortVideoCore.NvPluginModel
  public static func keyframeIdentify(forKey key: Swift.String, builtinName: Swift.String, itemIndicate: Swift.String) -> Swift.String
  @objc deinit
}
extension NvShortVideoCore.NvPluginModel : NvShortVideoCore.NvUnionModel {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow _: NvStreamingSdkCore.NvsLiveWindow, timelineTime _: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  public func keyframeIdentify(forKey key: Swift.String) -> Swift.String
  @discardableResult
  public func isSupportKeyframe(_ keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
public enum NvCommandError : Swift.Error {
  case noErr
  case VideoClip(_: NvShortVideoCore.NvCommandError.VideoClipCommand)
  case AudioClip(_: NvShortVideoCore.NvCommandError.AudioClipCommand)
  case Timeline(_: NvShortVideoCore.NvCommandError.TimelineCommand)
  case Track(_: NvShortVideoCore.NvCommandError.TrackCommand)
}
extension NvShortVideoCore.NvCommandError {
  public enum VideoClipCommand : Swift.Error {
    case invaildParams(_: Swift.String)
    case findTarget(_: Swift.String)
    case nonsupport(_: Swift.String)
    case performError(_: Swift.String)
    public var errorDescription: Swift.String {
      get
    }
    public var errorCode: Swift.Int {
      get
    }
  }
}
extension NvShortVideoCore.NvCommandError {
  public enum AudioClipCommand : Swift.Error {
    case invaildParams(_: Swift.String)
    case findFxAction(_: Swift.String)
    public var errorDescription: Swift.String {
      get
    }
    public var errorCode: Swift.Int {
      get
    }
  }
}
extension NvShortVideoCore.NvCommandError {
  public enum TimelineCommand : Swift.Error {
    case findFxAction(_: Swift.String)
    case findActionParam(_: Swift.String)
    case invaildParams(_: Swift.String)
    public var errorDescription: Swift.String {
      get
    }
    public var errorCode: Swift.Int {
      get
    }
  }
}
extension NvShortVideoCore.NvCommandError {
  public enum TrackCommand : Swift.Error {
    case findFxAction(_: Swift.String)
    case findActionParam(_: Swift.String)
    case invaildParams(_: Swift.String)
    public var errorDescription: Swift.String {
      get
    }
    public var errorCode: Swift.Int {
      get
    }
  }
}
extension NvShortVideoCore.NvCommandError : Foundation.CustomNSError, Foundation.LocalizedError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String {
    get
  }
}
extension NvShortVideoCore.NvCommandError : Swift.Equatable {
  public static func == (lhs: NvShortVideoCore.NvCommandError, rhs: NvShortVideoCore.NvCommandError) -> Swift.Bool
  public static func != (lhs: NvShortVideoCore.NvCommandError, rhs: NvShortVideoCore.NvCommandError) -> Swift.Bool
}
extension NvShortVideoCore.NvClipCommand {
  public class func clipAddCommand(title: Swift.String, trackIndex: Swift.Int, timelineTime: Swift.Int64, trimIn: Swift.Int64, trimOut: Swift.Int64, fileIds: [Swift.String], updateItems: [NvShortVideoCore.NvFxUpdateItem]) -> NvShortVideoCore.NvCommand
}
extension NvShortVideoCore.NvTimelineDataManager {
  final public func storeCurrentTimelineData(waitUntilFinished: Swift.Bool = false, callBack: @escaping ((Swift.Bool) -> Swift.Void))
  final public func keyframeFucStatueChanged(isSupport: Swift.Bool, isExist: Swift.Bool, isEnableEdit: Swift.Bool)
}
extension NvShortVideoCore.NvTimelineDataManager {
  final public class func changePreviewSize(cTimeline: NvStreamingSdkCore.NvsTimeline, preTimelineSize: CoreFoundation.CGSize = .zero, timelineModel: NvShortVideoCore.NvTimelineModel, targetRes: CoreFoundation.CGSize, adjustMainTrack: Swift.Bool = false, adjustCaption: Swift.Bool = false)
  @discardableResult
  final public func unionModelDataArray(for trackEditMode: NvShortVideoCore.NvEditModeChangedAction) -> [any NvShortVideoCore.NvUnionModel]
  @discardableResult
  final public func unionModelDataArray(for trackEditMode: NvShortVideoCore.NvEditModeChangedAction, timelineModel: NvShortVideoCore.NvTimelineModel) -> [any NvShortVideoCore.NvUnionModel]
}
@_hasMissingDesignatedInitializers public class NvTemplateEditerOperator {
  @objc deinit
}
public protocol NvCropperViewControllerDelegate : AnyObject {
  func cropper(clipModel: NvShortVideoCore.NvVideoClipModel, result: (cropperModel: NvShortVideoCore.NvCropperModel, playTime: Swift.Int64, rect: (rectLeftTop: CoreFoundation.CGPoint, rectLeftBottom: CoreFoundation.CGPoint, rectRightBottom: CoreFoundation.CGPoint, rectRightTop: CoreFoundation.CGPoint)))
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvCropperViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvCropperViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public var selectedIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(clipModel: NvShortVideoCore.NvVideoClipModel, currentTime: Swift.Int64, delegate: (any NvShortVideoCore.NvCropperViewControllerDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
extension NvShortVideoCore.NvCropperViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
public typealias TitleClickHandler = (NvShortVideoCore.PageTitleView, Swift.Int) -> ()
extension NvShortVideoCore.NvsKeyframe {
  public enum FxType : Swift.Int {
    case timelineVideoFx
    case timelineSticker
    case timelineCaption
    case timelineComCaption
    case clipTransfrom
    case clipMask
    case clipOpacity
    case clipPlugin
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum FxIdentify : Swift.String {
    case transform
    case mask
    case opacity
    case plugin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public typealias NvsKeyframeControlPoints = (forward: CoreFoundation.CGPoint, backward: CoreFoundation.CGPoint)
public typealias NvsKeyframeCurveInfo = (type: Swift.Int, forward: CoreFoundation.CGPoint, backward: CoreFoundation.CGPoint)
extension NvShortVideoCore.NvsKeyframe {
  public static func hasKeyframeList(fx: NvStreamingSdkCore.NvsFx, predicate: Swift.String) -> Swift.Bool
  @discardableResult
  public static func isExist(forFx fx: NvStreamingSdkCore.NvsFx, predicate: Swift.String, timelinePos: Swift.Int64, inPoint: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (existed: Swift.Bool, pos: Swift.Int64)
  @discardableResult
  public static func queryFxParam(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicate: NvShortVideoCore.MeicamFxParam, timelinePos: Swift.Int64, inPoint: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (isExisted: Swift.Bool, pos: Swift.Int64, param: NvShortVideoCore.MeicamFxParam)
  @discardableResult
  public static func queryAll(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicate: NvShortVideoCore.MeicamFxParam) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public static func queryAllReverse(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicate: NvShortVideoCore.MeicamFxParam, inPoint: Swift.Int64, outPoint: Swift.Int64) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public static func query(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicate: NvShortVideoCore.MeicamFxParam) -> NvShortVideoCore.MeicamFxParam
  @discardableResult
  public static func transformToKeyframe(forType type: NvShortVideoCore.NvsKeyframe.FxType, transform: NvShortVideoCore.NvTransformModel, pos: Swift.Int64) -> [NvShortVideoCore.MeicamFxParam]
}
extension NvShortVideoCore.NvsKeyframe {
  public static func append(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframe: NvShortVideoCore.MeicamFxParam, anchor: CoreFoundation.CGPoint, isAuto: Swift.Bool)
  public static func update(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframe: NvShortVideoCore.MeicamFxParam, anchor: CoreFoundation.CGPoint)
  public static func recover(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [NvShortVideoCore.MeicamFxParam])
  public static func delete(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframe: NvShortVideoCore.MeicamFxParam)
  public static func deleteAll(fx: NvStreamingSdkCore.NvsFx, predicate: Swift.String)
  public static func updateTrackKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [NvShortVideoCore.MeicamFxParam], isTrimLeft: Swift.Bool, inPoint: Swift.Int64, outPoint: Swift.Int64, timeDelta: Swift.Int64)
}
extension NvShortVideoCore.NvsKeyframe {
  @discardableResult
  public static func isSupportKeyframeCurve(predicate: NvShortVideoCore.MeicamFxParam) -> Swift.Bool
  @discardableResult
  public static func isEnableKeyframeCurve(fx: NvStreamingSdkCore.NvsFx, predicate: NvShortVideoCore.MeicamFxParam, timelinePos: Swift.Int64, inPoint: Swift.Int64, timeAdsorbScope: Swift.Int64) -> Swift.Bool
  @discardableResult
  public static func queryCurveType(fx: NvStreamingSdkCore.NvsFx, attachmentKey: Swift.String) -> Swift.Int
  @discardableResult
  public static func queryEditCurveKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicate: NvShortVideoCore.MeicamFxParam, timelinePos: Swift.Int64, inPoint: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  public static func recoverAllKeyframeCurve(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [NvShortVideoCore.MeicamFxParam])
  public static func updateKeyframeCurve(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframe: NvShortVideoCore.MeicamFxParam, controlPoints: NvShortVideoCore.NvsKeyframeControlPoints = (CGPoint.zero, CGPoint.zero))
  @discardableResult
  public static func calcuCurveControlPoints(preKeyframe: NvShortVideoCore.MeicamFxParam, nextKeyframe: NvShortVideoCore.MeicamFxParam, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint) -> (key: Swift.String, prePoint: NvStreamingSdkCore.NvsPointD, nextPoint: NvStreamingSdkCore.NvsPointD)?
  @discardableResult
  public static func calcuCustomCurveControls(before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam) -> (forward: CoreFoundation.CGPoint, backward: CoreFoundation.CGPoint)
  public static func curveControlPoints() -> [(forward: CoreFoundation.CGPoint, backward: CoreFoundation.CGPoint)]
}
public enum NvsKeyframe {
}
extension NvStreamingSdkCore.NvsPointD {
  public func isZero() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class NvInterfaceEnv {
  public var inSpeechRecognition: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class NvTemplateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  final public var id: Swift.String
  final public var uuid: Swift.String
  final public var category: Swift.Int
  final public var kind: Swift.Int
  final public var version: Swift.Int
  final public var displayName: Swift.String
  final public var descriptions: Swift.String
  final public var coverUrl: Swift.String
  final public var previewVideoUrl: Swift.String
  final public var packageUrl: Swift.String
  final public var licPath: Swift.String
  final public var infoUrl: Swift.String
  final public var packageInfo: Swift.String
  final public var supportedAspectRatio: Swift.Int32
  final public var defaultAspectRatio: Swift.Int32
  final public var duration: Swift.Int64
  final public var shotsNumber: Swift.Int
  final public var canReplaceShotsNumber: Swift.Int
  final public var queryInteractiveResultDto: NvShortVideoCore.NvTemplateInteractive
  final public var userInfo: NvShortVideoCore.NvTemplateProducer
  final public var isStored: Swift.Bool
  final public var itemHeight: CoreFoundation.CGFloat
  final public var isCompiled: Swift.Bool
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  final public func getSupportedAspectRatios() -> [Swift.String]
  final public func getAspectRatio() -> CoreFoundation.CGFloat
  final public func getAspectRatioStr(for rawValue: Swift.Int32) -> Swift.String
  final public func deepCopy() -> NvShortVideoCore.NvTemplateInfo
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers final public class NvTemplateProducer : ObjectiveC.NSObject, Foundation.NSCopying, NvShortVideoCore.NvCodable {
  final public var nickname: Swift.String
  final public var iconUrl: Swift.String
  @objc override dynamic public init()
  @objc final public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class NvTemplateInteractive : NvShortVideoCore.NvCodable, Foundation.NSCopying {
  public var materialId: Swift.String
  public var useNum: Swift.Int
  public var likeNum: Swift.Int
  required public init()
  @objc public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class NvTemplateGroupInfo {
  final public var groupId: Swift.Int
  final public var info: [Swift.String : Swift.Int]
  final public var footages: [Swift.String]
  @objc deinit
}
final public class NvTemplateTimelineClipInfo {
  final public var trackIndex: Swift.Int32
  final public var clipIndex: Swift.Int32
  final public var inPoint: Swift.Int64
  final public var isEmptyDesc: Swift.Bool
  public init(trackIndex: Swift.Int32, clipIndex: Swift.Int32, inPoint: Swift.Int64, isEmptyDesc: Swift.Bool)
  final public func copyItem() -> NvShortVideoCore.NvTemplateTimelineClipInfo
  @objc deinit
}
final public class NvTemplateTrackClipInfo {
  final public var id: Swift.String
  final public var trackIndex: Swift.Int32
  final public var clipIndex: Swift.Int32
  final public var type: Swift.UInt32
  final public var isGrouped: Swift.Bool
  final public var groupId: Swift.Int
  final public var needReverse: Swift.Bool
  final public var duration: Swift.Int64
  final public var actualInPoint: Swift.Int64
  final public var bestDuration: Swift.Int64
  public init(id: Swift.String, trackIndex: Swift.Int32, clipIndex: Swift.Int32, type: Swift.UInt32, isGrouped: Swift.Bool, groupId: Swift.Int, needReverse: Swift.Bool, actualInPoint: Swift.Int64, duration: Swift.Int64, bestDuration: Swift.Int64)
  @objc deinit
}
extension NvShortVideoCore.NvCropperModel {
  final public func updateFxParam(videoSize: CoreFoundation.CGSize) -> [NvShortVideoCore.NvFxUpdateItem]
  final public func deleteFxParam() -> [NvShortVideoCore.NvFxUpdateItem]
}
extension NvShortVideoCore.NvClipOperator {
  public static func freezeFrame(clipModel: NvShortVideoCore.NvVideoClipModel, timelinePoint _: Swift.Int64, projectId: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  public static func addVideoClip(commandManager: NvShortVideoCore.NvCommandManager, timelineTime: Swift.Int64, assets: [Photos.PHAsset], inMainTrack: Swift.Bool, callBack: @escaping ((NvShortVideoCore.NvVideoClipModel?) -> Swift.Void))
  public static func addVideoClip(commandManager: NvShortVideoCore.NvCommandManager, timelineTime: Swift.Int64, sources: [any NvShortVideoCore.NvDraftSource], inMainTrack: Swift.Bool) -> NvShortVideoCore.NvVideoClipModel?
}
extension NvShortVideoCore.NvClipOperator {
  public static func addMusicItem(commandManager: NvShortVideoCore.NvCommandManager, musicName: Swift.String, musicPath: Swift.String, trimIn: Swift.Int64, trimOut: Swift.Int64, fileSourceType: NvShortVideoCore.NvFileSourceType)
  public static func addAudioClip(commandManager: NvShortVideoCore.NvCommandManager, audioType: NvShortVideoCore.NvAudioType, musicName: Swift.String, source: any NvShortVideoCore.NvDraftSource, audioInPoint: Swift.Int64, trimIn: Swift.Int64, trimOut: Swift.Int64) -> NvShortVideoCore.NvAudioClipModel?
  public static func audioExtract(asset: Photos.PHAsset, callBack: @escaping (((any NvShortVideoCore.NvDraftSource)?) -> Swift.Void))
}
extension NvShortVideoCore.NvClipOperator {
  public static func previewAnimation(videoClip: NvStreamingSdkCore.NvsVideoClip, animationModel: NvShortVideoCore.NvAnimationModel, animationType: Swift.Int)
}
public enum NvClipOperator {
  @discardableResult
  public static func backgroundEffectsIsAvailable(cTimeline _: NvStreamingSdkCore.NvsTimeline, cTimelineModel: NvShortVideoCore.NvTimelineModel, time: Swift.Int64) -> Swift.Bool
  public static func resetMusicTrack(cTimeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, targetDuration: Swift.Int64)
  public static func checkBgVideoTrack(cTimeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, targetDuration: Swift.Int64 = -1, appendDuration: Swift.Int64 = 0)
  public static func deleteTimelineFxCheckBgVideoTrackDuration(timelineModel: NvShortVideoCore.NvTimelineModel, indicate: Swift.String) -> Swift.Int64
}
@objc @objcMembers public class NvRecordDataSource : ObjectiveC.NSObject {
  @objc public var recordingPath: Swift.String?
  @objc public init(editManager: NvShortVideoCore.NvEditManager)
  @objc public func recordAvailable(_ checkRange: Foundation.NSRange) -> Swift.Bool
  @objc public func hasClip(position: Swift.Int64) -> Swift.Bool
  @objc public func deleteClip(_ position: Swift.Int64)
  @objc public func recordEndTime(_ position: Swift.Int64) -> Swift.Int64
  @objc public func startRecord(withFilePath filePath: Swift.String, inPoint: Swift.Int64)
  @objc public func updateRecordTime(_ time: Swift.Int64)
  @objc public func recordFinished() -> Swift.Bool
  @objc public func cancel()
  @objc public func commit()
  @objc deinit
}
extension NvShortVideoCore.NvRecordDataSource : NvShortVideoCore.NvSingleTrackViewDataSource {
  public func trackClips() -> [any NvShortVideoCore.NvUnionModel]
  public func bgColorForItem(_ item: any NvShortVideoCore.NvUnionModel) -> UIKit.UIColor
  @objc dynamic public func selectedItemIdentifier() -> Swift.String?
  @objc dynamic public func isDragEnabled() -> Swift.Bool
  @objc dynamic public func isTapEnabled() -> Swift.Bool
}
extension NvShortVideoCore.NvRecordDataSource : NvShortVideoCore.NvSingleTrackViewDelegate {
  @objc dynamic public func trackViewRangeSelectViewTimeDragChanged(time: Swift.Int64)
  @objc dynamic public func trackViewRangeSelectViewTimeDragEnd(time: Swift.Int64)
  public func trackViewDidTapItem(_ item: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  public func trackViewRangeSelectViewDragEditBegin(_ item: any NvShortVideoCore.NvUnionModel)
  public func trackViewRangeSelectViewDragEditChanged(time: Swift.Int64, isLeft: Swift.Bool, item: any NvShortVideoCore.NvUnionModel)
  public func trackViewRangeSelectViewDragEditEnd(_ item: any NvShortVideoCore.NvUnionModel)
}
extension NvShortVideoCore.NvCommand {
  public enum KeyframeFxType : Swift.String {
    case timelineFx
    case videoFx
    case `undef`
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum KeyframeAction : Swift.Int {
    case `undef`
    case append
    case delete
    case update
    case recover
    case curve
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol NvCommandKeyframeUpdateInfo : NvShortVideoCore.NvCommandUpdateInfo {
  var fxType: NvShortVideoCore.NvCommand.KeyframeFxType { get set }
  var updateItem: NvShortVideoCore.NvKeyframeUpdateItem? { get set }
  var backupItem: NvShortVideoCore.NvKeyframeUpdateItem? { get set }
}
@objc open class NvKeyframeUpdateItem : ObjectiveC.NSObject {
  public var fxType: NvShortVideoCore.NvCommand.KeyframeFxType
  public var timelineFxType: NvShortVideoCore.NvKeyframeCommand.TimelineFxType
  public var videoFxType: NvShortVideoCore.NvKeyframeCommand.VideoFxType
  public var actionType: Swift.Int
  public var pos: Swift.Int64
  public var isAuto: Swift.Bool
  public var itemIndicate: Swift.String
  public var paramsInfo: [Swift.String : Any]
  public var backupInfo: [Swift.String : Any]
  public init(fxType: NvShortVideoCore.NvCommand.KeyframeFxType, timelineFxType: NvShortVideoCore.NvKeyframeCommand.TimelineFxType, actionType: Swift.Int, itemIndicate: Swift.String)
  public init(fxType: NvShortVideoCore.NvCommand.KeyframeFxType, videoFxType: NvShortVideoCore.NvKeyframeCommand.VideoFxType, actionType: Swift.Int, itemIndicate: Swift.String)
  public func copyItem() -> NvShortVideoCore.NvKeyframeUpdateItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvKeyframeUpdateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCommandKeyframeUpdateInfo {
  public var fxType: NvShortVideoCore.NvCommand.KeyframeFxType
  public var itemIndicate: Swift.String
  public var updateItem: NvShortVideoCore.NvKeyframeUpdateItem?
  public var backupItem: NvShortVideoCore.NvKeyframeUpdateItem?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvKeyframeCommand : ObjectiveC.NSObject {
  public static func command(withTitle title: Swift.String, updateItem: NvShortVideoCore.NvKeyframeUpdateItem) -> NvShortVideoCore.NvCommand
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class NvMaskRectViewManager : ObjectiveC.NSObject, NvShortVideoCore.NvRectViewManagerObject {
  weak final public var liveWindow: NvStreamingSdkCore.NvsLiveWindow?
  final public var rectView: NvShortVideoCore.NvMaskRectView!
  weak final public var refreshDelegate: (any NvShortVideoCore.NvRectViewManagerDelegate)?
  final public var currentClipModel: NvShortVideoCore.NvVideoClipModel? {
    get
  }
  public init(liveWindow: NvStreamingSdkCore.NvsLiveWindow, commandManager: NvShortVideoCore.NvCommandManager)
  final public var view: UIKit.UIView? {
    get
  }
  final public func updateCenterTime(time: Swift.Int64, isPlaying _: Swift.Bool)
  final public func didSeekingTimelinePosition(position: Swift.Int64)
  final public func streamingEngineStateChanged(state _: NvStreamingSdkCore.NvsStreamingEngineState)
  final public func rectManagerReceivedCommandRefreshRequest(impact _: NvShortVideoCore.NvCommandImpact)
  final public func loadClipModel(videoClipModel: NvShortVideoCore.NvVideoClipModel, videoClip: NvStreamingSdkCore.NvsVideoClip?)
  final public func seletedAction(sender _: ObjectiveC.NSObject?, action _: NvShortVideoCore.NvSeleteClipEvent, object: Swift.AnyObject?)
  @objc deinit
}
extension NvShortVideoCore.NvMaskRectViewManager {
  final public func maskModelChanged(maskModel _: NvShortVideoCore.NvMaskModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NvProEditViewController : NvShortVideoCore.NvVideoEditorViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override public func projectDataLoaded()
  @_Concurrency.MainActor(unsafe) override public func handleMenuItem(item: NvShortVideoCore.NvFirstMenuItem) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override public func handleSelectedItem(item: NvShortVideoCore.NvSecondaryMenuItem) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override public func handleSelectedSingleClipItem(item: NvShortVideoCore.NvSecondaryMenuItem, seletedUnionModel: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override public func handleCustomClipEditMenuView(target: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override public func viewForMainTrackHeader(timelineView _: NvShortVideoCore.NvTimelineView, mainTrackHeight: CoreFoundation.CGFloat) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) override public func viewForMainTrackOperator(timelineView _: NvShortVideoCore.NvTimelineView, mainTrackHeight: CoreFoundation.CGFloat) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) override public func configProjectCustomProtocol(editInterfaceCustomProtocol: NvShortVideoCore.NvEditInterfaceCustomProtocol)
  @_Concurrency.MainActor(unsafe) override public func editCaption(captionModel: NvShortVideoCore.NvCaptionModel)
  @_Concurrency.MainActor(unsafe) override public func editComCaption(comCaptionModel: NvShortVideoCore.NvComCaptionModel, textIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) override public func seletedVideoTrackTransitionIndex(selectTransitionIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) override public func updateMainTrackVolumeState()
  @_Concurrency.MainActor(unsafe) public func shouldDestroyStreamingContext() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func leftNavButtonClick(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) public func saveBeforeExit() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override public func cleanBeforePop()
  @_Concurrency.MainActor(unsafe) override public func receivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NvShortVideoCore.NvProEditViewController : NvShortVideoCore.NvVolumeViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func volumeViewTapView(volumeView _: NvShortVideoCore.NvVolumeView, enable _: Swift.Bool)
}
extension NvShortVideoCore.NvProEditViewController : NvShortVideoCore.NvImageViewCustiomProtocol {
  @_Concurrency.MainActor(unsafe) public func animatedImageViewForTrackCellView() -> UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public func loadImageFor(imageView: UIKit.UIImageView?, imageString: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func cache(image: UIKit.UIImage, url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func fetchImageFromCache(imageUrl: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) dynamic public class var isIphone7: Swift.Bool {
    @objc get
  }
}
extension NvStreamingSdkCore.NvsFx {
  public func resetFxParamFilePath()
  public var itemIndicate: Swift.String? {
    get
    set
  }
  public var timelineFxType: NvShortVideoCore.NvTimelineFxType? {
    get
  }
}
@objc open class NvPageViewManager : ObjectiveC.NSObject {
  public var style: NvShortVideoCore.PageStyle {
    get
  }
  public var titles: [Swift.String] {
    get
  }
  public var subViews: [UIKit.UIView] {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var titleView: NvShortVideoCore.PageTitleView {
    get
  }
  public var contentView: NvShortVideoCore.NvPageContentView {
    get
  }
  public init(style: NvShortVideoCore.PageStyle, titles: [Swift.String], subViews: [UIKit.UIView], startIndex: Swift.Int = 0)
  required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvTemplateTransformModel : ObjectiveC.NSObject {
  public var transformX: Swift.Double
  public var transformY: Swift.Double
  public var scaleX: Swift.Double
  public var scaleY: Swift.Double
  public var rotation: Swift.Double
  public var anchorX: Swift.Double
  public var anchorY: Swift.Double
  @objc override required dynamic public init()
  public func copy() -> NvShortVideoCore.NvTemplateTransformModel
  public func load(transFx: NvStreamingSdkCore.NvsVideoFx)
  public func load(transFx: NvStreamingSdkCore.NvsFx, timelineSize: CoreFoundation.CGSize, time: Swift.Int64)
  @objc deinit
}
@objc open class PageViewManager : ObjectiveC.NSObject {
  public var style: NvShortVideoCore.PageStyle {
    get
  }
  public var titles: [Swift.String] {
    get
  }
  public var childViewControllers: [UIKit.UIViewController] {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var titleView: NvShortVideoCore.PageTitleView {
    get
  }
  public var contentView: NvShortVideoCore.PageContentView {
    get
  }
  public init(style: NvShortVideoCore.PageStyle, titles: [Swift.String], childViewControllers: [UIKit.UIViewController], startIndex: Swift.Int = 0)
  required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  public func resize(size: CoreFoundation.CGSize) -> UIKit.UIImage
  public func scaleImage(scaleSize: CoreFoundation.CGFloat) -> UIKit.UIImage
}
@objc @_Concurrency.MainActor(unsafe) open class PageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var style: NvShortVideoCore.PageStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var childViewControllers: [UIKit.UIViewController] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleView: NvShortVideoCore.PageTitleView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentView: NvShortVideoCore.PageContentView {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, style: NvShortVideoCore.PageStyle, titles: [Swift.String], childViewControllers: [UIKit.UIViewController], startIndex: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum NvVideoTransitionType : Swift.Int, Swift.Codable {
  case builtin
  case package
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvTransitionDataModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var videoTransition: NvStreamingSdkCore.NvsVideoTransition?
  public var transitionType: NvShortVideoCore.NvVideoTransitionType
  public var desc: Swift.String
  public var videoTransitionDurationScaleFactor: Swift.Float
  public var videoTransitionDuration: Swift.Int64
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadVideoTransition(videoTransition: NvStreamingSdkCore.NvsVideoTransition)
  public func buildVideoTransition(videoTrack: NvStreamingSdkCore.NvsVideoTrack, index: Swift.Int)
  public func copyModel() -> NvShortVideoCore.NvTransitionDataModel
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvTransitionDataModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
extension NvStreamingSdkCore.NvsVideoTransition {
  public func setUserTag(isUserAction: Swift.Bool)
  public func getUserTag() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class NvProjectInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var projectId: Swift.String
  public var projectDescription: Swift.String
  public var lastModifiedTime: Swift.String
  public var duration: Swift.Int64
  public var coverPos: Swift.Int64
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NvAudioClipTransitionParam : ObjectiveC.NSObject {
  public var fadeInDuration: Swift.Int64
  public var fadeOutDuration: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
@objc open class NvAudioClipUpdateParam : ObjectiveC.NSObject {
  public var actionType: NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType
  public var value: Any?
  public init(actionType: NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType, value: Any?)
  public enum AudioClipActionType : Swift.Int {
    case keepAudioPitch
    case audiofx
    case transition
    case volume
    case move
    case curveSpeed
    case add
    case delete
    case trimLeft
    case trimRight
    case moveTo
    case copy
    case split
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NvRefreshAutoTrailer : NvShortVideoCore.NvRefreshTrailer {
  @objc @_Concurrency.MainActor(unsafe) weak public var stateLabel: UIKit.UILabel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var arrowView: UIKit.UIImageView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open class func trailer(forTarget target: Swift.AnyObject, action: ObjectiveC.Selector) -> NvShortVideoCore.NvRefreshAutoTrailer
  @_Concurrency.MainActor(unsafe) @objc override open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override open func placeSubviews()
  @_Concurrency.MainActor(unsafe) override open func updateRefreshState(for lastState: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc open class NvMenuOperator : NvShortVideoCore.NvEventObject, NvShortVideoCore.NvMenuOperatorProtocol {
  weak public var liveWindow: NvStreamingSdkCore.NvsLiveWindow?
  weak public var popViewManager: NvShortVideoCore.NvBottomPopViewManager!
  weak public var rectViewManager: NvShortVideoCore.NvRectViewManager?
  weak public var editViewController: NvShortVideoCore.NvVideoEditorViewController?
  public init(viewController: NvShortVideoCore.NvVideoEditorViewController, popViewManager: NvShortVideoCore.NvBottomPopViewManager, rectViewManager: NvShortVideoCore.NvRectViewManager)
  open func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  open func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  open func handleMenuItem(item _: NvShortVideoCore.NvFirstMenuItem) -> Swift.Bool
  open func handleSelectedItem(item _: NvShortVideoCore.NvSecondaryMenuItem) -> Swift.Bool
  open func handleSelectedSingleClipItem(item _: NvShortVideoCore.NvSecondaryMenuItem, seletedUnionModel _: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  open func shouldEditCaption(captionModel _: NvShortVideoCore.NvCaptionModel) -> Swift.Bool
  open func shouldEditComCaption(comCaptionModel _: NvShortVideoCore.NvComCaptionModel, textIndex _: Swift.Int) -> Swift.Bool
  open func seletedVideoTrackTransitionIndex(selectTransitionIndex _: Swift.Int) -> Swift.Bool
  open func clipVolumeDidChanged()
  open func showCurveKeyframeEditView(target _: any NvShortVideoCore.NvUnionModel)
  open func refreshTrackTransitionView()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvEventViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var enableSwipeBack: Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) open var backImageName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func popEvent()
  @_Concurrency.MainActor(unsafe) open func registerEvents(events: [NvShortVideoCore.NvEvent])
  @_Concurrency.MainActor(unsafe) open func remoteEvents()
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?)
  @_Concurrency.MainActor(unsafe) open func postEvent(name: NvShortVideoCore.NvEvent, action: Swift.Int?, actionTarget: Any?, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) open func receiveEvent(event _: NvShortVideoCore.NvEvent, action _: Swift.Int?, actionTarget _: ObjectiveC.NSObject?, sender _: ObjectiveC.NSObject?, parameter _: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NvShortVideoCore.NvEventViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension NvShortVideoCore.NvEditManager {
  @objc dynamic public var available: Swift.Bool {
    @objc get
  }
  @objc dynamic public func resumeTask()
  @objc dynamic public func setFetch(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public var projectId: Swift.String {
    @objc get
  }
  @objc dynamic public var editVideoFxPackageId: Swift.String? {
    @objc get
  }
  @objc dynamic public func applyFilter(packageId: Swift.String?, builtin: Swift.Bool, filterName: Swift.String?, intensity: Swift.Float) -> Swift.Bool
  @objc dynamic public var filterIntensity: Swift.Float {
    @objc get
    @objc set
  }
  @objc dynamic public func deleteDragFx(_ fx: NvStreamingSdkCore.NvsFx)
  @objc dynamic public func syncStickerData(_ sticker: NvStreamingSdkCore.NvsTimelineAnimatedSticker)
  @objc dynamic public func syncCaptionData(_ caption: NvStreamingSdkCore.NvsTimelineCaption)
  @objc dynamic public func addSticker(_ uuid: Swift.String, cover: Swift.String) -> NvStreamingSdkCore.NvsTimelineAnimatedSticker?
  @objc dynamic public var bultinVideoTypeFxName: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var originalTrackVolume: Swift.Float {
    @objc get
    @objc set
  }
  @objc dynamic public var muteOriginal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var muteMusic: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var musicTrackVolume: Swift.Float {
    @objc get
    @objc set
  }
  @objc dynamic public func videoTrackDesc() -> [NvStreamingSdkCore.NvsThumbnailSequenceDesc]
  @objc dynamic public var editMusicLoop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var editMusicInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc dynamic public func enableMusic(musicPath: Swift.String?, musicName: Swift.String?, musicId: Swift.String?, trimIn: Swift.Int64) -> Swift.Bool
  @objc dynamic public func updateCaption(imageModel: NvShortVideoCore.NvImageCaptionModel, sticker: NvStreamingSdkCore.NvsTimelineAnimatedSticker?, backupTextViewWidth: CoreFoundation.CGFloat, currentTextViewWidth: CoreFoundation.CGFloat) -> NvStreamingSdkCore.NvsTimelineAnimatedSticker?
  @objc dynamic public func saveProject(image: UIKit.UIImage) -> Swift.String?
}
public protocol NvTemplateReusable : AnyObject {
  static var nvReuseIdentifier: Swift.String { get }
}
extension NvShortVideoCore.NvTemplateReusable {
  public static var nvReuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) final public func nvRegister<T>(cellType: T.Type) where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvTemplateReusable
  @_Concurrency.MainActor(unsafe) final public func nvDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvTemplateReusable
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) final public func nvRegister<T>(cellType: T.Type) where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvTemplateReusable
  @_Concurrency.MainActor(unsafe) final public func nvDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvTemplateReusable
}
@objc @_inheritsConvenienceInitializers public class NvTransformModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var transformX: Swift.Double
  public var transformY: Swift.Double
  public var scaleX: Swift.Double
  public var scaleY: Swift.Double
  public var rotation: Swift.Double
  public var anchorX: Swift.Double
  public var anchorY: Swift.Double
  @objc override required dynamic public init()
  public func copy() -> NvShortVideoCore.NvTransformModel
  public func load(transFx: NvStreamingSdkCore.NvsVideoFx)
  public func load(transFx: NvStreamingSdkCore.NvsFx, timelineSize: CoreFoundation.CGSize, time: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum NvProEditType : Swift.Int {
  case none
  case effect
  case record
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NvProfessionalEditViewController : NvShortVideoCore.NvProEditViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let transition: NvShortVideoCore.NvProEditTransitioning
  @objc @_Concurrency.MainActor(unsafe) public init(type: NvShortVideoCore.NvProEditType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override public func leftNavButtonClick(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) override public func cleanBeforePop()
  @objc deinit
}
public let timelineFxTypeTag: Swift.String
public let timelineFxIndicateTag: Swift.String
public enum NvTimelineFxType : Swift.String {
  case filter
  case adjust
  case effect
  case watermark
  case plugin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NvStreamingSdkCore.NvsTimeline {
  public typealias NvTimelineFxInfo = (isBuiltin: Swift.Bool, builtinName: Swift.String)
  public var hasARScene: Swift.Bool {
    get
    set
  }
  @discardableResult
  public func appendFx(type: NvShortVideoCore.NvTimelineFxType, inPoint: Swift.Int64, outPoint: Swift.Int64, fxInfo: NvStreamingSdkCore.NvsTimeline.NvTimelineFxInfo, itemIndicate: Swift.String? = nil) -> NvStreamingSdkCore.NvsTimelineVideoFx?
  public func removeFx(type: NvShortVideoCore.NvTimelineFxType, fxInfo: NvStreamingSdkCore.NvsTimeline.NvTimelineFxInfo, itemIndicate: Swift.String? = nil)
  @discardableResult
  public func queryFx(for type: NvShortVideoCore.NvTimelineFxType, fxInfo: NvStreamingSdkCore.NvsTimeline.NvTimelineFxInfo, itemIndicate: Swift.String? = nil) -> NvStreamingSdkCore.NvsTimelineVideoFx?
  public func updateARSceneState()
  public static func checkBuddyFx(fx: NvStreamingSdkCore.NvsVideoFx) -> Swift.Bool
}
public enum NvToast {
  public static func showToastCoverAction()
  public static func showToastAction()
  public static func hiddenToastAction()
  public static func showToastAction(message: Swift.String)
  public static func showToast(message: Swift.String?, aLocationStr: Swift.String?, aShowTime: Foundation.TimeInterval)
  public static func showIndicatorToastAction(message: Swift.String)
  public static func showIndicatorToast(message: Swift.String?, aLocationStr: Swift.String?, aShowTime: Foundation.TimeInterval)
  public static func hiddenIndicatorToastAction()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvRotationScaleRectView : NvShortVideoCore.NvRectView {
  @_Concurrency.MainActor(unsafe) override public func setPoints(rect: NvShortVideoCore.NvRect?, subRectsPoint: [[CoreFoundation.CGPoint]] = [[CGPoint]]())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension Swift.String {
  public var length: Swift.Int {
    get
  }
  public var md5: Swift.String {
    get
  }
  public static func arbitrary() -> Swift.String
  public static func tabulate<A>(times: Swift.Int, transform: (Swift.Int) -> A) -> [A]
  public func relativePath() -> Swift.String?
  public func absolutePath() -> Swift.String
  public func bundleRelativePath() -> Swift.String?
  public func bundleAbsolutePath() -> Swift.String?
  public func nv_stringSize(font: UIKit.UIFont) -> CoreFoundation.CGSize
  public func nv_substring(form index: Swift.Int) -> Swift.String
  public func nv_substring(to index: Swift.Int) -> Swift.String
  public func toInt() -> Swift.Int
  public func toInt32() -> Swift.Int32
  public func toInt64() -> Swift.Int64
  public func toCGFloat() -> CoreFoundation.CGFloat
  public func toFloat() -> Swift.Float
  public func toDouble() -> Swift.Double
}
public enum NvCommandOperateType : Swift.Int {
  case redo
  case undo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NvCommandManagerDataSource : AnyObject {
  func currentOperateProjectData() -> (timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64)?
  func saveProjectData()
}
public protocol NvCommandManagerDelegate : AnyObject {
  func willPerformCommand(command: NvShortVideoCore.NvCommand, operateType: NvShortVideoCore.NvCommandOperateType)
  func hasFinishedCommand(command: NvShortVideoCore.NvCommand, operateType: NvShortVideoCore.NvCommandOperateType, revertAble: Swift.Bool, forwardAble: Swift.Bool, autoRefresh: Swift.Bool)
  func receivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
}
@objc open class NvCommandManager : ObjectiveC.NSObject {
  weak public var delegate: (any NvShortVideoCore.NvCommandManagerDelegate)?
  weak public var dataSource: (any NvShortVideoCore.NvCommandManagerDataSource)?
  public init(delegate: (any NvShortVideoCore.NvCommandManagerDelegate)?, dataSource: (any NvShortVideoCore.NvCommandManagerDataSource)?)
  public func clean()
  @discardableResult
  public func append(command: NvShortVideoCore.NvCommand, isTmp: Swift.Bool = false) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  public func undo() -> (command: NvShortVideoCore.NvCommand?, error: NvShortVideoCore.NvCommandError)
  public func redo() -> (command: NvShortVideoCore.NvCommand?, error: NvShortVideoCore.NvCommandError)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvWaterMarkModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var watermarkX: Swift.Float
  public var watermarkY: Swift.Float
  public var watermarkW: Swift.Float
  public var watermarkH: Swift.Float
  public var opacity: Swift.Float
  public var resourceId: Swift.String
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NvShortVideoCore.NvWaterMarkModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
extension NvShortVideoCore.NvAdjustColorModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers open class NvTimelineFxModel : NvShortVideoCore.MeicamFx {
  public var timelineFx: NvStreamingSdkCore.NvsTimelineVideoFx?
  public var itemIndicate: Swift.String
  public func copyModel() -> NvShortVideoCore.NvTimelineFxModel
  @objc required dynamic public init()
  override public init(addingMethod: NvShortVideoCore.MeicamFxAddingMethodType = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension NvShortVideoCore.NvTimelineModel {
  public func getProjectResources() -> [Swift.String]
}
public enum NvBackgroundFxType : Swift.Int, Swift.Codable {
  case none
  case color
  case image
  case blur
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvBackgroundFxModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var backgroundType: NvShortVideoCore.NvBackgroundFxType
  public var imageFileResourceId: Swift.String
  public var radius: Swift.Double
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers final public class NvPropertyBackgroundFxModel : NvShortVideoCore.NvBackgroundFxModel {
  final public var colorB: Swift.Float
  final public var colorG: Swift.Float
  final public var colorR: Swift.Float
  final public func updateFxParam() -> NvShortVideoCore.NvFxUpdateItem
  final public func load(fx: NvStreamingSdkCore.NvsFx)
  @objc required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func propertyBackgroundFxModel() -> NvShortVideoCore.NvPropertyBackgroundFxModel
}
@objc public enum MeicamMediaType : Swift.Int {
  case unknown = 0
  case image = 1
  case video = 2
  case audio = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NvFileSourceType : Swift.Int {
  case file = 0
  case album
  case bundleFile
  case mediaLibrary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NvSourceRelatedFileType : Swift.Int {
  case reverse
  case file
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvSourceM3u8Info : ObjectiveC.NSObject {
  @objc public var imageExtension: Swift.String
  @objc public var urlPrefix: Swift.String
  @objc public var interval: Swift.Int64
  @objc public var leftChannelUrl: Swift.String
  @objc public var rightChannelUrl: Swift.String
  @objc public var duration: Swift.Int64
  @objc public var height: Swift.Int
  @objc public var width: Swift.Int
  public func copyModel() -> NvShortVideoCore.NvSourceM3u8Info
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvSourceUploadInfo : ObjectiveC.NSObject {
  @objc public var remotePath: Swift.String
  @objc public var m3u8FileName: Swift.String
  @objc public var netResourceId: Swift.String
  @objc public var netObjectId: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NvSourceFileInfo : ObjectiveC.NSObject {
  @objc public var path: Swift.String
  @objc public var uploadInfo: NvShortVideoCore.NvSourceUploadInfo?
  @objc public var m3u8Info: NvShortVideoCore.NvSourceM3u8Info?
  @objc public var duration: Swift.Int64
  @objc public var fileSourceType: NvShortVideoCore.NvFileSourceType
  @objc public var fileSize: Swift.UInt64
  @objc public var imageWidth: CoreFoundation.CGFloat
  @objc public var imageHeight: CoreFoundation.CGFloat
  public init(localFilePath: Swift.String)
  @objc override dynamic public init()
  public var operationalPath: Swift.String {
    get
  }
  @objc deinit
}
@objc public protocol NvEffectTransitioningProtocal : ObjectiveC.NSObjectProtocol {
  @objc func liveWindowFrame() -> CoreFoundation.CGRect
  @objc func receive(liveWindow: NvStreamingSdkCore.NvsLiveWindow)
  @objc var liveWindow: NvStreamingSdkCore.NvsLiveWindow? { get }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class NvProEditTransitioning : ObjectiveC.NSObject, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NvEditFileItem : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String
  @objc public var albumAsset: Photos.PHAsset?
  @objc public var speed: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NvEditMusicFileItem : ObjectiveC.NSObject {
  @objc public var musicPath: Swift.String
  @objc public var trimIn: Swift.Int64
  @objc public var trimOut: Swift.Int64
  @objc public var musicName: Swift.String
  @objc public var musicId: Swift.String
  @objc public var loop: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol NvEditManagerDelegate {
  @objc optional func didSeekingTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline, position: Swift.Int64)
  @objc optional func didPlaybackTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline, position: Swift.Int64)
  @objc optional func didPlaybackEOF(_ timeline: NvStreamingSdkCore.NvsTimeline)
  @objc optional func didStreamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @objc optional func didCompileCompleted(_ timeline: NvStreamingSdkCore.NvsTimeline, isHardwareEncoding: Swift.Bool, errorType: Swift.Int32, errorString: Swift.String?, flags: Swift.Int32)
  @objc optional func didCompileFloatProgress(progress: Swift.Float)
  @objc optional func didChangedEditMusic(music: Swift.String?)
}
public typealias NvEditManagerSeekTask = () -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class NvEditManager : ObjectiveC.NSObject {
  @objc public var streamingContext: NvStreamingSdkCore.NvsStreamingContext {
    @objc get
  }
  @objc public var timeline: NvStreamingSdkCore.NvsTimeline {
    @objc get
  }
  @objc public var autoPlayWhenBecomeActive: Swift.Bool
  @objc public var inPreviewRange: Swift.Bool
  public var taskAfterSeek: [NvShortVideoCore.NvEditManagerSeekTask]
  @objc public var currentTime: Swift.Int64 {
    @objc get
  }
  @objc public var frameRate: CoreFoundation.CGFloat
  @objc public var engineState: NvStreamingSdkCore.NvsStreamingEngineState {
    @objc get
  }
  @objc public var selectedFx: NvStreamingSdkCore.NvsFx?
  @objc override dynamic public init()
  @objc public func appendSeekBlock(completion: @escaping () -> Swift.Void)
  @objc public func appendDelegate(_ delegate: any NvShortVideoCore.NvEditManagerDelegate)
  @objc public func removeDelegate(_ delegate: any NvShortVideoCore.NvEditManagerDelegate)
  @objc public func addObservers()
  @objc public func removeObserver()
  @objc public func play(clean: Swift.Bool)
  @objc public func play()
  @objc public func replay()
  @objc public func preview(start: Swift.Int64, end: Swift.Int64)
  @objc public func refresh(clean: Swift.Bool)
  @objc public func refresh()
  @objc public func seekTimeline(position: Swift.Int64)
  @objc public func clearCachedResources()
  @objc public func compileCurrentTimeline() -> Swift.String?
  @objc deinit
}
extension NvShortVideoCore.NvEditManager : NvStreamingSdkCore.NvsStreamingContextDelegate {
  @objc dynamic public func didCompileCompleted(_ timeline: NvStreamingSdkCore.NvsTimeline!, isHardwareEncoding: Swift.Bool, errorType: Swift.Int32, errorString: Swift.String!, flags: Swift.Int32)
  @objc dynamic public func didCompileProgress(_: NvStreamingSdkCore.NvsTimeline!, progress: Swift.Int32)
  @objc dynamic public func didStreamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @objc dynamic public func didSeekingTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline, position: Swift.Int64)
  @objc dynamic public func didPlaybackTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline, position: Swift.Int64)
  @objc dynamic public func didPlaybackEOF(_ timeline: NvStreamingSdkCore.NvsTimeline)
}
extension NvShortVideoCore.NvsKeyframe {
  public enum Transform : Swift.String, Swift.CaseIterable {
    case transX
    case transY
    case scaleX
    case scaleY
    case rotateZ
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.Transform]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.Transform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Opacity : Swift.String, Swift.CaseIterable {
    case opacity
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.Opacity]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.Opacity] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Mask : Swift.String, Swift.CaseIterable {
    public static let inverseRegionKey: Swift.String
    case feather
    case region
    public static var identify: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [NvShortVideoCore.NvsKeyframe.Mask]
    public typealias RawValue = Swift.String
    public static var allCases: [NvShortVideoCore.NvsKeyframe.Mask] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VideoFxIdentify : Swift.String {
    case transform
    case mask
    case opacity
    case plugin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension NvStreamingSdkCore.NvsVideoClip {
  @discardableResult
  public func queryVideoFxTransform(timelinePos: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (isExisted: Swift.Bool, pos: Swift.Int64, transform: NvShortVideoCore.NvTransformModel)
  public func queryVideoFxMask(timelinePos: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (isExisted: Swift.Bool, pos: Swift.Int64, mask: NvShortVideoCore.NvMaskModel)
  public func queryVideoFxOpacity(timelinePos: Swift.Int64, timeAdsorbScope: Swift.Int64) -> (isExisted: Swift.Bool, pos: Swift.Int64, opacity: Swift.Double)
  public func queryVideoFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicates: [NvShortVideoCore.MeicamFxParam] = []) -> [Swift.String : [NvShortVideoCore.MeicamFxParam]]
  public func queryVideoFxAllReverseKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicates: [NvShortVideoCore.MeicamFxParam] = []) -> [Swift.String : [NvShortVideoCore.MeicamFxParam]]
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func appendVideoFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam], isAuto: Swift.Bool)
  public func updateVideoFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam])
  public func recoverVideoFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]])
  public func removeVideoFxKeyframe(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, fxParams: [NvShortVideoCore.MeicamFxParam])
  public func removeVideoFxAllKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, predicates: [Swift.String] = [])
  public func updateVideoFxTrackKeyframes(fx: NvStreamingSdkCore.NvsFx, type: NvShortVideoCore.NvsKeyframe.FxType, keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]], isTrimLeft: Swift.Bool, inPoint: Swift.Int64, outPoint: Swift.Int64, timeDelta: Swift.Int64)
}
extension NvStreamingSdkCore.NvsVideoClip {
  public func updateVideoFxKeyframeCurve(type: NvShortVideoCore.NvsKeyframe.FxType, curveType: Swift.Int, keyframePos: Swift.Int64, leftControl: CoreFoundation.CGPoint, rightControl: CoreFoundation.CGPoint, predicate: (indicate: Swift.String, keyframe: NvShortVideoCore.MeicamFxParam)?)
}
@objc public protocol NvTimeVideoFxDataSourceDelegate : ObjectiveC.NSObjectProtocol {
  @objc func selectedStateChanged(_ packageId: Swift.String?)
  @objc func rollbackStateChanged(revertAble: Swift.Bool, forwardAble: Swift.Bool)
}
@objc @objcMembers public class NvTimeVideoFxDataSource : ObjectiveC.NSObject {
  @objc weak public var delegate: (any NvShortVideoCore.NvTimeVideoFxDataSourceDelegate)?
  @objc public init(editManager: NvShortVideoCore.NvEditManager)
  @objc public func addFx(withDisplayName displayName: Swift.String, packageId: Swift.String, builtin: Swift.Bool) -> [Swift.String : Any]?
  @objc public func revert()
  @objc public func forward()
  @objc public func removeCurrentFx()
  @objc public func cancel()
  @objc public func commit()
  @objc public func deselect()
  @objc deinit
}
extension NvShortVideoCore.NvTimeVideoFxDataSource : NvShortVideoCore.NvSingleTrackViewDataSource {
  public func trackClips() -> [any NvShortVideoCore.NvUnionModel]
  public func bgColorForItem(_ item: any NvShortVideoCore.NvUnionModel) -> UIKit.UIColor
  @objc dynamic public func selectedItemIdentifier() -> Swift.String?
  @objc dynamic public func isDragEnabled() -> Swift.Bool
  @objc dynamic public func isTapEnabled() -> Swift.Bool
}
extension NvShortVideoCore.NvTimeVideoFxDataSource : NvShortVideoCore.NvSingleTrackViewDelegate {
  public func trackViewDidTapItem(_ item: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
  public func trackViewRangeSelectViewDragEditBegin(_ item: any NvShortVideoCore.NvUnionModel)
  public func trackViewRangeSelectViewDragEditChanged(time: Swift.Int64, isLeft: Swift.Bool, item: any NvShortVideoCore.NvUnionModel)
  public func trackViewRangeSelectViewDragEditEnd(_ item: any NvShortVideoCore.NvUnionModel)
  @objc dynamic public func trackViewRangeSelectViewTimeDragChanged(time: Swift.Int64)
  @objc dynamic public func trackViewRangeSelectViewTimeDragEnd(time: Swift.Int64)
}
public protocol NvRecordManagerDelegate : AnyObject {
  func captureOutputUpdate(sampleData: Foundation.NSMutableData, mBitsPerChannel: Swift.UInt32, maxSample: Foundation.NSNumber, duration: Swift.Int64, playbackPosition: Swift.Int64)
  func recordFinished(filePath: Swift.String, sampleData: Foundation.NSMutableData, mBitsPerChannel: Swift.UInt32, maxSample: Foundation.NSNumber, duration: Swift.Int64)
}
extension NvShortVideoCore.NvRecordManager {
  public enum NvRecordError : Swift.Int {
    case noError
    case notDetermined
    case denied
    case inputDeviceError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc public class NvRecordManager : ObjectiveC.NSObject {
  public var isRecording: Swift.Bool {
    get
  }
  public var audioFilePath: Swift.String {
    get
  }
  public var sampleValuesUpdateInterval: Swift.Int64
  public var dataParse: NvShortVideoCore.NvWaveDataParse?
  public init(contex: NvStreamingSdkCore.NvsStreamingContext, timeline: NvStreamingSdkCore.NvsTimeline, delegate: any NvShortVideoCore.NvRecordManagerDelegate)
  @objc deinit
}
extension NvShortVideoCore.NvRecordManager {
  public func startRecord(with outputPath: Swift.String, isMute: Swift.Bool, currentTime: Swift.Int64, maxRecordDuration: Swift.Int64) -> NvShortVideoCore.NvRecordManager.NvRecordError
  public func stop(handle: @escaping () -> Swift.Void)
}
extension NvShortVideoCore.NvRecordManager : AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
}
extension NvShortVideoCore.NvRecordManager : NvStreamingSdkCore.NvsStreamingContextDelegate {
  @objc dynamic public func didSeekingTimelinePosition(_ timeline: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64)
  @objc dynamic public func didStreamingEngineStateChanged(_ state: NvStreamingSdkCore.NvsStreamingEngineState)
  @objc dynamic public func didPlaybackTimelinePosition(_: NvStreamingSdkCore.NvsTimeline!, position: Swift.Int64)
  @objc dynamic public func didPlaybackEOF(_: NvStreamingSdkCore.NvsTimeline!)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NvRefreshFooter : NvShortVideoCore.NvRefreshComponent {
  @objc @_Concurrency.MainActor(unsafe) open var ignoredScrollViewContentInsetBottom: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override open func configScrollViewBounce(_ newSuperview: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func endRefreshingWithNoMoreData()
  @objc @_Concurrency.MainActor(unsafe) open func resetNoMoreData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvCompoundCaptionIndexModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  public var fontFamily: Swift.String
  public var defaultFontFamily: Swift.String
  public var isBlod: Swift.Bool
  public var captionText: Swift.String
  public var textColor: NvShortVideoCore.MeicamColor
  public var isDrawOutline: Swift.Bool
  public var defaultOutlineColor: NvShortVideoCore.MeicamColor
  public var outlineColor: NvShortVideoCore.MeicamColor
  public var defaultOutlineWidth: Swift.Float
  public var outlineWidth: Swift.Float
  public var backgroundColor: NvShortVideoCore.MeicamColor?
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NvShortVideoCore.NvCompoundCaptionIndexModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers public class NvComCaptionModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var comCaption: NvStreamingSdkCore.NvsTimelineCompoundCaption?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var compoundCaptionArray: [NvShortVideoCore.NvCompoundCaptionIndexModel]
  public var compoundCaptionStylePackageId: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]]
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadCaption(comCaption: NvStreamingSdkCore.NvsTimelineCompoundCaption)
  public func loadTrackCaption(comCaption: NvStreamingSdkCore.NvsTrackCompoundCaption)
  public func loadCaptionFx(comCaption: NvStreamingSdkCore.NvsCompoundCaption)
  @discardableResult
  public func buildComCaption(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvComCaptionModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow: NvStreamingSdkCore.NvsLiveWindow, timelineTime: Swift.Int64, isTimelineVal: Swift.Bool) -> NvShortVideoCore.NvRect?
  @discardableResult
  public func isSupportKeyframe(_: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func getTransformModel(timelineTime: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  public func setTransformModel(model: NvShortVideoCore.NvTransformModel, anchor: CoreFoundation.CGPoint, timelineTime: Swift.Int64, timeAdsorbScope: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify _: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvComCaptionModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
public enum NvCaptionOperationType : Swift.Int, Swift.Codable {
  case common
  case subtitle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NvCaptionModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var caption: NvStreamingSdkCore.NvsTimelineCaption?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var operationType: NvShortVideoCore.NvCaptionOperationType
  public var isTmpModel: Swift.Bool
  public var isNoModular: Swift.Bool
  public var captionStylePackageId: Swift.String
  public var imageCaption: NvShortVideoCore.NvImageCaptionModel?
  public var fontSize: Swift.Float
  public var isPanoramic: Swift.Bool
  public var captionText: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var textColor: NvShortVideoCore.MeicamColor
  public var captionSpace: Swift.Float
  public var lineSpace: Swift.Float
  public var fontFamily: Swift.String
  public var isBlod: Swift.Bool
  public var isItalic: Swift.Bool
  public var isShadow: Swift.Bool
  public var isDrawOutline: Swift.Bool
  public var shadowColor: NvShortVideoCore.MeicamColor
  public var shadowOffset: NvShortVideoCore.MeicamPoint
  public var outlineColor: NvShortVideoCore.MeicamColor
  public var outlineWidth: Swift.Float
  public var textAlignment: Swift.Int
  public var backgroundColor: NvShortVideoCore.MeicamColor
  public var backgroundRadius: Swift.Float
  public var bubbleUuid: Swift.String
  public var richWordUuid: Swift.String
  public var marchInAnimationUuid: Swift.String
  public var marchOutAnimationUuid: Swift.String
  public var combinationAnimationUuid: Swift.String
  public var marchInAnimationDuration: Swift.Int32
  public var marchOutAnimationDuration: Swift.Int32
  public var combinationAnimationDuration: Swift.Int32
  public var secondaryColor: NvShortVideoCore.MeicamColor
  public var keyframes: [Swift.String : [NvShortVideoCore.MeicamFxParam]]
  public var isUserChange: Swift.Bool
  public var captionOpacity: Swift.Float
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func loadCaption(caption: NvStreamingSdkCore.NvsTimelineCaption)
  public func loadTrackCaption(caption: NvStreamingSdkCore.NvsTrackCaption)
  public func loadCaptionFx(caption: NvStreamingSdkCore.NvsCaption)
  @discardableResult
  public func buildCaption(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvCaptionModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow: NvStreamingSdkCore.NvsLiveWindow, timelineTime: Swift.Int64, isTimelineVal: Swift.Bool) -> NvShortVideoCore.NvRect?
  @discardableResult
  public func isSupportKeyframe(_: Swift.String) -> Swift.Bool
  @discardableResult
  public func isExistKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getAllKeyframeModel(_ keyframeIdentify: Swift.String) -> [NvShortVideoCore.MeicamFxParam]
  @discardableResult
  public func appendKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func removeKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify _: Swift.String) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func getTransformModel(timelineTime: Swift.Int64) -> NvShortVideoCore.NvTransformModel?
  @discardableResult
  public func setTransformModel(model: NvShortVideoCore.NvTransformModel, anchor: CoreFoundation.CGPoint, timelineTime: Swift.Int64, timeAdsorbScope: Swift.Int64) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func isEnableEditCurveKeyframe(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> Swift.Bool
  @discardableResult
  public func getEditCurveKeyframes(_ timelinePos: Swift.Int64, keyframeIdentify: Swift.String) -> (before: NvShortVideoCore.MeicamFxParam, after: NvShortVideoCore.MeicamFxParam)?
  @discardableResult
  public func setKeyframeBezierCurve(keyframeIdentify _: Swift.String, keyframePos: Swift.Int64, updateCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo, lastCurveInfo: NvShortVideoCore.NvsKeyframeCurveInfo) -> NvShortVideoCore.NvCommand?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState: NvShortVideoCore.NvEffectLinkage.ChangeAction, model: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvCaptionModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
public typealias MeicamParserParamItem = (key: Swift.String, type: NvShortVideoCore.MeicamFxParamType, supportKeyframe: Swift.Bool)
public protocol MeicamFxParserProtocal {
  var params: [NvShortVideoCore.MeicamParserParamItem] { get }
  var fileParams: [Swift.String] { get }
}
extension NvShortVideoCore.MeicamFxParserProtocal {
  public var fileParams: [Swift.String] {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class NvAlbumAsset : ObjectiveC.NSObject {
  public var isShowLayer: Swift.Bool
  public var number: Swift.Int
  @objc public var asset: Photos.PHAsset?
  public var indexPath: Foundation.IndexPath?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvAlbumItem : ObjectiveC.NSObject {
  public var collectionList: [NvShortVideoCore.NvAlbumAsset]
  public var startDate: Foundation.Date?
  public var isSelectAll: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvAlbumTemplateItem : ObjectiveC.NSObject {
  public var asset: Photos.PHAsset?
  public var trackIndex: Swift.Int32
  public var clipIndex: Swift.Int32
  public var footageId: Swift.String
  public var duration: Swift.Int64
  public var bestDuration: Swift.Int64
  public var index: Swift.Int
  public var isSelected: Swift.Bool
  public var isGrouped: Swift.Bool
  public var groupId: Swift.Int
  public var needReverse: Swift.Bool
  public var isReversed: Swift.Bool
  public var reversePath: Swift.String
  public var type: Swift.UInt32
  public var isImage: Swift.Bool
  public var timelineClipInfos: [NvShortVideoCore.NvTimelineClip]
  public func copyItem() -> NvShortVideoCore.NvAlbumTemplateItem
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NvTimelineClip : ObjectiveC.NSObject {
  public var trackIndex: Swift.Int32
  public var clipIndex: Swift.Int32
  public var inPoint: Swift.Int64
  public var isEmptyFootage: Swift.Bool
  public init(trackIndex: Swift.Int32, clipIndex: Swift.Int32, inPoint: Swift.Int64, isEmptyFootage: Swift.Bool)
  public func copyObjc() -> NvShortVideoCore.NvTimelineClip
  @objc deinit
}
extension NvShortVideoCore.NvEditManager {
  @objc dynamic public var audioComilePath: Swift.String {
    @objc get
  }
  @objc dynamic public func timelineForAutoCaption(context: NvStreamingSdkCore.NvsStreamingContext) -> NvStreamingSdkCore.NvsTimeline?
  @objc dynamic public var hasRecognition: Swift.Bool {
    @objc get
  }
  @objc dynamic public func removeAllRecognitionCaptions()
  @objc dynamic public func removeRecognition(itemIndicate: Swift.String)
  @objc dynamic public func addRecognition(captions: [NvShortVideoCore.NvRecognitionTextItem], languageIdentifier: Swift.String?)
  @objc dynamic public func recognitionEditCaptions() -> [NvShortVideoCore.NvRecognitionTextEditItem]
  @objc dynamic public func recoverRecognition(captions: [NvShortVideoCore.NvRecognitionTextEditItem])
  @objc dynamic public func recognitionStyle() -> NvShortVideoCore.NvImageCaptionModel?
  @objc dynamic public func recognitionApply(model: NvShortVideoCore.NvImageCaptionModel?)
  @objc dynamic public func recognitionApply(color: Swift.String)
  @objc dynamic public func recognitionApply(style: NvShortVideoCore.NvImageCaptionStyle)
  @objc dynamic public func recognitionApply(fontPath: Swift.String?, fontUuid: Swift.String?, fontFamily: Swift.String?)
  @objc dynamic public func scaleRecognitionCaption(_ scale: Swift.Float)
  @objc dynamic public func translateRecognitionCaption(_ translationOffset: CoreFoundation.CGPoint)
}
@_hasMissingDesignatedInitializers public class MeicamMasterKeyer : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
public typealias NvTemplateRequestSuccess = (_ array: Swift.Array<Any>, _ hasMore: Swift.Bool, _ responseObject: ObjectiveC.NSObject) -> Swift.Void
public typealias NvTemplateRequestFailure = (_ error: Foundation.NSError?) -> Swift.Void
public typealias NvTemplateRequestDownloadProgress = (_ progress: Swift.Float) -> Swift.Void
public enum CategoricalName : Swift.String {
  case Template
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PackExtensionSet : Swift.String {
  case Template
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NvTemplateMaterialCenterDelegate {
  @objc func templateRequestListCategoryWith(type: ObjectiveC.NSInteger, optionalRequestParameters: Foundation.NSMutableDictionary, success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc func templateRequestListDataWith(type: ObjectiveC.NSInteger, category: ObjectiveC.NSInteger, kind: ObjectiveC.NSInteger, optionalRequestParameters: Foundation.NSMutableDictionary, pageIndex: ObjectiveC.NSInteger, success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc func templateDownloadMaterial(uuid: Swift.String, url: Swift.String, targetFolder: Swift.String, optParameters: Foundation.NSMutableDictionary, progress: @escaping NvShortVideoCore.NvTemplateRequestDownloadProgress, success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc func autoCutListMaterial(param: [Swift.String : Any], success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure) -> Foundation.URLSessionDataTask
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NvTemplateMaterialCenter : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NvShortVideoCore.NvTemplateMaterialCenter
  @objc weak final public var delegate: (any NvShortVideoCore.NvTemplateMaterialCenterDelegate)?
  final public var autoCutTask: Foundation.URLSessionDataTask?
  @discardableResult
  final public func getFolderName(name: Swift.String) -> Swift.String
  @discardableResult
  final public func configTemplatePreview(fileName: Swift.String, templateId: Swift.String, templateVersion: Swift.Int, returnedDict: Foundation.NSMutableDictionary) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvTemplateMaterialCenter {
  @objc final public func findMaterialCategoryType(type: ObjectiveC.NSInteger, succesddds: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc final public func requestList(type: ObjectiveC.NSInteger, category: ObjectiveC.NSInteger, kind: ObjectiveC.NSInteger, pageIndex: ObjectiveC.NSInteger, succesddds: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc final public func downloadMaterial(uuid: Swift.String, url: Swift.String, targetFolder: Swift.String, optParameters: Foundation.NSMutableDictionary, progress: @escaping NvShortVideoCore.NvTemplateRequestDownloadProgress, success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
  @objc final public func autoCutListMaterial(param: [Swift.String : Any], success: @escaping NvShortVideoCore.NvTemplateRequestSuccess, failure: @escaping NvShortVideoCore.NvTemplateRequestFailure)
}
extension NvStreamingSdkCore.NvsVideoClip {
  @discardableResult
  public func resetAudioTypeFx(bultinAudioFxName: Swift.String?) -> NvStreamingSdkCore.NvsAudioFx?
  public func audioTypePackageId() -> Swift.String?
}
@objc @_inheritsConvenienceInitializers public class NvGCDGroup : ObjectiveC.NSObject {
  public func addSubWoekItem(callback: @escaping (_ group: Dispatch.DispatchGroup) -> Swift.Void)
  public func start(completion: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvCommand {
  public enum TimelineFxType : Swift.String {
    case package
    case builtin
    case aspectRatio
    case `undef`
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol NvCommandTimelineUpdateInfo : NvShortVideoCore.NvCommandUpdateInfo {
  var fxType: NvShortVideoCore.NvCommand.TimelineFxType { get set }
  var duration: [Swift.String : Swift.Int64] { get set }
  var updateItem: NvShortVideoCore.NvTimelineFxUpdateItem? { get set }
  var backupItem: NvShortVideoCore.NvTimelineFxUpdateItem? { get set }
}
@objc open class NvTimelineFxUpdateItem : ObjectiveC.NSObject {
  public var fxType: NvShortVideoCore.NvCommand.TimelineFxType
  public var builtinFxType: NvShortVideoCore.NvCommand.BuiltinAction
  public var packageFxType: NvShortVideoCore.NvCommand.PackagedAction
  public var actionType: Swift.Int
  public var itemIndicate: Swift.String
  public var paramsInfo: [Swift.String : Any]
  public var backupInfo: [Swift.String : Any]
  public init(fxType: NvShortVideoCore.NvCommand.TimelineFxType, packageType: NvShortVideoCore.NvCommand.PackagedAction, actionType: Swift.Int, itemIndicate: Swift.String)
  public init(fxType: NvShortVideoCore.NvCommand.TimelineFxType, builtinType: NvShortVideoCore.NvCommand.BuiltinAction, actionType: Swift.Int, itemIndicate: Swift.String)
  public func copyItem() -> NvShortVideoCore.NvTimelineFxUpdateItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvTimelineFxUpdateInfo : ObjectiveC.NSObject, NvShortVideoCore.NvCommandTimelineUpdateInfo {
  public var fxType: NvShortVideoCore.NvCommand.TimelineFxType
  public var duration: [Swift.String : Swift.Int64]
  public var itemIndicate: Swift.String
  public var updateItem: NvShortVideoCore.NvTimelineFxUpdateItem?
  public var backupItem: NvShortVideoCore.NvTimelineFxUpdateItem?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NvTimelineCommand : ObjectiveC.NSObject {
  public static func command(withTitle title: Swift.String, updateItem: NvShortVideoCore.NvTimelineFxUpdateItem, targetTime: Swift.Int64 = -1, originDuration: Swift.Int64 = -1, isExtend: Swift.Bool = true, tailorTrackChangeDuration: Swift.Bool = false) -> NvShortVideoCore.NvCommand
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvTimelineCommand {
  @discardableResult
  public static func checkMaxTrackDuration(target: any NvShortVideoCore.NvUnionModel, timelineModel: NvShortVideoCore.NvTimelineModel, action: NvShortVideoCore.NvCommand.PackagedAction) -> (inPoint: Swift.Int64, outPoint: Swift.Int64)?
}
extension NvShortVideoCore.NvTimelineCommand {
  @discardableResult
  public static func addSticker(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, packageId: Swift.String, coverImagePath: Swift.String, isCustomSticker: Swift.Bool) -> NvShortVideoCore.NvStickerModel?
  public static func loadAnimationSticker(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, stickerModel: inout NvShortVideoCore.NvStickerModel, isCopy: Swift.Bool)
  public static func updateInAnimationSticker(stickerModel: NvShortVideoCore.NvStickerModel)
  public static func updateOutAnimationSticker(stickerModel: NvShortVideoCore.NvStickerModel)
  public static func updatePeriodAnimationSticker(stickerModel: NvShortVideoCore.NvStickerModel)
  public static func updateAnimationStickerDuration(stickerModel: NvShortVideoCore.NvStickerModel, animationType: Swift.Int)
  public static func updateAnimationStickerPosition(timeline: NvStreamingSdkCore.NvsTimeline, stickerModel: NvShortVideoCore.NvStickerModel, animationType: Swift.Int)
  public static func updateStickerTrack(model: NvShortVideoCore.NvStickerModel, keyframes: [Swift.String : Any], backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
  public static func updateStickerAnimationDuration(stickerModel: NvShortVideoCore.NvStickerModel, isTrimLeft: Swift.Bool)
}
extension NvShortVideoCore.NvTimelineCommand {
  public static func addCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, text: Swift.String, captionStylePackageId: Swift.String) -> NvShortVideoCore.NvCaptionModel?
  public static func deleteCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, captionModel: NvShortVideoCore.NvCaptionModel)
  public static func updateCaption(_ caption: NvStreamingSdkCore.NvsTimelineCaption, model: NvShortVideoCore.NvCaptionModel)
  public static func loadCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, captionModel: inout NvShortVideoCore.NvCaptionModel, isCopy _: Swift.Bool)
  @discardableResult
  public static func addAICaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, text: Swift.String, inPoint: Swift.Int64, duration: Swift.Int64, previewTrackIndex: Swift.Int, trackIndex: Swift.Int) -> NvShortVideoCore.NvCaptionModel?
  public static func recaluAICaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, modularCaption: NvStreamingSdkCore.NvsTimelineCaption?, previewTrackIndex: Swift.Int)
  public static func removeAICaptions(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel)
  public static func queryAICaptions(model: NvShortVideoCore.NvTimelineModel) -> [NvShortVideoCore.NvCaptionModel]
  public static func recaluCaptionRadius(caption: NvStreamingSdkCore.NvsTimelineCaption?) -> Swift.Float
  public static func updateInAnimationCaption(captionModel: NvShortVideoCore.NvCaptionModel)
  public static func updateOutAnimationCaption(captionModel: NvShortVideoCore.NvCaptionModel)
  public static func updatePeriodAnimationCaption(captionModel: NvShortVideoCore.NvCaptionModel)
  public static func updateAnimationCaptionDuration(captionModel: NvShortVideoCore.NvCaptionModel, animationType: Swift.Int)
  public static func previewCaptionAnimation(captionModel: NvShortVideoCore.NvCaptionModel, animationType: Swift.Int)
  public static func updateAnimationCaptionPosition(timeline: NvStreamingSdkCore.NvsTimeline, captionModel: NvShortVideoCore.NvCaptionModel, animationType: Swift.Int)
  public static func updateCaptionTrack(model: NvShortVideoCore.NvCaptionModel, keyframes: [Swift.String : Any], backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
  public static func updateCaptionAnimationDuration(captionModel: NvShortVideoCore.NvCaptionModel, isTrimLeft: Swift.Bool)
}
extension NvShortVideoCore.NvTimelineCommand {
  public static func addComCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, packageId: Swift.String) -> NvShortVideoCore.NvComCaptionModel?
  public static func deleteComCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, comCaptionModel: NvShortVideoCore.NvComCaptionModel)
  public static func updateComCaption(_ comCaption: NvStreamingSdkCore.NvsTimelineCompoundCaption, model: NvShortVideoCore.NvComCaptionModel)
  public static func loadComCaption(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, comCaptionModel: inout NvShortVideoCore.NvComCaptionModel, isCopy _: Swift.Bool)
  public static func updateComCaptionTrack(model: NvShortVideoCore.NvComCaptionModel, keyframes: [Swift.String : Any], backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
}
extension NvShortVideoCore.NvTimelineCommand {
  @discardableResult
  public static func addFilter(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, packageId: Swift.String, packageName: Swift.String, packageNameEn: Swift.String, intensity: Swift.Float) -> (code: Swift.Int, model: NvShortVideoCore.NvFilterModel?)
  public static func deleteFilter(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, filterModel: NvShortVideoCore.NvFilterModel)
  public static func addEffect(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64, packageId: Swift.String, packageName: Swift.String, packageNameEn: Swift.String, isBuiltinFx: Swift.Bool) -> (code: Swift.Int, model: NvShortVideoCore.NvEffectModel?)
  public static func deleteEffect(timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, effectModel: NvShortVideoCore.NvEffectModel)
  public static func updateFilterTrack(model: NvShortVideoCore.NvFilterModel, backupInfo: [Swift.String : Any]) -> [Swift.String : Any]
  public static func updateEffectTrack(model: NvShortVideoCore.NvEffectModel, backupInfo: [Swift.String : Any], timeline: NvStreamingSdkCore.NvsTimeline)
}
@_hasMissingDesignatedInitializers public class MeicamWaterRipple : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  public var fileParams: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamDistortion : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamNoiseWave : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamSignalGenerator : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamCameraDistortion : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamLiquefaction : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamVortex : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamOpticalCompensation : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeicamPageCurl : NvShortVideoCore.MeicamFxParserProtocal {
  public static var fxName: Swift.String {
    get
  }
  public var params: [NvShortVideoCore.MeicamParserParamItem] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class VideoEffectUpdateInfo : NvShortVideoCore.NvCommandUpdateInfo {
  public var actionType: NvShortVideoCore.NvCommand.ActionType
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var updateFxModel: NvShortVideoCore.MeicamFx
  public var backupFxModel: NvShortVideoCore.MeicamFx?
  @objc deinit
}
open class NvVideoEffectCommand : NvShortVideoCore.NvCommand {
  public var updateParam: NvShortVideoCore.VideoEffectUpdateInfo
  public var videoClip: NvStreamingSdkCore.NvsVideoClip?
  public var videoFx: NvStreamingSdkCore.NvsVideoFx?
  public var isValidity: Swift.Bool
  public init(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel, videoClip: NvStreamingSdkCore.NvsVideoClip, fxType: NvShortVideoCore.NvVideoClipFxType, fxIndicate: Swift.String? = nil)
  public static func fxUpdateParamRedoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?)
  public static func fxUpdateParamUndoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, backupInfo _: [Swift.String : Any]?, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos _: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  public static func updateParamAction(itemIndicate: Swift.String, trackIndex: Swift.Int, actionType: NvShortVideoCore.NvCommand.ActionType, updateParam: NvShortVideoCore.VideoEffectUpdateInfo, timeline _: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, undo: Swift.Bool) -> NvShortVideoCore.NvCommandError
  override public func commit() -> Swift.Bool
  @objc deinit
}
open class NvVideoEffectSetEditCommand : NvShortVideoCore.NvCommand {
  public var isValidity: Swift.Bool
  public init(title: Swift.String, command: NvShortVideoCore.NvVideoEffectCommand)
  public func reloadCommandSet(array: [NvShortVideoCore.NvVideoEffectCommand])
  override public func commit() -> Swift.Bool
  public static func clipFxSetUpdateParamRedoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, backup: [Swift.String : Any]?, impact: NvShortVideoCore.NvCommandImpact?)
  public static func clipFxSetUpdateParamUndoAction(inputParam: any NvShortVideoCore.NvCommandUpdateInfo, backupInfo _: [Swift.String : Any]?, timeline: NvStreamingSdkCore.NvsTimeline, model: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64) -> (error: NvShortVideoCore.NvCommandError, impact: NvShortVideoCore.NvCommandImpact?)
  @objc deinit
}
extension NvShortVideoCore.NvAudioClipCommand {
  public class func settleBackupItems(clipModel: NvShortVideoCore.NvAudioClipModel, updateItem: NvShortVideoCore.NvAudioClipUpdateParam) -> NvShortVideoCore.NvAudioClipModel?
  public class func recoverClipModelState(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType: NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType, clipModel: NvShortVideoCore.NvAudioClipModel, backupModel: NvShortVideoCore.NvAudioClipModel) -> NvShortVideoCore.NvCommandError
}
extension NvShortVideoCore.NvAudioClipModel {
  public func copyModel() -> any NvShortVideoCore.NvUnionModel
}
public enum NvAccountAssetType : Swift.Int {
  case NvAccountAsset_All
  case NvAccountAsset_Stored
  case NvAccountAsset_Custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NvAlbumReusable : AnyObject {
  static var nvAlbumReuseIdentifier: Swift.String { get }
}
extension NvShortVideoCore.NvAlbumReusable {
  public static var nvAlbumReuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) final public func nvAlbumRegister<T>(cellType: T.Type) where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvAlbumReusable
  @_Concurrency.MainActor(unsafe) final public func nvAlbumDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UICollectionViewCell, T : NvShortVideoCore.NvAlbumReusable
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) final public func nvAlbumRegister<T>(cellType: T.Type) where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvAlbumReusable
  @_Concurrency.MainActor(unsafe) final public func nvAlbumDequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UITableViewCell, T : NvShortVideoCore.NvAlbumReusable
}
open class NvVideoCropperCommand : NvShortVideoCore.NvCommand {
  public init(title: Swift.String, clipModel: NvShortVideoCore.NvVideoClipModel, cropperModel: NvShortVideoCore.NvCropperModel?)
  @objc deinit
}
open class NvProEditConfig {
  open var previewConfig: NvShortVideoCore.NvPreviewConfig
  open var hdrConfig: NvShortVideoCore.NvEditHDRConfig
  open var resourceConfig: NvShortVideoCore.NvResourceConfig
  open var standardTimeLengthScale: CoreFoundation.CGFloat
  open var coverDuration: Swift.Int64
  open var minClipDuration: Swift.Int64
  open var maxRecordDuration: Swift.Int64
  open var imageClipInitDuration: Swift.Int64
  open var captionInitDuration: Swift.Int64
  open var stickerInitDuration: Swift.Int64
  open var comCaptionInitDuration: Swift.Int64
  open var effectInitDuration: Swift.Int64
  open var pluginInitDuration: Swift.Int64
  open var filterInitDuration: Swift.Int64
  open var adjustInitDuration: Swift.Int64
  open var editInterfaceStyle: NvShortVideoCore.NvEditInterfaceStyleConfig
  open var editControllerConfig: NvShortVideoCore.NvEditControllerConfig
  open var trackViewConfig: NvShortVideoCore.NvTrackViewConfig
  open var rectViewLingConfig: [NvShortVideoCore.NvRectViewTypeKey : NvShortVideoCore.NvRcetViewLingConfig]
  public var editInterfaceCustomProtocol: NvShortVideoCore.NvEditInterfaceCustomProtocol {
    get
  }
  public init()
  @objc deinit
}
open class NvPreviewConfig {
  open var previewResolution: Swift.Int32
  open var videoFps: Swift.Int32
  open var audioResolution: NvStreamingSdkCore.NvsAudioResolution
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvEditHDRConfig {
  open var liveWindowHDRDisplayMode: NvStreamingSdkCore.NvsLiveWindowHDRDisplayMode
  open var bitDepth: NvStreamingSdkCore.NvsVideoResolutionBitDepth
  open var colorGain: Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvResourceConfig {
  open var materialBeyondTheMaxWidthNeedTranscode: Swift.Bool
  open var materialMaxWidth: Swift.Int
  @objc deinit
}
open class NvEditControllerConfig {
  open var liveWindowTopEdge: CoreFoundation.CGFloat
  open var liveWindowHeight: CoreFoundation.CGFloat
  open var timelineViewOriginY: CoreFoundation.CGFloat
  open var timelineViewHeight: CoreFoundation.CGFloat
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvTrackViewConfig {
  open var minZoomScale: CoreFoundation.CGFloat
  open var maxZoomScale: CoreFoundation.CGFloat
  open var mainTrackHeight: CoreFoundation.CGFloat
  open var mainTrackLineSpacing: CoreFoundation.CGFloat
  open var timeViewHeight: CoreFoundation.CGFloat
  open var markViewHeight: CoreFoundation.CGFloat
  open var editAdjustHeight: CoreFoundation.CGFloat
  open var trackHeight: CoreFoundation.CGFloat
  open var clipContentViewCornerRadius: CoreFoundation.CGFloat
  open var trackSpacing: CoreFoundation.CGFloat
  open var clipSpacing: CoreFoundation.CGFloat
  open var maxPipTracks: Swift.Int
  open var maxMaterialTeaks: Swift.Int
  open var waveType: NvShortVideoCore.NvWaveType
  @objc deinit
}
open class NvRcetViewLingConfig {
  open var lineColor: UIKit.UIColor
  open var lineWidth: CoreFoundation.CGFloat
  open var phase: CoreFoundation.CGFloat
  open var lengths: [CoreFoundation.CGFloat]
  open var subRectConfig: NvShortVideoCore.NvRcetViewLingConfig?
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NvEditInterfaceCustomProtocol {
  weak public var rectViewCustomProtocol: (any NvShortVideoCore.NvRectViewCustomProtocol)?
  weak public var timelineViewCustomProtocol: (any NvShortVideoCore.NvTimelineViewCustomProtocol)?
  weak public var imageViewCustiomProtocol: (any NvShortVideoCore.NvImageViewCustiomProtocol)?
  @objc deinit
}
public protocol NvRectViewCustomProtocol : AnyObject {
  func setupRectViewButtons(rectView: NvShortVideoCore.NvRectView, rectViewType: NvShortVideoCore.NvRectViewTypeKey)
  func layoutRectViewButtons(rectView: NvShortVideoCore.NvRectView, rectViewType: NvShortVideoCore.NvRectViewTypeKey, rect: NvShortVideoCore.NvRect?, currentSeletedModel: (any NvShortVideoCore.NvUnionModel)?)
}
public protocol NvTimelineViewCustomProtocol : AnyObject {
  func clipEditView(for unionModel: any NvShortVideoCore.NvUnionModel, viewHeight: CoreFoundation.CGFloat) -> NvShortVideoCore.NvTrackClipEditView
  func editModeSet(for trackEditMode: NvShortVideoCore.NvEditModeChangedAction) -> [NvShortVideoCore.NvEditModeChangedAction]
}
public protocol NvImageViewCustiomProtocol : AnyObject {
  func animatedImageViewForTrackCellView() -> UIKit.UIImageView
  func loadImageFor(imageView: UIKit.UIImageView?, imageString: Swift.String?)
  func cache(image: UIKit.UIImage, url: Swift.String)
  func fetchImageFromCache(imageUrl: Swift.String) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers public class NvStreamingFunction {
  public class func buildTimeline(timelineModel: NvShortVideoCore.NvTimelineModel, context: NvStreamingSdkCore.NvsStreamingContext, previewConfig: NvShortVideoCore.NvPreviewConfig, hdrConfig: NvShortVideoCore.NvEditHDRConfig, sourceSet: [Swift.String : any NvShortVideoCore.NvDraftSource] = [:]) -> NvStreamingSdkCore.NvsTimeline
  public class func buildCoverTimeline(coverImagePath: Swift.String, duration: Swift.Int64, timelineData: NvShortVideoCore.NvTimelineModel, originTimeline: NvStreamingSdkCore.NvsTimeline, context: NvStreamingSdkCore.NvsStreamingContext, enableNested: Swift.Bool) -> NvStreamingSdkCore.NvsTimeline?
  @discardableResult
  public class func builtupTimelineTrackEffect(timelineModel: NvShortVideoCore.NvTimelineModel, cTimeline: NvStreamingSdkCore.NvsTimeline, startBlankChangeTime: Swift.Int64 = 0) -> NvStreamingSdkCore.NvsTimeline
  @discardableResult
  public class func builtupTimeline(timelineModel: NvShortVideoCore.NvTimelineModel, cTimeline: NvStreamingSdkCore.NvsTimeline, startBlankChangeTime: Swift.Int64, sourceSet: [Swift.String : any NvShortVideoCore.NvDraftSource] = [:]) -> NvStreamingSdkCore.NvsTimeline
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NvGifConverter {
  public static func shared() -> NvShortVideoCore.NvGifConverter
  public static func clear()
  final public func start(for data: Foundation.Data, outputPath: Swift.String, completeHandler: @escaping (_ isSuccess: Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NvLineTool : ObjectiveC.NSObject {
  public class func rotate(point: CoreFoundation.CGPoint, anchorPoint: CoreFoundation.CGPoint, angle: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public class func pathWithPoints(pointArray: [CoreFoundation.CGPoint]) -> UIKit.UIBezierPath
  public class func pedalPoint(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, x0: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public class func pointToLineHorizontalDistance(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, x0: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  public class func pointToLineVerticalDistance(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, x0: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  public class func twoPointDistance(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  public class func calculateExcircle(point0: CoreFoundation.CGPoint, point1: CoreFoundation.CGPoint, point2: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public class func calculateIntersection(p: NvShortVideoCore.MeicamPoint, c: NvShortVideoCore.MeicamPoint, radius: Swift.Float) -> NvShortVideoCore.MeicamPoint
  public class func twoLinePointOfIntersection(point1: CoreFoundation.CGPoint, point2: CoreFoundation.CGPoint, point3: CoreFoundation.CGPoint, point4: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc override dynamic public init()
  @objc deinit
}
extension NvShortVideoCore.NvClipCommand {
  public class func settleBackupItems(clipModel: NvShortVideoCore.NvVideoClipModel, updateItem: NvShortVideoCore.NvClipUpdateParam) -> NvShortVideoCore.NvVideoClipModel?
  public class func recoverClipModelState(timeline: NvStreamingSdkCore.NvsTimeline, clipActionType: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, clipModel: NvShortVideoCore.NvVideoClipModel, backupModel: NvShortVideoCore.NvVideoClipModel) -> NvShortVideoCore.NvCommandError
}
public enum NvVideoTrackFxType : Swift.String, Swift.CaseIterable {
  case none
  case actionEffect
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NvShortVideoCore.NvVideoTrackFxType]
  public typealias RawValue = Swift.String
  public static var allCases: [NvShortVideoCore.NvVideoTrackFxType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NvStreamingSdkCore.NvsFx {
  public var videoTrackFxType: NvShortVideoCore.NvVideoTrackFxType {
    get
  }
}
extension NvStreamingSdkCore.NvsVideoTrack {
  public typealias NvVideoTrackFxInfo = (isBuiltin: Swift.Bool, fx: Swift.String)
  public typealias NvVideoTrackFxTrimInfo = (inPoint: Swift.Int64, outPoint: Swift.Int64)
  @discardableResult
  public func appendFx(type: NvShortVideoCore.NvVideoTrackFxType, fxInfo: NvStreamingSdkCore.NvsVideoTrack.NvVideoTrackFxInfo = (true, ""), itemIndicate: Swift.String? = nil, trim: NvStreamingSdkCore.NvsVideoTrack.NvVideoTrackFxTrimInfo) -> NvStreamingSdkCore.NvsTrackVideoFx?
  @discardableResult
  public func removeFx(type: NvShortVideoCore.NvVideoTrackFxType, itemIndicate: Swift.String? = nil) -> Swift.Bool
  @discardableResult
  public func queryFx(for type: NvShortVideoCore.NvVideoTrackFxType, itemIndicate: Swift.String? = nil) -> NvStreamingSdkCore.NvsTrackVideoFx?
}
public var shareOperateTimelineModel: NvShortVideoCore.NvTimelineModel {
  get
}
public var shareOperateTimeline: NvStreamingSdkCore.NvsTimeline {
  get
}
public var projectInterfaceEnv: NvShortVideoCore.NvInterfaceEnv {
  get
}
public var projectEditConfig: NvShortVideoCore.NvProEditConfig {
  get
}
public var editMode: NvShortVideoCore.NvEditModeChangedAction {
  get
}
public var currentTimeLengthScale: CoreFoundation.CGFloat {
  get
}
public var timeAdsorbScope: Swift.Int64 {
  get
}
public var currentCenterTime: Swift.Int64 {
  get
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NvTimelineDataManager : NvShortVideoCore.NvEventObject, NvShortVideoCore.NvCommandManagerDataSource {
  final public var currentCenterTime: Swift.Int64
  final public var editMode: NvShortVideoCore.NvEditModeChangedAction
  final public var timelineModel: NvShortVideoCore.NvTimelineModel?
  final public var timeline: NvStreamingSdkCore.NvsTimeline?
  final public var editConfig: NvShortVideoCore.NvProEditConfig?
  final public var inEditTemplate: Swift.Bool
  final public var modified: Swift.Bool
  final public var specifyEditMode: NvShortVideoCore.NvEditModeChangedAction?
  final public var actionTarget: (any NvShortVideoCore.NvUnionModel)?
  final public class func sharedInstance() -> NvShortVideoCore.NvTimelineDataManager
  final public class func destroySharedInstance(destroyContext: Swift.Bool = true)
  final public class func managerAvailable() -> Swift.Bool
  @discardableResult
  final public func selectedClipItem(actionTarget: (any NvShortVideoCore.NvUnionModel)?, sender: ObjectiveC.NSObject, parameter _: [Swift.String : Any]? = nil, force: Swift.Bool = false) -> Swift.Bool
  final public func seekTimeline(position: Swift.Int64)
  final public func refreshTimelinePreview()
  final public func previewTimelineRange(inPoint: Swift.Int64, duration: Swift.Int64, isRollBack: Swift.Bool = true)
  final public func changeEditModel(editMode: NvShortVideoCore.NvEditModeChangedAction)
  final public func currentOperateProjectData() -> (timeline: NvStreamingSdkCore.NvsTimeline, timelineModel: NvShortVideoCore.NvTimelineModel, timelinePos: Swift.Int64)?
  final public func saveProjectData()
  final public func checkSeletedItem(cmdItem: (any NvShortVideoCore.NvUnionModel)?)
  final public var projectId: Swift.String {
    get
  }
  @objc deinit
}
extension NvShortVideoCore.NvTimelineDataManager {
  final public func stepperWork(timeChange: Swift.Int64, needSeek: Swift.Bool = true)
  final public func scrollTimeline(position: Swift.Int64, checkFrame: Swift.Bool, animated: Swift.Bool, needSeek: Swift.Bool = true)
  final public func scrollToClip(unionModel: any NvShortVideoCore.NvUnionModel)
}
extension NvShortVideoCore.NvCommand {
  public enum PackagedAction : Swift.Int {
    case sticker
    case caption
    case comcaption
    case filter
    case effect
    case `undef`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum StickerAction : Swift.Int {
    case append
    case copy
    case overspread
    case delete
    case recover
    case mirror
    case audiofx
    case animation
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum CaptionAction : Swift.Int {
    case append
    case update
    case copy
    case overspread
    case delete
    case recover
    case align
    case ifly
    case unIfly
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ComCaptionAction : Swift.Int {
    case append
    case copy
    case overspread
    case delete
    case recover
    case update
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum FilterAction : Swift.Int {
    case append
    case overspread
    case delete
    case replace
    case tailorTrack
    case moveTrack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EffectAction : Swift.Int {
    case append
    case copy
    case overspread
    case delete
    case replace
    case tailorTrack
    case moveTrack
    case actionObject
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc public protocol NvVolumeViewDelegate {
  @objc optional func volumeViewTapView(volumeView: NvShortVideoCore.NvVolumeView, enable: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvVolumeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var volumeImageView: UIKit.UIImageView!
  @_Concurrency.MainActor(unsafe) final public var lableName: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvVolumeViewDelegate)?
  @_Concurrency.MainActor(unsafe) final public var enable: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func enabledVolume(enable: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NvAdjustModel : NvShortVideoCore.NvAdjustColorModel {
  public var adjustFx: [Swift.String : NvStreamingSdkCore.NvsTimelineVideoFx]?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var adjustName: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var isBuiltinFx: Swift.Bool
  @discardableResult
  public func buildAdjustFx(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func loadAdjustFx(adjust: [Swift.String : NvStreamingSdkCore.NvsTimelineVideoFx])
  public func changeAdjustIntensity(itemType: NvShortVideoCore.NvAdjustItemType, value: Swift.Float)
  public func resetAdjustFx()
  public func getAdjustFxInfo(parameter: NvShortVideoCore.NvAdjustItemType) -> (min: Swift.Float, max: Swift.Float, currentValue: Swift.Float)
  @objc required dynamic public init()
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension NvShortVideoCore.NvAdjustModel : NvShortVideoCore.NvUnionModel {
  public func isTmpModel() -> Swift.Bool
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func getEditInPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow _: NvStreamingSdkCore.NvsLiveWindow, timelineTime _: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction, model _: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvAdjustModel {
  @objc override dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers open class NvEditInterfaceStyleConfig {
  open var editViewControllerBackgroundColor: UIKit.UIColor
  open var liveWindowBackgroundColor: NvStreamingSdkCore.NvsColor
  open var timelineViewBackgroundColor: UIKit.UIColor
  open var trackSetCellBackgroundColor: UIKit.UIColor
  open var trackCellBackgroundColor: UIKit.UIColor
  open var audioClipColor: UIKit.UIColor
  open var audioFadeInColor: UIKit.UIColor
  open var audioFadeOutColor: UIKit.UIColor
  open var effectClipColor: UIKit.UIColor
  open var filterClipColor: UIKit.UIColor
  open var adjustClipColor: UIKit.UIColor
  open var stickerClipColor: UIKit.UIColor
  open var captionClipColor: UIKit.UIColor
  open var comCaptionClipColor: UIKit.UIColor
  open var pipClipColor: UIKit.UIColor
  open var pluginClipColor: UIKit.UIColor
  open var bottomMenuBgColor: UIKit.UIColor
  open var musicWaveformColor: UIKit.UIColor
  open var recordWaveformColor: UIKit.UIColor
  open var timeFlagColor: UIKit.UIColor
  open var timeTextColor: UIKit.UIColor
  open var speedFlagColor: UIKit.UIColor
  open var speedTextColor: UIKit.UIColor
  open var speedImageName: Swift.String
  open var faceImageName: Swift.String
  open var volumeImageName: Swift.String
  open var clipSeletedRectColor: UIKit.UIColor
  open var clipInAnimationCoverColor: UIKit.UIColor
  open var clipOutAnimationCoverColor: UIKit.UIColor
  open var clipComAnimationCoverColor: UIKit.UIColor
  open var clipSeletedLeftSliderBlockImage: Swift.String
  open var clipSeletedRightSliderBlockImage: Swift.String
  open var clipViewDisableColor: UIKit.UIColor
  open var clipViewNormalColor: UIKit.UIColor
  open var pipBubbleColor: UIKit.UIColor
  open var materialTrackTipColor: UIKit.UIColor
  @objc deinit
}
extension NvShortVideoCore.NvRefreshComponent {
  public enum NvRefreshState : Swift.Int {
    case idel
    case pulling
    case refreshing
    case willRefresh
    case noMoreData
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NvRefreshComponent : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var scrollView: UIKit.UIScrollView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var originalInset: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) public var pullingPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isAutomaticallyChangeAlpha: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isRefreshing: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var state: NvShortVideoCore.NvRefreshComponent.NvRefreshState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func configRefreshEvent(target: Swift.AnyObject, action: ObjectiveC.Selector)
  @objc @_Concurrency.MainActor(unsafe) public func executeRefreshingCallback()
  @objc @_Concurrency.MainActor(unsafe) open func prepare()
  @_Concurrency.MainActor(unsafe) open func updateRefreshState(for _: NvShortVideoCore.NvRefreshComponent.NvRefreshState)
  @objc @_Concurrency.MainActor(unsafe) open func beginRefreshing()
  @objc @_Concurrency.MainActor(unsafe) open func endRefreshing()
  @objc @_Concurrency.MainActor(unsafe) open func configScrollViewBounce(_: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func placeSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func scrollViewContentOffsetDidChanged(change _: [Foundation.NSKeyValueChangeKey : Any]?)
  @objc @_Concurrency.MainActor(unsafe) open func scrollViewContentSizeDidChanged(change _: [Foundation.NSKeyValueChangeKey : Any]?)
  @objc @_Concurrency.MainActor(unsafe) open func scrollViewPanStateDidChanged(change _: [Foundation.NSKeyValueChangeKey : Any]?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
extension NvShortVideoCore.NvRefreshComponent {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
}
public enum NvClipEditViewUpdateEvent : Swift.String {
  case recordDataUpdate
  case keyframeEvent
  case displayState
  case animationDuration
  case itemUpdate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NvTimelineViewDelegate : AnyObject {
  func timelineView(timelineView: NvShortVideoCore.NvTimelineView, scrollPosition: Swift.Int64)
  func videoTrackClipsOrderChanged(videoTrackView: NvShortVideoCore.NvVideoTrackPreview, fromIndex: Swift.UInt32, toIndex: Swift.UInt32)
  func videoTrackClipsOrderEnableChanged() -> Swift.Bool
  func videoTrackSelectTransitionIndex(videoTrackView: NvShortVideoCore.NvVideoTrackPreview, selectTransitionIndex: Swift.Int)
  func responseForOverClipTime() -> (responseType: NvShortVideoCore.NvOverTimeResponseType, time: Swift.Int64)
  func viewForMainTrackHeader(timelineView: NvShortVideoCore.NvTimelineView, mainTrackHeight: CoreFoundation.CGFloat) -> UIKit.UIView?
  func viewForMainTrackOperator(timelineView: NvShortVideoCore.NvTimelineView, mainTrackHeight: CoreFoundation.CGFloat) -> UIKit.UIView?
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvTimelineView : NvShortVideoCore.NvEventView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NvShortVideoCore.NvTimelineViewDelegate)?
  @_Concurrency.MainActor(unsafe) final public var trackList: NvShortVideoCore.NvTrackListView!
  @_Concurrency.MainActor(unsafe) final public func loadTimeline()
  @_Concurrency.MainActor(unsafe) final public func setEditMode(editMode: NvShortVideoCore.NvEditModeChangedAction)
  @_Concurrency.MainActor(unsafe) final public func timelineSetCurrentTimePositionFrameChange(position: Swift.Int64, checkFrame: Swift.Bool, checkSeleted: Swift.Bool, animated: Swift.Bool, duration: Swift.Double, autoScroll: Swift.Bool) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func timelineViewReceivedCommandRefreshRequest(impact: NvShortVideoCore.NvCommandImpact)
  @_Concurrency.MainActor(unsafe) final public func updateClipEditView(event: NvShortVideoCore.NvClipEditViewUpdateEvent, model: (any NvShortVideoCore.NvUnionModel)?, parameter: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) final public func addRecordTmpAudioModel() -> NvShortVideoCore.NvAudioClipModel
  @_Concurrency.MainActor(unsafe) final public func recordViewRemoveTmpAudioModel(indicate: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func checkSelectedClip(position: Swift.Int64, playBack: Swift.Bool) -> Swift.Bool
  @objc deinit
}
public protocol NvSqliteOpertation : AnyObject {
  func beginEdit(_ model: any NvShortVideoCore.NvDraftSource.Type) -> Swift.Bool
  func endEdit()
  func insert(_ model: any NvShortVideoCore.NvDraftSource) -> Swift.Bool
  func inserts(_ models: [any NvShortVideoCore.NvDraftSource]) -> Swift.Bool
  func query(_ type: any NvShortVideoCore.NvDraftSource.Type) -> [any NvShortVideoCore.NvDraftSource]?
  func query(_ type: any NvShortVideoCore.NvDraftSource.Type, sql: Swift.String) -> [any NvShortVideoCore.NvDraftSource]?
  func delete(_ type: any NvShortVideoCore.NvDraftSource.Type, sql: Swift.String) -> Swift.Bool
}
public protocol NvDraftSource : AnyObject {
  var mediaType: NvShortVideoCore.MeicamMediaType { get set }
  var file: NvShortVideoCore.NvSourceFileInfo { get set }
  var reverseFile: NvShortVideoCore.NvSourceFileInfo? { get set }
  var relatedProjects: [Swift.String] { get set }
  var resourceId: Swift.String { get set }
  var deleteWhenUnuse: Swift.Bool { get set }
  init()
  init(localFilePath: Swift.String, resourceId: Swift.String)
}
extension NvShortVideoCore.NvDraftSource {
  public func fileInfo(type: NvShortVideoCore.NvSourceRelatedFileType) -> NvShortVideoCore.NvSourceFileInfo?
  public func updateFileInfo(type: NvShortVideoCore.NvSourceRelatedFileType, info: NvShortVideoCore.NvSourceFileInfo?)
}
@objc @_inheritsConvenienceInitializers public class NvFilterModel : ObjectiveC.NSObject, NvShortVideoCore.NvCodable {
  weak public var filter: NvStreamingSdkCore.NvsTimelineVideoFx?
  public var itemIndicate: Swift.String
  public var trackIndex: Swift.Int
  public var trackCompensateZValue: Swift.Int
  public var packageId: Swift.String
  public var intensity: Swift.Float
  public var filterName: Swift.String
  public var filterNameEn: Swift.String
  public var inPoint: Swift.Int64
  public var outPoint: Swift.Int64
  public var isBuiltinFx: Swift.Bool
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @discardableResult
  public func buildFilter(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func loadFilter(filter: NvStreamingSdkCore.NvsTimelineVideoFx)
  public func changeIntensity(_ intensity: Swift.Float)
  public func changePackageId(filterName: Swift.String, filterNameEn: Swift.String, packageId: Swift.String, cTimeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  @objc deinit
}
extension NvShortVideoCore.NvFilterModel : NvShortVideoCore.NvUnionModel {
  public func syncEntityData() -> Swift.Bool
  public func removeEntity(timeline: NvStreamingSdkCore.NvsTimeline) -> Swift.Bool
  public func entity() -> Swift.AnyObject?
  public func getIndicate() -> Swift.String
  public func getEntityInPoint() -> Swift.Int64
  public func getEntityOutPoint() -> Swift.Int64
  public func setEditInPoint(time: Swift.Int64)
  public func getEditInPoint() -> Swift.Int64
  public func setEditOutPoint(time: Swift.Int64)
  public func getEditOutPoint() -> Swift.Int64
  public func getEntityTrackIndex() -> Swift.Int
  public func boundingRectangleVertices(timeline _: NvStreamingSdkCore.NvsTimeline?, liveWindow _: NvStreamingSdkCore.NvsLiveWindow, timelineTime _: Swift.Int64, isTimelineVal _: Swift.Bool) -> NvShortVideoCore.NvRect?
  public func displayableTimeInterval(timeline _: NvStreamingSdkCore.NvsTimeline) -> (minInPoint: Swift.Int64, maxOutPoint: Swift.Int64)
  public func tailorInPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  public func tailorOutPoint(timeline _: NvStreamingSdkCore.NvsTimeline, timeChange: Swift.Int64)
  @discardableResult
  public func tailorEnd(timeline: NvStreamingSdkCore.NvsTimeline, dragLeft: Swift.Bool) -> NvShortVideoCore.NvCommand?
  @discardableResult
  public func moveToTrack(index: Swift.Int, newInPoint: Swift.Int64, timeline: NvStreamingSdkCore.NvsTimeline) -> NvShortVideoCore.NvCommand?
  public func applicableTrackType() -> NvShortVideoCore.NvEditModeChangedAction
  public func resetTrackIndex(index: Swift.Int)
  public func isValidity() -> Swift.Bool
  public func copyLinkage(changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> any NvShortVideoCore.NvUnionModel
  public func syncLinkageChangeToEntity(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction) -> Swift.Bool
  public func recoverLinkageChange(timeline _: NvStreamingSdkCore.NvsTimeline, clipActionType _: NvShortVideoCore.NvClipUpdateParam.VideoClipActionType, changeState _: NvShortVideoCore.NvEffectLinkage.ChangeAction, model _: any NvShortVideoCore.NvUnionModel) -> Swift.Bool
}
extension NvShortVideoCore.NvFilterModel : Foundation.NSCopying {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NvEditAlertView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var textField: UIKit.UITextField?
  @_Concurrency.MainActor(unsafe) public static func dismiss()
  @_Concurrency.MainActor(unsafe) public static func showInputView(title: Swift.String, text: Swift.String, placeholder: Swift.String, doneBlok: ((Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public static func showProgressView(text: Swift.String, cancelBlok: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public static func updateProgress(value: CoreFoundation.CGFloat)
  @objc deinit
}
extension NvShortVideoCore.NvEditAlertView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public struct NvIconHDRConfig {
  public init(bitDepth: NvStreamingSdkCore.NvsVideoResolutionBitDepth, colorGain: Swift.Float)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NvTimelineIcon : ObjectiveC.NSObject, NvStreamingSdkCore.NvsImageGrabberDelegate {
  public static func grab(_ context: NvStreamingSdkCore.NvsStreamingContext, timeline: NvStreamingSdkCore.NvsTimeline, timestamp: Swift.Int64, fillBlack: Swift.Bool, needScale: Swift.Bool = true) -> UIKit.UIImage?
  @discardableResult
  public static func asyncGrab(_ context: NvStreamingSdkCore.NvsStreamingContext, timeline: NvStreamingSdkCore.NvsTimeline, timestamp: Swift.Int64, fillBlack: Swift.Bool, needScale: Swift.Bool = true, completeHandle: @escaping (_ image: UIKit.UIImage?) -> Swift.Void) -> Swift.Bool
  public static func asyncGrabVideoClipFrame(_ streamingContext: NvStreamingSdkCore.NvsStreamingContext, imageWidth: Swift.UInt32 = 0, imageHeight: Swift.UInt32 = 0, filePath: Swift.String, timestamp: Swift.Int64, hdrConfig: NvShortVideoCore.NvIconHDRConfig?, needScale: Swift.Bool = false, crop: NvShortVideoCore.NvCropperModel? = nil, completeHandle: @escaping (_ image: UIKit.UIImage?) -> Swift.Void)
  public static func builtupGrabVideoClipTimeline(context: NvStreamingSdkCore.NvsStreamingContext, imageWidth: Swift.UInt32, imageHeight: Swift.UInt32, filePath: Swift.String, timestamp: Swift.Int64, hdrConfig: NvShortVideoCore.NvIconHDRConfig?, needScale: Swift.Bool = true, crop: NvShortVideoCore.NvCropperModel? = nil) -> NvStreamingSdkCore.NvsTimeline?
  public static func grabVideoClipFrame(_ streamingContext: NvStreamingSdkCore.NvsStreamingContext, imageWidth: Swift.UInt32, imageHeight: Swift.UInt32, filePath: Swift.String, timestamp: Swift.Int64, fillBlack: Swift.Bool, hdrConfig: NvShortVideoCore.NvIconHDRConfig?, needScale: Swift.Bool = true) -> UIKit.UIImage?
  @objc public func onImageGrabbedArrived(_ image: UIKit.UIImage?, timestamp _: Swift.Int64)
  @objc deinit
}
public protocol NvDoubleSliderDelegate : AnyObject {
  func doubleSlider(_ slider: NvShortVideoCore.NvDoubleSlider, locationDidChanged isLeft: Swift.Bool, isFinished: Swift.Bool)
}
extension NvShortVideoCore.NvDoubleSliderDelegate {
  public func doubleSlider(_: NvShortVideoCore.NvDoubleSlider, locationDidChanged _: Swift.Bool, isFinished _: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NvDoubleSlider : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any NvShortVideoCore.NvDoubleSliderDelegate)?
  @_Concurrency.MainActor(unsafe) public var duration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var curMinValue: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var curMaxValue: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var minThumbImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxthumbImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var midTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHiddenLeftValue: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHiddenRightValue: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension NvShortVideoCore.NvDoubleSlider {
  @_Concurrency.MainActor(unsafe) public func changeLocation(withAnitmation duration: Foundation.TimeInterval = 0, updateLabel: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func updateLeftIcon(_ isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func updateRightIcon(_ isHidden: Swift.Bool)
}
extension NvShortVideoCore.NvDoubleSlider {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
}
extension NvShortVideoCore.NvEffectLinkage.NvLinkageDataType : Swift.Equatable {}
extension NvShortVideoCore.NvEffectLinkage.NvLinkageDataType : Swift.Hashable {}
extension NvShortVideoCore.NvEffectLinkage.NvLinkageDataType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEffectLinkage.ChangeAction : Swift.Equatable {}
extension NvShortVideoCore.NvEffectLinkage.ChangeAction : Swift.Hashable {}
extension NvShortVideoCore.NvEffectLinkage.ChangeAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEvent : Swift.Equatable {}
extension NvShortVideoCore.NvEvent : Swift.Hashable {}
extension NvShortVideoCore.NvEvent : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEditModeChangedAction : Swift.Equatable {}
extension NvShortVideoCore.NvEditModeChangedAction : Swift.Hashable {}
extension NvShortVideoCore.NvEditModeChangedAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvUserClickActionEvent : Swift.Equatable {}
extension NvShortVideoCore.NvUserClickActionEvent : Swift.Hashable {}
extension NvShortVideoCore.NvUserClickActionEvent : Swift.RawRepresentable {}
extension NvShortVideoCore.NvSeleteClipEvent : Swift.Equatable {}
extension NvShortVideoCore.NvSeleteClipEvent : Swift.Hashable {}
extension NvShortVideoCore.NvSeleteClipEvent : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFxSourceType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxSourceType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxSourceType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFxType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFxAddingMethodType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxAddingMethodType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxAddingMethodType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCoverType : Swift.Equatable {}
extension NvShortVideoCore.NvCoverType : Swift.Hashable {}
extension NvShortVideoCore.NvCoverType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFx.KeyframeActionType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFx.KeyframeActionType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFx.KeyframeActionType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvUserActionBottomType : Swift.Equatable {}
extension NvShortVideoCore.NvUserActionBottomType : Swift.Hashable {}
extension NvShortVideoCore.NvUserActionBottomType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvOverTimeResponseType : Swift.Equatable {}
extension NvShortVideoCore.NvOverTimeResponseType : Swift.Hashable {}
extension NvShortVideoCore.NvOverTimeResponseType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvRequestError : Swift.Equatable {}
extension NvShortVideoCore.NvRequestError : Swift.Hashable {}
extension NvShortVideoCore.NvRectViewUpdateEvent : Swift.Equatable {}
extension NvShortVideoCore.NvRectViewUpdateEvent : Swift.Hashable {}
extension NvShortVideoCore.NvRectViewUpdateEvent : Swift.RawRepresentable {}
extension NvShortVideoCore.NvRectViewTypeKey : Swift.Equatable {}
extension NvShortVideoCore.NvRectViewTypeKey : Swift.Hashable {}
extension NvShortVideoCore.NvRectViewTypeKey : Swift.RawRepresentable {}
extension NvShortVideoCore.NvKeyframeCommand.TimelineFxType : Swift.Equatable {}
extension NvShortVideoCore.NvKeyframeCommand.TimelineFxType : Swift.Hashable {}
extension NvShortVideoCore.NvKeyframeCommand.TimelineFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTemplateButton.ImageStyle : Swift.Equatable {}
extension NvShortVideoCore.NvTemplateButton.ImageStyle : Swift.Hashable {}
extension NvShortVideoCore.NvTemplateButton.IndicatorStyle : Swift.Equatable {}
extension NvShortVideoCore.NvTemplateButton.IndicatorStyle : Swift.Hashable {}
extension NvShortVideoCore.NvBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvBlurBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvBlurBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvBlurBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvStylizedBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvStylizedBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvStylizedBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvSpliterBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvSpliterBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvSpliterBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvPixelatedBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvPixelatedBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvPixelatedBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvDistortedBuiltinType : Swift.Equatable {}
extension NvShortVideoCore.NvDistortedBuiltinType : Swift.Hashable {}
extension NvShortVideoCore.NvDistortedBuiltinType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvConvertorError : Swift.Equatable {}
extension NvShortVideoCore.NvConvertorError : Swift.Hashable {}
extension NvShortVideoCore.NvConvertorError : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.BuiltinAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.BuiltinAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.BuiltinAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.AdjustAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.AdjustAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.AdjustAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.CustomAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.CustomAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.CustomAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.WatermarkAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.WatermarkAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.WatermarkAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.ActionType : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.ActionType : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.ActionType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvClipMaskType : Swift.Equatable {}
extension NvShortVideoCore.NvClipMaskType : Swift.Hashable {}
extension NvShortVideoCore.NvClipMaskType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTextView.Position : Swift.Equatable {}
extension NvShortVideoCore.NvTextView.Position : Swift.Hashable {}
extension NvShortVideoCore.NvTextView.Position : Swift.RawRepresentable {}
extension NvShortVideoCore.NvLogger.Level : Swift.Equatable {}
extension NvShortVideoCore.NvLogger.Level : Swift.Hashable {}
extension NvShortVideoCore.NvLogger.Level : Swift.RawRepresentable {}
extension NvShortVideoCore.NvLayout.NvEnvs : Swift.Equatable {}
extension NvShortVideoCore.NvLayout.NvEnvs : Swift.Hashable {}
extension NvShortVideoCore.NvUtils.NvCapturePermissions : Swift.Equatable {}
extension NvShortVideoCore.NvUtils.NvCapturePermissions : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxStringParamType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxStringParamType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxStringParamType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFxParamType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxParamType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxParamType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamFxParamAttachmentType : Swift.Equatable {}
extension NvShortVideoCore.MeicamFxParamAttachmentType : Swift.Hashable {}
extension NvShortVideoCore.MeicamFxParamAttachmentType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEditAspectRatioMode : Swift.Equatable {}
extension NvShortVideoCore.NvEditAspectRatioMode : Swift.Hashable {}
extension NvShortVideoCore.NvEditAspectRatioMode : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommandImpact.TrackFxType : Swift.Equatable {}
extension NvShortVideoCore.NvCommandImpact.TrackFxType : Swift.Hashable {}
extension NvShortVideoCore.NvCommandImpact.TrackFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommandImpact.ImpactType : Swift.Equatable {}
extension NvShortVideoCore.NvCommandImpact.ImpactType : Swift.Hashable {}
extension NvShortVideoCore.NvCommandImpact.ImpactType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.Sticker : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.Sticker : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.Sticker : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.Caption : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.Caption : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.Caption : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.ComCaption : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.ComCaption : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.ComCaption : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAssetPackageType : Swift.Equatable {}
extension NvShortVideoCore.NvAssetPackageType : Swift.Hashable {}
extension NvShortVideoCore.NvAssetPackageType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEditButton.ImageStyle : Swift.Equatable {}
extension NvShortVideoCore.NvEditButton.ImageStyle : Swift.Hashable {}
extension NvShortVideoCore.NvEditButton.IndicatorStyle : Swift.Equatable {}
extension NvShortVideoCore.NvEditButton.IndicatorStyle : Swift.Hashable {}
extension NvShortVideoCore.NvAudioType : Swift.Equatable {}
extension NvShortVideoCore.NvAudioType : Swift.Hashable {}
extension NvShortVideoCore.NvAudioType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvClipAnimationType : Swift.Equatable {}
extension NvShortVideoCore.NvClipAnimationType : Swift.Hashable {}
extension NvShortVideoCore.NvClipAnimationType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvFaceBeautyType : Swift.Equatable {}
extension NvShortVideoCore.NvFaceBeautyType : Swift.Hashable {}
extension NvShortVideoCore.NvFaceBeautyType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvFaceShapeType : Swift.Equatable {}
extension NvShortVideoCore.NvFaceShapeType : Swift.Hashable {}
extension NvShortVideoCore.NvFaceShapeType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvRequestFileError : Swift.Equatable {}
extension NvShortVideoCore.NvRequestFileError : Swift.Hashable {}
extension NvShortVideoCore.NvRequestFileError : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAspectRatio : Swift.Equatable {}
extension NvShortVideoCore.NvAspectRatio : Swift.Hashable {}
extension NvShortVideoCore.NvAspectRatio : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.Fileter : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.Fileter : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.Fileter : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.Caption : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.Caption : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.Caption : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.Sticker : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.Sticker : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.Sticker : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.ARScene : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.ARScene : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.ARScene : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.Transition : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.Transition : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.Transition : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAsset.Template : Swift.Equatable {}
extension NvShortVideoCore.NvAsset.Template : Swift.Hashable {}
extension NvShortVideoCore.NvAsset.Template : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoFxStatus : Swift.Equatable {}
extension NvShortVideoCore.NvVideoFxStatus : Swift.Hashable {}
extension NvShortVideoCore.NvKeyframeCommand.VideoFxType : Swift.Equatable {}
extension NvShortVideoCore.NvKeyframeCommand.VideoFxType : Swift.Hashable {}
extension NvShortVideoCore.NvKeyframeCommand.VideoFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.HandleTranslateState : Swift.Equatable {}
extension NvShortVideoCore.HandleTranslateState : Swift.Hashable {}
extension NvShortVideoCore.HandleTranslateState : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAdjustItemType : Swift.Equatable {}
extension NvShortVideoCore.NvAdjustItemType : Swift.Hashable {}
extension NvShortVideoCore.NvAdjustItemType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvClipUpdateParam.VideoClipActionType : Swift.Equatable {}
extension NvShortVideoCore.NvClipUpdateParam.VideoClipActionType : Swift.Hashable {}
extension NvShortVideoCore.NvClipUpdateParam.VideoClipActionType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoClipPropertyFxType : Swift.Equatable {}
extension NvShortVideoCore.NvVideoClipPropertyFxType : Swift.Hashable {}
extension NvShortVideoCore.NvVideoClipPropertyFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoClipFxType : Swift.Equatable {}
extension NvShortVideoCore.NvVideoClipFxType : Swift.Hashable {}
extension NvShortVideoCore.NvVideoClipFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTemplateAspectRatioMode : Swift.Equatable {}
extension NvShortVideoCore.NvTemplateAspectRatioMode : Swift.Hashable {}
extension NvShortVideoCore.NvTemplateAspectRatioMode : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCropperAspectRatio : Swift.Equatable {}
extension NvShortVideoCore.NvCropperAspectRatio : Swift.Hashable {}
extension NvShortVideoCore.NvCropperAspectRatio : Swift.RawRepresentable {}
extension NvShortVideoCore.NvStepperDirection : Swift.Equatable {}
extension NvShortVideoCore.NvStepperDirection : Swift.Hashable {}
extension NvShortVideoCore.NvStepperDirection : Swift.RawRepresentable {}
extension NvShortVideoCore.NvStepperMode : Swift.Equatable {}
extension NvShortVideoCore.NvStepperMode : Swift.Hashable {}
extension NvShortVideoCore.NvStepperMode : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvVideoClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvVideoClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAudioClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvAudioClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvAudioClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvStickerClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvStickerClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvStickerClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCaptionClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvCaptionClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvCaptionClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvComcaptionClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvComcaptionClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvComcaptionClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvEffectClipEditAction : Swift.Equatable {}
extension NvShortVideoCore.NvEffectClipEditAction : Swift.Hashable {}
extension NvShortVideoCore.NvEffectClipEditAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAudioMenuAction : Swift.Equatable {}
extension NvShortVideoCore.NvAudioMenuAction : Swift.Hashable {}
extension NvShortVideoCore.NvAudioMenuAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTailorMode : Swift.Equatable {}
extension NvShortVideoCore.NvTailorMode : Swift.Hashable {}
extension NvShortVideoCore.NvTailorMode : Swift.RawRepresentable {}
extension NvShortVideoCore.NvSelectAssetType : Swift.Equatable {}
extension NvShortVideoCore.NvSelectAssetType : Swift.Hashable {}
extension NvShortVideoCore.NvSelectAssetType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTemplateLayout.NvTemplateEnvs : Swift.Equatable {}
extension NvShortVideoCore.NvTemplateLayout.NvTemplateEnvs : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.FxType : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.FxType : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.FxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.FxIdentify : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.FxIdentify : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.FxIdentify : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.KeyframeFxType : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.KeyframeFxType : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.KeyframeFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.KeyframeAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.KeyframeAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.KeyframeAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoTransitionType : Swift.Equatable {}
extension NvShortVideoCore.NvVideoTransitionType : Swift.Hashable {}
extension NvShortVideoCore.NvVideoTransitionType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType : Swift.Equatable {}
extension NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType : Swift.Hashable {}
extension NvShortVideoCore.NvAudioClipUpdateParam.AudioClipActionType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvProEditType : Swift.Equatable {}
extension NvShortVideoCore.NvProEditType : Swift.Hashable {}
extension NvShortVideoCore.NvProEditType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvTimelineFxType : Swift.Equatable {}
extension NvShortVideoCore.NvTimelineFxType : Swift.Hashable {}
extension NvShortVideoCore.NvTimelineFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommandOperateType : Swift.Equatable {}
extension NvShortVideoCore.NvCommandOperateType : Swift.Hashable {}
extension NvShortVideoCore.NvCommandOperateType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvBackgroundFxType : Swift.Equatable {}
extension NvShortVideoCore.NvBackgroundFxType : Swift.Hashable {}
extension NvShortVideoCore.NvBackgroundFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.MeicamMediaType : Swift.Equatable {}
extension NvShortVideoCore.MeicamMediaType : Swift.Hashable {}
extension NvShortVideoCore.MeicamMediaType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvFileSourceType : Swift.Equatable {}
extension NvShortVideoCore.NvFileSourceType : Swift.Hashable {}
extension NvShortVideoCore.NvFileSourceType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvSourceRelatedFileType : Swift.Equatable {}
extension NvShortVideoCore.NvSourceRelatedFileType : Swift.Hashable {}
extension NvShortVideoCore.NvSourceRelatedFileType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.Transform : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.Transform : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.Transform : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.Opacity : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.Opacity : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.Opacity : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.Mask : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.Mask : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.Mask : Swift.RawRepresentable {}
extension NvShortVideoCore.NvsKeyframe.VideoFxIdentify : Swift.Equatable {}
extension NvShortVideoCore.NvsKeyframe.VideoFxIdentify : Swift.Hashable {}
extension NvShortVideoCore.NvsKeyframe.VideoFxIdentify : Swift.RawRepresentable {}
extension NvShortVideoCore.NvRecordManager.NvRecordError : Swift.Equatable {}
extension NvShortVideoCore.NvRecordManager.NvRecordError : Swift.Hashable {}
extension NvShortVideoCore.NvRecordManager.NvRecordError : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCaptionOperationType : Swift.Equatable {}
extension NvShortVideoCore.NvCaptionOperationType : Swift.Hashable {}
extension NvShortVideoCore.NvCaptionOperationType : Swift.RawRepresentable {}
extension NvShortVideoCore.CategoricalName : Swift.Equatable {}
extension NvShortVideoCore.CategoricalName : Swift.Hashable {}
extension NvShortVideoCore.CategoricalName : Swift.RawRepresentable {}
extension NvShortVideoCore.PackExtensionSet : Swift.Equatable {}
extension NvShortVideoCore.PackExtensionSet : Swift.Hashable {}
extension NvShortVideoCore.PackExtensionSet : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.TimelineFxType : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.TimelineFxType : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.TimelineFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvAccountAssetType : Swift.Equatable {}
extension NvShortVideoCore.NvAccountAssetType : Swift.Hashable {}
extension NvShortVideoCore.NvAccountAssetType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvVideoTrackFxType : Swift.Equatable {}
extension NvShortVideoCore.NvVideoTrackFxType : Swift.Hashable {}
extension NvShortVideoCore.NvVideoTrackFxType : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.PackagedAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.PackagedAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.PackagedAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.StickerAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.StickerAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.StickerAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.CaptionAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.CaptionAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.CaptionAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.ComCaptionAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.ComCaptionAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.ComCaptionAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.FilterAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.FilterAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.FilterAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvCommand.EffectAction : Swift.Equatable {}
extension NvShortVideoCore.NvCommand.EffectAction : Swift.Hashable {}
extension NvShortVideoCore.NvCommand.EffectAction : Swift.RawRepresentable {}
extension NvShortVideoCore.NvRefreshComponent.NvRefreshState : Swift.Equatable {}
extension NvShortVideoCore.NvRefreshComponent.NvRefreshState : Swift.Hashable {}
extension NvShortVideoCore.NvRefreshComponent.NvRefreshState : Swift.RawRepresentable {}
extension NvShortVideoCore.NvClipEditViewUpdateEvent : Swift.Equatable {}
extension NvShortVideoCore.NvClipEditViewUpdateEvent : Swift.Hashable {}
extension NvShortVideoCore.NvClipEditViewUpdateEvent : Swift.RawRepresentable {}
